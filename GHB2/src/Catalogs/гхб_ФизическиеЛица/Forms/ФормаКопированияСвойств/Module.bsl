
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	ЗаполнитьДанныеПоПользователямИКонтакнойИнформации(Параметры);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьСписокВыбораДляНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОбновитьДинамическиеСпискиВладельцаФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеДляКопированияЗначениеПриИзменении(Элемент)	
	УстнановитьПризнакИзменения();	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ДанныеДляКопирования.ТекущиеДанные;
	Если ТекСтрока <> Неопределено 
			И ТекСтрока.Настройка = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.РабочееПомещение") Тогда
		ОткрытьФорму("Справочник.гхб_РабочиеПомещения.Форма.ФормаВыбора", , Элементы.ДанныеДляКопированияЗначение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияНастройкаПриИзменении(Элемент)
	
	УстнановитьПризнакИзменения();
	УстановитьСписокВыбораДляНастроек();
	УстановитьМаскуИВозможностьРеадктированияДляТекущейСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.ДанныеДляКопирования.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И ТекСтрока.СтрокаЗагружена Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияПослеУдаления(Элемент)
	УстановитьСписокВыбораДляНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияПриАктивизацииСтроки(Элемент)	
	УстановитьМаскуИВозможностьРеадктированияДляТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляКопированияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура СкопироватьСвойства(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаКомандыСкопироватьСвойства", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Вы действительно хотите скопировать свойства объекта?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,
						"Копирование свойств объекта");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Команда)
	УстановитьСнятьПометкуОбмена(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	УстановитьСнятьПометкуОбмена(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоПользователямИКонтакнойИнформации(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА гхб_ФизическиеЛицаБазХолдинга.Ссылка = &ФизЛицоСКогоКопировать
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Откуда,
		|	ВЫБОР
		|		КОГДА гхб_ФизическиеЛицаБазХолдинга.Ссылка = &ФизЛицоСКогоКопировать
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Куда,
		|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
		|	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга,
		|	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга КАК БазаХолдинга,
		|	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга.ВнешнийИсточникПоУмолчанию КАК ВнешнийИсточник
		|ИЗ
		|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
		|ГДЕ
		|	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &ФизЛицоТекущейБазы
		|	И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга.ТипБазы = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыБазХолдинга.РИБ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА &НастройкаКопирования = ""Доменное имя""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Копировать,
		|	""Доменное имя"" КАК Настройка,
		|	гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя КАК Значение,
		|	ИСТИНА КАК СтрокаЗагружена
		|ИЗ
		|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
		|ГДЕ
		|	гхб_ФизическиеЛицаБазХолдинга.Ссылка = &ФизЛицоСКогоКопировать
		|	И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга.ТипБазы = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыБазХолдинга.РИБ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &НастройкаКопирования = гхб_КонтактнаяИнформацияБазХолдинга.Вид
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	гхб_КонтактнаяИнформацияБазХолдинга.Вид,
		|	гхб_КонтактнаяИнформацияБазХолдинга.Представление,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
		|ГДЕ
		|	гхб_КонтактнаяИнформацияБазХолдинга.Объект = &ФизЛицоСКогоКопировать
		|	И гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга.ТипБазы = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыБазХолдинга.РИБ)
		|	И гхб_КонтактнаяИнформацияБазХолдинга.Вид В(&МассивНастроекДляКопирования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	гхб_ДанныеДляПодбораПриОбмене.БазаХолдинга КАК БазаХолдинга,
		|	гхб_ДанныеДляПодбораПриОбмене.УИД КАК УИД,
		|	гхб_ДанныеДляПодбораПриОбмене.ЗначениеСоответствия КАК ЗначениеСоответствия
		|ИЗ
		|	РегистрСведений.гхб_ДанныеДляПодбораПриОбмене КАК гхб_ДанныеДляПодбораПриОбмене
		|ГДЕ
		|	гхб_ДанныеДляПодбораПриОбмене.Тип = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыЗначенийДляПодбораПриОбмене.ВидыКонтактнойИнформации)
		|	И гхб_ДанныеДляПодбораПриОбмене.ЗначениеСоответствия В(&МассивНастроекДляКопирования)
		|
		|СГРУППИРОВАТЬ ПО
		|	гхб_ДанныеДляПодбораПриОбмене.БазаХолдинга,
		|	гхб_ДанныеДляПодбораПриОбмене.УИД,
		|	гхб_ДанныеДляПодбораПриОбмене.ЗначениеСоответствия";
	
	Запрос.УстановитьПараметр("ФизЛицоТекущейБазы", Параметры.ФизЛицоТекущейБазы);
	Запрос.УстановитьПараметр("ФизЛицоСКогоКопировать", Параметры.ФизЛицоСКогоКопировать);
	Запрос.УстановитьПараметр("НастройкаКопирования", Параметры.НастройкаКопирования);
	
	МассивНастроекДляКопирования = Новый Массив;
	МассивНастроекДляКопирования.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	МассивНастроекДляКопирования.Добавить(Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	МассивНастроекДляКопирования.Добавить(Справочники.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя);
	МассивНастроекДляКопирования.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	МассивНастроекДляКопирования.Добавить(Справочники.ВидыКонтактнойИнформации.РабочееПомещение);
	
	Запрос.УстановитьПараметр("МассивНастроекДляКопирования", МассивНастроекДляКопирования);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	СписокФизЛиц.Загрузить(ПакетЗапросов[0].Выгрузить());
	ДанныеДляКопирования.Загрузить(ПакетЗапросов[1].Выгрузить());
	УИДыКонтакнойИнформацииБазХолдинга.Загрузить(ПакетЗапросов[2].Выгрузить());

КонецПроцедуры

&НаСервере
Процедура СкопироватьСвойстваНаСервере()
			
	НайдСтрокиКуда = СписокФизЛиц.НайтиСтроки(Новый Структура("Куда", Истина));
	Для каждого СтрКуда Из НайдСтрокиКуда Цикл
		
		НайдСтрокиНастроек = ДанныеДляКопирования.НайтиСтроки(Новый Структура("Копировать", Истина));
		Для каждого СтрНастройка Из НайдСтрокиНастроек Цикл
			
			Если ЗначениеЗаполнено(СтрНастройка.Настройка) Тогда			
				Если СтрНастройка.Настройка = "Доменное имя" Тогда			
					УстановкаДоменногоИмени(СтрКуда, СтрНастройка);
				Иначе
					УстановкаКонтактнойИнформации(СтрКуда, СтрНастройка);
				КонецЕсли;				
			КонецЕсли;
		
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаДоменногоИмени(СтрКуда, СтрНастройка)
	
	//++ a.romanchuk 06.11.2020 #
	_Ответ = гхб_ВзаимодействияСервер.УстановитьДоменноеИмяФизлицаВБазеХолдинга(СтрКуда.БазаХолдинга, СтрКуда.ФизЛицо, СтрНастройка.Значение);
	
	ОбщегоНазначения.СообщитьПользователю(_Ответ.ТекстСообщения);
	
	Если _Ответ.Успешно Тогда
		
		СтрНастройка.СтрокаИзменена = Ложь;
		СтрНастройка.СтрокаЗагружена = Истина;
		
	КонецЕсли;
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("УИДФизическогоЛица", СтрКуда.GUIDБазыХолдинга);
	//СтруктураПараметров.Вставить("ДоменноеИмя", СтрНастройка.Значение);
	//
	//ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(СтрКуда.ВнешнийИсточник, 
	//													"УстановитьЗначениеДоменногоИмени", 
	//													СтруктураПараметров);
	//													
	//ТекстНеудачногоОбмена = "Не удалось установить доменное имя. ";
	//Если НЕ ОтветСервиса.ОбменПрошел Тогда
	//	ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + ОтветСервиса.ТекстОшибки + ". База - " + СтрКуда.БазаХолдинга);
	//ИначеЕсли НЕ ОтветСервиса.Результат.result.Данные[0].ЗначениеУстановлено Тогда
	//	ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + "База - " + СтрКуда.БазаХолдинга);
	//Иначе					
	//	
	//	Попытка
	//		
	//		УстановитьПривилегированныйРежим(Истина);
	//		
	//		ОбъектФизЛицо = СтрКуда.ФизЛицо.ПолучитьОбъект();
	//		ОбъектФизЛицо.ДоменноеИмя = СтрНастройка.Значение;
	//		ОбъектФизЛицо.Записать();
	//		
	//		УстановитьПривилегированныйРежим(Ложь);
	//		
	//		ОбщегоНазначения.СообщитьПользователю("Доменное имя установлено. База - " + СтрКуда.БазаХолдинга);
	//		
	//		СтрНастройка.СтрокаИзменена = Ложь;
	//		СтрНастройка.СтрокаЗагружена = Истина;
	//	
	//	Исключение
	//		ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + ОписаниеОшибки() + ". База - " + СтрКуда.БазаХолдинга);
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//-- a.romanchuk 06.11.2020 #

КонецПроцедуры

&НаСервере
Процедура УстановкаКонтактнойИнформации(СтрКуда, СтрНастройка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УИДОбъекта", СтрКуда.GUIDБазыХолдинга);
	СтруктураПараметров.Вставить("ТипСправочника", "ФизическиеЛица");
	СтруктураПараметров.Вставить("ЗначениеКонтакнойИнформации", СтрНастройка.Значение);
	
	СтруктураПоискаУИДа = Новый Структура;
	СтруктураПоискаУИДа.Вставить("БазаХолдинга", СтрКуда.БазаХолдинга);
	СтруктураПоискаУИДа.Вставить("ЗначениеСоответствия", СтрНастройка.Настройка);
	
	НайдСтрокиУИДКонтакнойИнформации = УИДыКонтакнойИнформацииБазХолдинга.НайтиСтроки(СтруктураПоискаУИДа);
	Если НайдСтрокиУИДКонтакнойИнформации.Количество() > 0 Тогда
	
		СтрокаПоиска = НайдСтрокиУИДКонтакнойИнформации[0];
		СтруктураПараметров.Вставить("ВидКонтакнойИнформацииУИД", СтрокаПоиска.УИД);
	
	КонецЕсли;
	
	ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(СтрКуда.ВнешнийИсточник, 
														"УстановитьЗначениеКонтактнойИнформации", 
														СтруктураПараметров);
														
	ТекстНеудачногоОбмена = "Не удалось установить контактную информацию (" + СтрНастройка.Настройка + "). ";
	Если НЕ ОтветСервиса.ОбменПрошел Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + ОтветСервиса.ТекстОшибки + ". База - " + СтрКуда.БазаХолдинга);
	ИначеЕсли НЕ ОтветСервиса.Результат.result.Данные[0].ЗначениеУстановлено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + "База - " + СтрКуда.БазаХолдинга);
	Иначе					
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			МенеджерЗаписи = РегистрыСведений.гхб_КонтактнаяИнформацияБазХолдинга.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = СтрКуда.ФизЛицо;
			МенеджерЗаписи.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрНастройка.Настройка, "Тип");
			МенеджерЗаписи.Вид = СтрНастройка.Настройка;
			МенеджерЗаписи.БазаХолдинга = СтрКуда.БазаХолдинга;
			МенеджерЗаписи.Представление = СтрНастройка.Значение;
			МенеджерЗаписи.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ОбщегоНазначения.СообщитьПользователю("Контактная информация (" + СтрНастройка.Настройка + ") установлена. База - " + СтрКуда.БазаХолдинга);
			
			СтрНастройка.СтрокаИзменена = Ложь;
			СтрНастройка.СтрокаЗагружена = Истина;
		
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + ОписаниеОшибки() + ". База - " + СтрКуда.БазаХолдинга);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкуОбмена(ТипУстановки)
	
	Для каждого СтрФизЛицо Из СписокФизЛиц Цикл
		СтрФизЛицо.Куда = ТипУстановки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыСкопироватьСвойства(Результат, ДополнительныеСвойства) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		СкопироватьСвойстваНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСпискиВладельцаФормы()
	
	Если ВладелецФормы <> Неопределено И ВладелецФормы.ИмяФормы = "Справочник.гхб_ФизическиеЛица.Форма.ФормаЭлемента" Тогда
	
		ВладелецФормы.Элементы.ФизЛицаБазХолдинга.Обновить();
		ВладелецФормы.Элементы.КонтактнаяИнформация.Обновить();	
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстнановитьПризнакИзменения()
	
	ТекСтрока = Элементы.ДанныеДляКопирования.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		ТекСтрока.Копировать = Истина;
		ТекСтрока.СтрокаИзменена = Истина;
		
		НайдСтрокиОткудаКопируют = СписокФизЛиц.НайтиСтроки(Новый Структура("Откуда", Истина));
		Если НайдСтрокиОткудаКопируют.Количество() > 0 Тогда
			НайдСтрокиОткудаКопируют[0].Куда = Истина;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыбораДляНастроек()
	
	МассивНастроекДляКопирования = Новый Массив;
	МассивНастроекДляКопирования.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника"));
	МассивНастроекДляКопирования.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя"));
	МассивНастроекДляКопирования.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя"));
	МассивНастроекДляКопирования.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица"));
	МассивНастроекДляКопирования.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.РабочееПомещение"));
	
	СписокВыбора = Элементы.ДанныеДляКопированияНастройка.СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого ЭлементНастройка Из МассивНастроекДляКопирования Цикл
	
		НайдСтрокиКонтактнаяИформация = ДанныеДляКопирования.НайтиСтроки(Новый Структура("Настройка", ЭлементНастройка));
		Если НайдСтрокиКонтактнаяИформация.Количество() = 0 Тогда
			СписокВыбора.Добавить(ЭлементНастройка);	
		КонецЕсли; 
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаскуИВозможностьРеадктированияДляТекущейСтроки()
	
	ТекСтрока = Элементы.ДанныеДляКопирования.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		МассивМобильныхТелефонов = Новый Массив;
		МассивМобильныхТелефонов.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника"));
		МассивМобильныхТелефонов.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица"));
		
		Если МассивМобильныхТелефонов.Найти(ТекСтрока.Настройка) <> Неопределено Тогда
			Элементы.ДанныеДляКопированияЗначение.Маска = "+380999999999";
		ИначеЕсли ТекСтрока.Настройка = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя") Тогда
			Элементы.ДанныеДляКопированияЗначение.Маска = "99999";
		Иначе	
			Элементы.ДанныеДляКопированияЗначение.Маска = "";
		КонецЕсли;
		
		Если ТекСтрока.Настройка = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.РабочееПомещение") Тогда
			Элементы.ДанныеДляКопированияЗначение.РедактированиеТекста = Ложь;
		Иначе
			Элементы.ДанныеДляКопированияЗначение.РедактированиеТекста = Истина;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти