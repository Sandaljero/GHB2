
Функция GetInfoPOST(Запрос)
	
	_АдресДляОтправкиСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.гхб_СлужебныеЗначения.ПочтовыеАдресаДляСообщенийОбОшибках, "Значение");
	
	ДанныеОтвета = Новый Структура;
	
	//данная ошибка должна быть отправлена в сервис регистрации
	ДанныеОтвета.Вставить("needSendReport", ЗначениеЗаполнено(_АдресДляОтправкиСообщения)); 
	
	//Текст, который будет показан пользователю в качестве дополнительной информации об ошибке (подробнее см. здесь). 
	//https://its.1c.ru/db/v8317doc#bookmark:dev:TI000002261
	//Текст желательно возвращать на том языке, который будет понятен пользователю. 
	//Информацию о локализации можно получить из запроса, который поступает в метод getInfo.
	//Если желательно, чтобы пользователь отправил отчет о конкретной ошибке в сервис регистрации ошибок, 
	//то с помощью данного свойства можно показать пользователю рекомендацию, мотивирующую на отправку отчета об ошибке.
	ДанныеОтвета.Вставить("userMessage", "Пожалуйста, сформируйте отчет об ошибке и отправьте его в департамент разработки (" + _АдресДляОтправкиСообщения + ").");
	
	//тип дампа, который нужно приложить к отчету об ошибке (аналогичен значению атрибута type элемента dump файла logcfg.xml)
	ДанныеОтвета.Вставить("dumpType", 1);
	
	
	ДанныеОтветаСтрокой = гхб_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(ДанныеОтвета);
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Ответ.УстановитьТелоИзСтроки(ДанныеОтветаСтрокой);
	
	Возврат Ответ;
	
КонецФункции

Функция PushReportPOST(Запрос)
	
	_АдресДляОтправкиСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.гхб_СлужебныеЗначения.ПочтовыеАдресаДляСообщенийОбОшибках, "Значение");
	
	Если ЗначениеЗаполнено(_АдресДляОтправкиСообщения) Тогда
	
		ДанныеОтчета = Запрос.ПолучитьТелоКакДвоичныеДанные();
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".zip");
		ДанныеОтчета.Записать(ИмяВременногоФайла);
		
		Архиватор = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		
		ВременныйКаталог = Новый Массив();
		ВременныйКаталог.Добавить(КаталогВременныхФайлов());
		ВременныйКаталог.Добавить("ОбработкаПолученныхОтчетовОбОшибках");
		ВременныйКаталог.Добавить(Строка(Новый УникальныйИдентификатор()));
		ВременныйКаталог = СтрСоединить(ВременныйКаталог, "\");
		
		Архиватор.ИзвлечьВсе(ВременныйКаталог);
		Архиватор.Закрыть();
		
		ИмяОсновногоФайла = СтрШаблон("%1\%2", ВременныйКаталог, "report.json");
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.Прочитать(ИмяОсновногоФайла, КодировкаТекста.UTF8);
		
		ТекстОсновногоФайла = ТекстовыйДокумент.ПолучитьТекст();
		
		УдалитьФайлы(ВременныйКаталог);
		
		Попытка
			
			_СтруктураДанных = гхб_ОбщегоНазначенияСервер.ЗначениеJSONВСтруктуру(ТекстОсновногоФайла);
			
			_Текст = "<p><b>Время</b>: " + _СтруктураДанных.Time + "</p>" + 
					 "<p><b>Пользователь</b>: " + _СтруктураДанных.sessionInfo.userName + "</p>" + 
					 "<p><b>Конфигурация</b>: " + _СтруктураДанных.configInfo.name + "</p>" + 
					 "<p><b>Ошибки</b>:";
			
			Для Каждого Ошибки Из _СтруктураДанных.errorInfo.applicationErrorInfo.errors Цикл
				Для Каждого СтрОшибка Из Ошибки Цикл
					Если ТипЗнч(СтрОшибка) = Тип("Строка") Тогда
						_Текст = _Текст + "<br>" + СтрОшибка;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			_Текст = _Текст + "</p>";
			
		Исключение
			_Текст = ТекстОсновногоФайла;
		КонецПопытки;
		
		_ДополнительныеПараметры = гхб_ВзаимодействияСервер.СформироватьСтруктуруДопПараметров();
		
		_СоответсвиеВложений = Новый Соответствие();
		_СоответсвиеВложений.Вставить("ДанныеОшибки.zip", ИмяВременногоФайла);
		
		_ДополнительныеПараметры.СоответсвиеВложений = _СоответсвиеВложений;
		//_ДополнительныеПараметры.ОтправлятьСразу = Истина;
		
		гхб_ВзаимодействияСервер.СоздатьЭлектронноеПисьмо(_АдресДляОтправкиСообщения, "Сообщение об ошибке от пользователя", _Текст, _ДополнительныеПараметры);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
		
	Возврат Новый HTTPСервисОтвет(200);
	
КонецФункции
