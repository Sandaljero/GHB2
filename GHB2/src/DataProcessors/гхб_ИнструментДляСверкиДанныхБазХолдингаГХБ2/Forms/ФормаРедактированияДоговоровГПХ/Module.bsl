#Область СобытияФормыЭлементовФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БазаХолдингаСсылка = Параметры.БазаХолдинга;
	ЗаполнитьДанныеДляСоздания();
	ЗаполнитьДанныеДляРедактирования();
	ЗаполнитьДанныеПоТабличнымЧастям();
	//ЗаполнитьДанныеДляУдаления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРедактированиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНовыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНовыеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТабличныхЧастейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТабличныхЧастейПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура УстановитьФлагиНовые(Команда)
	
	Для каждого СтрокаДанные Из ДанныеНовые Цикл
		СтрокаДанные.ДН = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиНовые(Команда)
	
	Для каждого СтрокаДанные Из ДанныеНовые Цикл
		СтрокаДанные.ДН = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиРедактирование(Команда)
	
	Для каждого СтрокаДанные Из ДанныеРедактирование Цикл
		СтрокаДанные.ДН = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиРедактирование(Команда)
	
	Для каждого СтрокаДанные Из ДанныеРедактирование Цикл
		СтрокаДанные.ДН = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиУдаление(Команда)
	
	Для каждого СтрокаДанные Из ДанныеУдаление Цикл
		СтрокаДанные.ДН = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиУдаление(Команда)
	
	Для каждого СтрокаДанные Из ДанныеУдаление Цикл
		СтрокаДанные.ДН = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	РедактироватьСервер();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговора(Команда)
	СоздатьСервер();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДоговора(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРедактироватьСотрудников(Команда)
	СоздатьРедактироватьСотрудниковНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура РедактироватьСервер()

	мНайденное = ДанныеРедактирование.НайтиСтроки(Новый Структура("ДН,Обработано", Истина, Ложь));
	
	Для каждого строкаНайденное Из мНайденное Цикл
		
		Если ЗначениеЗаполнено(строкаНайденное.ДоговорГПХ) Тогда
			
			докОбъект = строкаНайденное.ДоговорГПХ.ПолучитьОбъект();
			
			Если Не строкаНайденное.ТабЧасть Тогда
				
				докОбъект.Организация = строкаНайденное.Организация;
				докОбъект.Сотрудник = строкаНайденное.Сотрудник;
				докОбъект.ДатаНачала = строкаНайденное.ДатаНачала;
				докОбъект.ДатаОкончания = строкаНайденное.ДатаОкончания;
				докОбъект.ФактическийРуководитель = строкаНайденное.ФактическийРуководитель;
				докОбъект.Дивизион = строкаНайденное.Дивизион;
				
			КонецЕсли;
			
			мНайденныеДоговора = ДанныеТабличныхЧастей.НайтиСтроки(Новый Структура("guid", строкаНайденное.guid));
			
			докОбъект.УсловияДоговора.Очистить();
			
			Для каждого строкаНайденныйДоговор Из мНайденныеДоговора Цикл
			
				новСтр = докОбъект.УсловияДоговора.Добавить();
				ЗаполнитьЗначенияСвойств(новСтр, строкаНайденныйДоговор);
			
			КонецЦикла;
			
			Попытка
			
				докОбъект.Записать();
				строкаНайденное.Обработано = Истина;
			
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РедактироватьСервер()

&НаСервере
Процедура СоздатьСервер()

	мНайденное = ДанныеНовые.НайтиСтроки(Новый Структура("ДН,Обработано", Истина, Ложь));
	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдингаСсылка);
	
	Для каждого СтрокаНайденное Из мНайденное Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНайденное.guid) Или Не ЗначениеЗаполнено(СтрокаНайденное.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
				
		Если СоздатьДокументДоговорСФизЛицом(СтрокаНайденное.Сотрудник, 
										БазаХолдингаСсылка, 
										СтрокаНайденное.guid, 
										СтрокаНайденное.Организация, 
										СтрокаНайденное.ДатаНачала, 
										СтрокаНайденное.ДатаОкончания, 
										СтрокаНайденное.ФактическийРуководитель, 
										СтрокаНайденное.Дивизион) Тогда
			
			СтрокаНайденное.Обработано = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьДолжностиСервер()

&НаСервере
Функция СоздатьДокументДоговорСФизЛицом(СотрСсылка,
											БазаХолдинга,
											ДокументСсылкаguid,
											ОрганизацияСсылка,
											ДатаНачала,
											ДатаОкончания,
											Руководитель,
											Дивизион)
											
	докОбъект = Документы.гхб_ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
	
	докОбъект.Дата = ТекущаяДатаСеанса();
	докОбъект.БазаХолдинга = БазаХолдинга;
	докОбъект.GUIDБазыХолдинга = ДокументСсылкаguid;
	докОбъект.Организация = ОрганизацияСсылка;
	докОбъект.Сотрудник = СотрСсылка;
	докОбъект.ДатаНачала = ДатаНачала;
	докОбъект.ДатаОкончания = ДатаОкончания;
	докОбъект.ФактическийРуководитель = Руководитель;
	докОбъект.Дивизион = Дивизион;
	
	мНайденное = ДанныеТабличныхЧастей.НайтиСтроки(Новый Структура("guid", ДокументСсылкаguid));
	
	Для каждого СтрокаНайденное Из мНайденное Цикл
		
		новСтр = докОбъект.УсловияДоговора.Добавить();
		новСтр.Должность = СтрокаНайденное.Должность;
		новСтр.ЦФО = СтрокаНайденное.ЦФО;
		
	КонецЦикла;

	Попытка
		
		докОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьДокументаДоговораНаВыполнениеРаботСФизЛицом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|ГДЕ
	|	гхб_СотрудникиБазХолдинга.ЭтоГруппа
	|	И гхб_СотрудникиБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_СотрудникиБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыСотрудникаБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга()

&НаСервере
Функция СоздатьРедактироватьСотрудникаГПХБазыХолдинга(Наименование, 
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													РодительБазаХолдинга, 
													ФизЛицоБХ,
													Ссылка = Неопределено)
	
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_СотрудникиБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
			спрОбъект.ВидДоговора = Перечисления.гхб_ВидыДоговоровСФизЛицами.Подряда;
			спрОбъект.ВидСотрудника = Перечисления.гпх_ВидыСотрудников.ГПХ;
			спрОбъект.ДатаСозданияЭлементаОбменом = ТекущаяДатаСеанса();
			спрОбъект.Записать();
			Возврат спрОбъект.Ссылка;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииСотрудникаГПХ_БХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		стРеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"ФизЛицоБазыХолдинга,Наименование");
		Если (стРеквизитыСотрудника.Наименование <> Наименование 
			Или стРеквизитыСотрудника.ФизЛицоБазыХолдинга <> ФизЛицоБХ) И ЗначениеЗаполнено(Наименование) Тогда
		
			Попытка
				
				спрОбъект = Ссылка.ПолучитьОбъект();
				спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
				спрОбъект.Наименование = Наименование;
				спрОбъект.ДатаИзмененияЭлементаОбменом = ТекущаяДатаСеанса();
				спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
				спрОбъект.Записать();
				Возврат спрОбъект.Ссылка;
				
			Исключение
				
				ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииСотрудникаГПХ_БХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				Возврат Неопределено;
				
			КонецПопытки;
			
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоТабличнымЧастям()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", Параметры.тзДанныеДолжности);
	Запрос.УстановитьПараметр("БазаХолдинга", Параметры.БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ЦФО КАК ЦФО,
	|	таб.ЦФОguid КАК ЦФОguid,
	|	таб.Должность КАК Должность,
	|	таб.Должностьguid КАК Должностьguid,
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ЦФО КАК ЦФОСтрока,
	|	втДанные.ЦФОguid КАК ЦФОguid,
	|	втДанные.Должность КАК ДолжностьСтрока,
	|	втДанные.Должностьguid КАК Должностьguid,
	|	втДанные.ДокументСсылкаguid КАК guid,
	|	ЕСТЬNULL(гхб_ЦФО.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ЦФО.ПустаяСсылка)) КАК ЦФО,
	|	ЕСТЬNULL(гхб_ДолжностиГПХФОП.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ДолжностиГПХФОП.ПустаяСсылка)) КАК Должность
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|		ПО втДанные.Должностьguid = гхб_ДолжностиГПХФОП.GUIDБазыХолдинга
	|			И (гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		новСтр = ДанныеТабличныхЧастей.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, Выборка);
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеПоТабличнымЧастям()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ФизЛицоguid КАК ФизЛицоguid,
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.Дивизион КАК Дивизион,
	|	таб.ДивизионСсылка КАК ДивизионСсылка,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионРодитель КАК ДивизионРодитель,
	|	таб.ДивизионРодительКод КАК ДивизионРодительКод,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.ФактическийРуководительguid КАК ФактическийРуководительguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.Организация КАК Организация,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.Дивизион КАК Дивизион,
	|	таб.Организация КАК ОрганизацияБХ,
	|	таб.Сотрудник КАК СотрудникБХ,
	|	таб.ДатаНачала КАК ДатаНачалаБХ,
	|	таб.ДатаОкончания КАК ДатаОкончанияБХ,
	|	таб.ТипДанных КАК ТипДанных,
	|	таб.ТипДанныхБХ КАК ТипДанныхБХ,
	|	таб.ФактическийРуководитель КАК ФактическийРуководительБХ,
	|	таб.Дивизион КАК ДивизионБХ
	|ПОМЕСТИТЬ втДанныеТабличныхЧастей
	|ИЗ
	|	&ДанныеТабличныхЧастей КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втДанные.Организация КАК ОрганизацияСтрока,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.Сотрудник КАК СотрудникСтрока,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ФизЛицоguid КАК ФизЛицоguid,
	|	втДанные.ДокументСсылка КАК ДокументСсылка,
	|	втДанные.Дивизион КАК Дивизион,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионРодитель КАК ДивизионРодитель,
	|	втДанные.ДивизионРодительКод КАК ДивизионРодительКод,
	|	втДанные.ДатаНачала КАК ДатаНачала,
	|	втДанные.ДатаОкончания КАК ДатаОкончания,
	|	втДанные.ФактическийРуководитель КАК ФактическийРуководительСтрока,
	|	втДанные.ФактическийРуководительguid КАК ФактическийРуководительguid,
	|	втДанные.ДивизионСсылка КАК ДивизионСсылка,
	|	ЕСТЬNULL(гхб_ОрганизацииБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ОрганизацииБазХолдинга.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(гхб_СотрудникиБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_СотрудникиБазХолдинга.ПустаяСсылка)) КАК Сотрудник,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	ЕСТЬNULL(гхб_ФизическиеЛицаБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ФизическиеЛицаБазХолдинга.ПустаяСсылка)) КАК ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачалаБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончанияБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион КАК ДивизионБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК ДоговорСсылка,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель КАК ФактическийРуководительБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК ОрганизацияБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник КАК СотрудникБХ,
	|	ВЫБОР
	|		КОГДА втДанныеТабличныхЧастей.ДокументСсылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиТабличнойЧасти
	|ПОМЕСТИТЬ втОшибкиШапки
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеТабличныхЧастей КАК втДанныеТабличныхЧастей
	|			ПО гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = втДанныеТабличныхЧастей.ДокументСсылка
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФактическийРуководительguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация <> гхб_ОрганизацииБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник <> гхб_СотрудникиБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель <> гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <> втДанные.ДатаНачала
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания <> втДанные.ДатаОкончания
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион <> втДанные.ДивизионСсылка)
	|	И гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОшибкиШапки.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втОшибкиШапки.ОрганизацияСтрока КАК ОрганизацияСтрока,
	|	втОшибкиШапки.Организацияguid КАК Организацияguid,
	|	втОшибкиШапки.Сотрудникguid КАК Сотрудникguid,
	|	втОшибкиШапки.СотрудникСтрока КАК СотрудникСтрока,
	|	втОшибкиШапки.ФизЛицо КАК ФизЛицо,
	|	втОшибкиШапки.ФизЛицоguid КАК ФизЛицоguid,
	|	втОшибкиШапки.ДокументСсылка КАК ДокументСсылка,
	|	втОшибкиШапки.Дивизион КАК Дивизион,
	|	втОшибкиШапки.ДивизионКод КАК ДивизионКод,
	|	втОшибкиШапки.ДивизионРодитель КАК ДивизионРодитель,
	|	втОшибкиШапки.ДивизионРодительКод КАК ДивизионРодительКод,
	|	втОшибкиШапки.ДатаНачала КАК ДатаНачала,
	|	втОшибкиШапки.ДатаОкончания КАК ДатаОкончания,
	|	втОшибкиШапки.ФактическийРуководительСтрока КАК ФактическийРуководительСтрока,
	|	втОшибкиШапки.ФактическийРуководительguid КАК ФактическийРуководительguid,
	|	втОшибкиШапки.ДивизионСсылка КАК ДивизионСсылка,
	|	втОшибкиШапки.Организация КАК Организация,
	|	втОшибкиШапки.Сотрудник КАК Сотрудник,
	|	втОшибкиШапки.ТипДанных КАК ТипДанных,
	|	втОшибкиШапки.ТипДанныхБХ КАК ТипДанныхБХ,
	|	втОшибкиШапки.ФактическийРуководитель КАК ФактическийРуководитель,
	|	втОшибкиШапки.ДатаНачалаБХ КАК ДатаНачалаБХ,
	|	втОшибкиШапки.ДатаОкончанияБХ КАК ДатаОкончанияБХ,
	|	втОшибкиШапки.ДивизионБХ КАК ДивизионБХ,
	|	втОшибкиШапки.ДоговорСсылка КАК ДоговорСсылка,
	|	втОшибкиШапки.ФактическийРуководительБХ КАК ФактическийРуководительБХ,
	|	втОшибкиШапки.ОрганизацияБХ КАК ОрганизацияБХ,
	|	втОшибкиШапки.СотрудникБХ КАК СотрудникБХ,
	|	втОшибкиШапки.ЕстьОшибкиТабличнойЧасти КАК ЕстьОшибкиТабличнойЧасти
	|ИЗ
	|	втОшибкиШапки КАК втОшибкиШапки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТабличныхЧастей.ДокументСсылка КАК ДокументСсылка,
	|	втДанныеТабличныхЧастей.Организация КАК Организация,
	|	втДанныеТабличныхЧастей.Сотрудник КАК Сотрудник,
	|	втДанныеТабличныхЧастей.ДатаНачала КАК ДатаНачала,
	|	втДанныеТабличныхЧастей.ДатаОкончания КАК ДатаОкончания,
	|	втДанныеТабличныхЧастей.ФактическийРуководитель КАК ФактическийРуководитель,
	|	втДанныеТабличныхЧастей.Дивизион КАК Дивизион,
	|	втДанныеТабличныхЧастей.ОрганизацияБХ КАК ОрганизацияБХ,
	|	втДанныеТабличныхЧастей.СотрудникБХ КАК СотрудникБХ,
	|	втДанныеТабличныхЧастей.ДатаНачалаБХ КАК ДатаНачалаБХ,
	|	втДанныеТабличныхЧастей.ДатаОкончанияБХ КАК ДатаОкончанияБХ,
	|	втДанныеТабличныхЧастей.ТипДанных КАК ТипДанных,
	|	втДанныеТабличныхЧастей.ТипДанныхБХ КАК ТипДанныхБХ,
	|	втДанныеТабличныхЧастей.ФактическийРуководительБХ КАК ФактическийРуководительБХ,
	|	втДанныеТабличныхЧастей.ДивизионБХ КАК ДивизионБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга КАК GUID
	|ИЗ
	|	втДанныеТабличныхЧастей КАК втДанныеТабличныхЧастей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДанныеТабличныхЧастей.ДокументСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка
	|ГДЕ
	|	НЕ втДанныеТабличныхЧастей.ДокументСсылка В
	|				(ВЫБРАТЬ
	|					втОшибкиШапки.ДоговорСсылка
	|				ИЗ
	|					втОшибкиШапки КАК втОшибкиШапки)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ()

&НаСервере
Процедура ЗаполнитьДанныеДляРедактирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Параметры.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", Параметры.тзДоговораГПХ);
	Запрос.УстановитьПараметр("ДанныеТабличныхЧастей", Параметры.тзДоговораОшибкиПоТабЧасти);
	резПакет = Запрос.ВыполнитьПакет();
	Выборка = резПакет[3].Выбрать();
	ВыборкаТЧ = резПакет[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		новСтр = ДанныеРедактирование.Добавить();
		новСтр.Организация = Выборка.Организация;
		новСтр.Сотрудник = Выборка.Сотрудник;
		новСтр.ДатаНачала = Выборка.ДатаНачала;
		новСтр.ДатаОкончания = Выборка.ДатаОкончания;
		новСтр.ФактическийРуководитель = Выборка.ФактическийРуководитель;
		новСтр.Дивизион = Выборка.ДивизионСсылка;
		новСтр.ДоговорГПХ = Выборка.ДоговорСсылка;
		новСтр.guid = Выборка.ДокументСсылкаguid;
		
		Отличия = "";
		
		Если Выборка.ФактическийРуководительБХ <> Выборка.ФактическийРуководитель Тогда
			Отличия = Отличия + "Руководитель" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ДатаНачалаБХ <> Выборка.ДатаНачала Тогда
			Отличия = Отличия + "Дата начала" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ДатаОкончанияБХ <> Выборка.ДатаОкончания Тогда
			Отличия = Отличия + "Дата окончания" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ДивизионБХ <> Выборка.Дивизион Тогда
			Отличия = Отличия + "Дивизион" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.СотрудникБХ <> Выборка.Сотрудник Тогда
			Отличия = Отличия + "Сотрудник" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ОрганизацияБХ <> Выборка.Организация Тогда
			Отличия = Отличия + "Организация" + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиТабличнойЧасти Тогда
			Отличия = Отличия + "Таб. часть" + Символы.ПС;
		КонецЕсли;
		
		новСтр.Отличия = Отличия;
		
	КонецЦикла;
	
	Пока ВыборкаТЧ.Следующий() Цикл
		
		новСтр = ДанныеРедактирование.Добавить();
		новСтр.Организация = ВыборкаТЧ.Организация;
		новСтр.Сотрудник = ВыборкаТЧ.Сотрудник;
		новСтр.ДатаНачала = ВыборкаТЧ.ДатаНачала;
		новСтр.ДатаОкончания = ВыборкаТЧ.ДатаОкончания;
		новСтр.ФактическийРуководитель = ВыборкаТЧ.ФактическийРуководитель;
		новСтр.Дивизион = ВыборкаТЧ.Дивизион;
		новСтр.ДоговорГПХ = ВыборкаТЧ.ДокументСсылка;
		новСтр.guid = ВыборкаТЧ.GUID;
		
		новСтр.Отличия = "Таб. часть";
		
	КонецЦикла;
	
КонецПроцедуры // СверитьДанныеПоДоговорамГПХВывестиРезультат()

&НаСервере
Процедура ЗаполнитьДанныеДляСоздания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхДоговораГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Параметры.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", Параметры.тзДоговораГПХ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	тзДивизионы = ПолучитьДивизионы();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		новСтр = ДанныеНовые.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, Выборка);
		
		мНайденое = тзДивизионы.НайтиСтроки(Новый Структура("Код,КодРодитель", Выборка.ДивизионКод, Выборка.ДивизионРодительКод));
		Если мНайденое.Количество() > 0 Тогда
			новСтр.Дивизион = мНайденое[0].Дивизион;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеДляСоздания()

&НаСервере
Функция ПолучитьДивизионы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гхб_Дивизионы.Ссылка КАК Дивизион,
	|	гхб_Дивизионы.Код КАК Код,
	|	гхб_ДивизионыРодители.Родитель КАК Родитель,
	|	гхб_ДивизионыРодители.Код КАК КодРодитель
	|ИЗ
	|	Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_ДивизионыРодители
	|		ПО гхб_Дивизионы.Родитель = гхб_ДивизионыРодители.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДивизионы()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхДоговораГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ФизЛицоguid КАК ФизЛицоguid,
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.Дивизион КАК Дивизион,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионРодитель КАК ДивизионРодитель,
	|	таб.ДивизионРодительКод КАК ДивизионРодительКод,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.ФактическийРуководительguid КАК ФактическийРуководительguid,
	|	таб.Изменение КАК Изменение
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.ДокументСсылкаguid КАК guid,
	|	втДанные.ДатаНачала КАК ДатаНачала,
	|	втДанные.ДатаОкончания КАК ДатаОкончания,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Сотрудник,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионРодительКод КАК ДивизионРодительКод,
	|	гхб_ФизическиеЛицаБазХолдингаРуководители.Ссылка КАК ФактическийРуководитель,
	|	втДанные.Сотрудник КАК СотрудникНаименование
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФизЛицоguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|			И (гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдингаРуководители
	|		ПО втДанные.ФактическийРуководительguid = гхб_ФизическиеЛицаБазХолдингаРуководители.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдингаРуководители.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхДоговораГПХ()

&НаСервере
Процедура СоздатьРедактироватьСотрудниковНаСервере()
	
	тзСотрудники = ДанныеНовые.Выгрузить();
	тзСотрудники.Свернуть("Сотрудник,СотрудникGuid,СотрудникНаименование,ФизЛицо");
	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдингаСсылка);
	
	Для каждого СтрокаСотрудник Из тзСотрудники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСотрудник.СотрудникGuid) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаСотрудник.ФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСотрудник.Сотрудник = СоздатьРедактироватьСотрудникаГПХБазыХолдинга(СтрокаСотрудник.СотрудникНаименование,
																СтрокаСотрудник.СотрудникGuid, 
																БазаХолдингаСсылка, 
																РодительБазаХолдинга,
																СтрокаСотрудник.ФизЛицо,
																?(ЗначениеЗаполнено(СтрокаСотрудник.Сотрудник), СтрокаСотрудник.Сотрудник, Неопределено));
	
	КонецЦикла;
	
	Для каждого СтрокаНовые Из ДанныеНовые Цикл
		
		Если ЗначениеЗаполнено(СтрокаНовые.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		мНайденное = тзСотрудники.НайтиСтроки(Новый Структура("СотрудникGuid", СтрокаНовые.СотрудникGuid));
		Если мНайденное.Количество() > 0 Тогда
			СтрокаНовые.Сотрудник = мНайденное[0].Сотрудник;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти