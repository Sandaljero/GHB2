
#Область Команды

&НаКлиенте
Процедура Сверить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.БазаХолдинга) 
		Или Не ЗначениеЗаполнено(Объект.ЧтоСверять)
		Или Не ЗначениеЗаполнено(Объект.ЧтоДелать)Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заполните поля отбора!");
		Возврат;
	
	КонецЕсли;
	
	Если Объект.ЧтоСверять = "ФизЛица" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДанныеПоФизЛицамВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоФизЛицамБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "Сотрудники" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			СоздатьРедактироватьДанныеПоСотрудникамВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоСотрудникамБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "Организации" Тогда
		ПолучитьДанныеПоОрганизациямБазХолдинга();
	ИначеЕсли Объект.ЧтоСверять = "Пользователи" Тогда
		ПолучитьДанныеПоПользователямБазХолдинга();
	ИначеЕсли Объект.ЧтоСверять = "ПодразделенияОрганизаций" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДанныеПоПодразделениямВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоПодразделениямОрганизацийБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ДолжностиОрганизаций" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДанныеПоДолжностямОрганизацийВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоДолжностямОрганизацийБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ЦФО" Тогда
		ПолучитьДанныеПоЦФОБазХолдинга();
	ИначеЕсли Объект.ЧтоСверять = "СостоянияСотрудников" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДанныеПоСостояниямСотрудниковВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "КадровыеДанные" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьКадровыеДанныеВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоКадровымДаннымСотрудниковБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ШтатноеРасписание" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьШтатноеРасписаниеВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "КонтактнаяИнформация" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьКИВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоКИБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ДоговораГПХ" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДоговораГПХВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоДоговораГПХБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ДолжностиГПХ" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДолжностиГПХВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоДолжностямГПХБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "КонтрагентыФОП" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьКонрагентыФОПВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеПоКонрагентыФОПБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ДоговораКонтрагентовФОП" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДоговораФОПВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеДоговорамФОПБазХолдинга();
		КонецЕсли;
		
	ИначеЕсли Объект.ЧтоСверять = "ДоговораКонтрагентовДеталиФОП" Тогда
		
		Если Объект.ЧтоДелать = "ВывестиДляРедактирования" Тогда
			РедактироватьДоговораДеталиФОПВывестиРезультатКлиент();
		Иначе
			ПолучитьДанныеДоговорамДеталиФОПБазХолдинга();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыСверки

#Область СверкаФизЛица

&НаСервере
Функция ПолучитьДанныеПоФизЛицамБазХолдинга(ВернутьТаблицу = Ложь) Экспорт
	
	стОтветПоФизЛицам = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныхПоФизЛицамИзБазХолдинга", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стОтветПоФизЛицам.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стОтветПоФизЛицам.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеФизЛиц = Новый ТаблицаЗначений;
	тзДанныеФизЛиц.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеФизЛиц.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеФизЛиц.Колонки.Добавить("ДоменноеИмя", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ПолФизическихЛиц"));
	тзДанныеФизЛиц.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
		
	Для каждого СтрокаДанные Из стОтветПоФизЛицам.Результат.result.Данные Цикл
		
		новСтр = тзДанныеФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДанные);
		Попытка
			новСтр.Пол = Перечисления.гхб_ПолФизическихЛиц[СтрокаДанные.Пол];
		Исключение
			новСтр.Пол = Перечисления.гхб_ПолФизическихЛиц.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.ДатаРождения = Дата(Сред(СтрокаДанные.ДатаРождения, 1, 4),
									Сред(СтрокаДанные.ДатаРождения, 6, 2),
									Сред(СтрокаДанные.ДатаРождения, 9, 2));
		
	КонецЦикла;

	Если ВернутьТаблицу Тогда
		Возврат тзДанныеФизЛиц;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоФизЛицамБезСверки(тзДанныеФизЛиц);
	Иначе
		СверитьДанныеПоФизЛицамВывестиРезультат(тзДанныеФизЛиц);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьДанныеПоФизЛицамВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоФизЛицамБазХолдинга(Истина);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияФизЛиц", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьДанныеПоФизЛицамВывестиРезультатКлиент()

&НаСервере
Процедура ВывестиДанныеПоФизЛицамБезСверки(тзДанныеФизЛиц)
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанныеФизЛиц.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ПолучитьКоличествоЭлементовСправочника("гхб_ФизическиеЛицаБазХолдинга");
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокФизЛицо");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанныеФизЛиц Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаФизЛицо");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		Попытка
				обл.Параметры.ДатаРождения = Дата(Сред(СтрокаДанные.ДатаРождения, 1, 4),
										Сред(СтрокаДанные.ДатаРождения, 6, 2),
										Сред(СтрокаДанные.ДатаРождения, 9, 2));
		Исключение
			ЗаписьЖурналаРегистрации("гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2_ПреобразованиеДатыИзСтроки_ВывестиДанныеПоФизЛицамБезСверки", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;
	
КонецПроцедуры

&НаСервере
Процедура СверитьДанныеПоФизЛицамВывестиРезультат(тзДанныеФизЛиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ИНН КАК ИНН,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid,
	|	таб.ДоменноеИмя КАК ДоменноеИмя,
	|	таб.Пол КАК Пол,
	|	таб.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.ДоменноеИмя КАК ДоменноеИмя,
	|	втДанные.Пол КАК Пол,
	|	втДанные.ДатаРождения КАК ДатаРождения,
	|	""Не совпадают реквизиты справочников"" КАК Примечание,
	|	гхб_ФизическиеЛицаБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.ИНН КАК ИННБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК guidБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя КАК ДоменноеИмяБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.Пол КАК ПолБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.ДатаРождения КАК ДатаРожденияБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ФизическиеЛицаБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ФизическиеЛицаБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.ИНН <> гхб_ФизическиеЛицаБазХолдинга.ИНН
	|			ИЛИ втДанные.ДоменноеИмя <> гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя
	|			ИЛИ втДанные.ДатаРождения <> гхб_ФизическиеЛицаБазХолдинга.ДатаРождения
	|			ИЛИ втДанные.Пол <> гхб_ФизическиеЛицаБазХолдинга.Пол)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.ДоменноеИмя КАК ДоменноеИмя,
	|	втДанные.Пол КАК Пол,
	|	втДанные.ДатаРождения КАК ДатаРождения,
	|	""Нет элемента в ГХБ 2"" КАК Примечание,
	|	""РИБ"" КАК ТипДанных
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ФизическиеЛицаБазХолдинга.Наименование КАК Наименование,
	|	гхб_ФизическиеЛицаБазХолдинга.ИНН КАК ИНН,
	|	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК guid,
	|	гхб_ФизическиеЛицаБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя КАК ДоменноеИмя,
	|	гхб_ФизическиеЛицаБазХолдинга.Пол КАК Пол,
	|	гхб_ФизическиеЛицаБазХолдинга.ДатаРождения КАК ДатаРождения,
	|	""Нет элемента в базе РИБ, либо элемент помечен на удаление"" КАК Примечание,
	|	""ГХБ 2.0"" КАК ТипДанных
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга = втДанные.guid
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("таб", тзДанныеФизЛиц);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	резПакет = Запрос.ВыполнитьПакет();
	Выборка = резПакет[1].Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокФизЛицоСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаФизЛицоСверка");
			обл.Параметры.Заполнить(Выборка);
			Отличия = "";
			
			Если Выборка.Наименование <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "Наименование") Тогда
				Отличия = Отличия + "Наименование" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "ПометкаУдаления") Тогда
				Отличия = Отличия + "Пометка удаления" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ИНН <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "ИНН") Тогда
				Отличия = Отличия + "ИНН" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ДоменноеИмя <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "ДоменноеИмя") Тогда
				Отличия = Отличия + "Доменное имя" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ДатаРождения <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "ДатаРождения") Тогда
				Отличия = Отличия + "Дата рождения" + Символы.ПС;
			КонецЕсли;
			Если Выборка.Пол <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ФизЛицо, "Пол") Тогда
				Отличия = Отличия + "Пол" + Символы.ПС;
			КонецЕсли;
			
			обл.Параметры.Отличия = СокрЛП(Отличия);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = резПакет[2].Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("Шапка");
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокФизЛицоСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаФизЛицоСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Выборка = резПакет[3].Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("Шапка");
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество Нет элемента в базе РИБ, либо элемент помечен на удаление : " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокФизЛицоСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаФизЛицоСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатСверки.ФиксацияСверху = 2;
	
КонецПроцедуры

#КонецОбласти

#Область СверкаСотрудников

Функция ПолучитьДанныеПоСотрудникамБазХолдинга(ВернутьТаблицу = Ложь)
	
	стОтветПоСотрудникам = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																							"ПолучитьДанныеПоСотрудникамИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"), 
																							Ложь);
	Если Не стОтветПоСотрудникам.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоСотрудникамИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоСотрудникам.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеСотрудники = Новый ТаблицаЗначений;
	тзДанныеСотрудники.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидДоговора", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидЗанятости", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидДоговораИмя", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидЗанятостиИмя", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("guidФЛ", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ТабельныйНомер", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ДатаОкончанияСрочногоТрудовогоДоговора", Новый ОписаниеТипов("Дата"));
	тзДанныеСотрудники.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеСотрудники.Колонки.Добавить("ВидДоговораСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ВидыДоговоровСФизЛицами"));
	тзДанныеСотрудники.Колонки.Добавить("ВидЗанятостиСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ВидыЗанятостиВОрганизации"));
	
	Для каждого СтрокаДолжность Из стОтветПоСотрудникам.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
		Попытка
			новСтр.ВидДоговораСсылка = Перечисления.гхб_ВидыДоговоровСФизЛицами[СтрокаДолжность.ВидДоговораИмя];
		Исключение
			новСтр.ВидДоговораСсылка = Перечисления.гхб_ВидыДоговоровСФизЛицами.ПустаяСсылка();
		КонецПопытки;
		
		Попытка
			новСтр.ВидЗанятостиСсылка = Перечисления.гхб_ВидыЗанятостиВОрганизации[СтрокаДолжность.ВидЗанятостиИмя];
		Исключение
			новСтр.ВидЗанятостиСсылка = Перечисления.гхб_ВидыЗанятостиВОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.ДатаОкончанияСрочногоТрудовогоДоговора = Дата(Сред(СтрокаДолжность.ДатаОкончанияСрочногоТрудовогоДоговора, 1, 4), 
										Сред(СтрокаДолжность.ДатаОкончанияСрочногоТрудовогоДоговора, 6, 2),
										Сред(СтрокаДолжность.ДатаОкончанияСрочногоТрудовогоДоговора, 9, 2));
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДанныеСотрудники;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоСотрудникамБезСверки(тзДанныеСотрудники);
	Иначе
		СверитьДанныеПоСотрудникамВывестиРезультат(тзДанныеСотрудники);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиДанныеПоСотрудникамБезСверки(тзДанныеСотрудники)
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанныеСотрудники.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ПолучитьКоличествоЭлементовСправочника("гхб_СотрудникиБазХолдинга");
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокСотрудники");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанныеСотрудники Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаСотрудники");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;
	
КонецПроцедуры

&НаСервере
Процедура СверитьДанныеПоСотрудникамВывестиРезультат(тзДанныеСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ВидДоговора КАК ВидДоговора,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ВидДоговораСсылка КАК ВидДоговораСсылка,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.ВидЗанятостиСсылка КАК ВидЗанятостиСсылка,
	|	таб.ТабельныйНомер КАК ТабельныйНомер,
	|	таб.guid КАК guid,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.guidФЛ КАК guidФЛ
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ВидДоговора КАК ВидДоговора,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.guid КАК guid,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Сотрудник,
	|	""Не совпадают реквизиты справочников"" КАК Примечание,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоБазыХолдинга,
	|	втДанные.ВидДоговораСсылка КАК ВидДоговораСсылка,
	|	втДанные.ВидЗанятостиСсылка КАК ВидЗанятостиСсылка,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	гхб_СотрудникиБазХолдинга.ВидДоговора КАК ВидДоговораСотрудник,
	|	гхб_СотрудникиБазХолдинга.ВидЗанятости КАК ВидЗанятостиСотрудник,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	гхб_СотрудникиБазХолдинга.ВидСотрудника КАК ВидСотрудника,
	|	втДанные.ТабельныйНомер КАК ТабельныйНомер
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_СотрудникиБазХолдинга.Наименование
	|			ИЛИ гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга <> гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			ИЛИ гхб_СотрудникиБазХолдинга.ВидДоговора <> втДанные.ВидДоговораСсылка
	|			ИЛИ гхб_СотрудникиБазХолдинга.ВидЗанятости <> втДанные.ВидЗанятостиСсылка
	|			ИЛИ гхб_СотрудникиБазХолдинга.ТабельныйНомер <> втДанные.ТабельныйНомер
	|			ИЛИ гхб_СотрудникиБазХолдинга.ПометкаУдаления <> втДанные.ПометкаУдаления
	|			ИЛИ ВЫБОР
	|				КОГДА гхб_СотрудникиБазХолдинга.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыДоговоровСФизЛицами.Подряда)
	|					ТОГДА ВЫБОР
	|							КОГДА гхб_СотрудникиБазХолдинга.ВидСотрудника <> ЗНАЧЕНИЕ(Перечисление.гпх_ВидыСотрудников.ГПХ)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втДанные.ДатаОкончанияСрочногоТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ВЫБОР
	|									КОГДА гхб_СотрудникиБазХолдинга.ВидСотрудника <> ЗНАЧЕНИЕ(Перечисление.гпх_ВидыСотрудников.БТД)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА гхб_СотрудникиБазХолдинга.ВидСотрудника <> ЗНАЧЕНИЕ(Перечисление.гпх_ВидыСотрудников.СТД)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.ВидДоговора,
	|	втДанные.ВидЗанятости,
	|	втДанные.guid,
	|	втДанные.guidФЛ,
	|	"""",
	|	""Нет элемента в ГХБ 2"",
	|	втДанные.ПометкаУдаления,
	|	гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга,
	|	втДанные.ВидДоговораСсылка,
	|	втДанные.ВидЗанятостиСсылка,
	|	втДанные.ФизЛицо,
	|	гхб_СотрудникиБазХолдинга.ВидДоговора,
	|	гхб_СотрудникиБазХолдинга.ВидЗанятости,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора,
	|	гхб_СотрудникиБазХолдинга.ВидСотрудника,
	|	втДанные.ТабельныйНомер
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_СотрудникиБазХолдинга.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.ВидДоговора,
	|	втДанные.ВидЗанятости,
	|	втДанные.guid,
	|	втДанные.guidФЛ,
	|	гхб_СотрудникиБазХолдинга.Ссылка,
	|	""Нет элемента в базе РИБ, либо элемент помечен на удаление"",
	|	втДанные.ПометкаУдаления,
	|	гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга,
	|	втДанные.ВидДоговораСсылка,
	|	втДанные.ВидЗанятостиСсылка,
	|	втДанные.ФизЛицо,
	|	гхб_СотрудникиБазХолдинга.ВидДоговора,
	|	гхб_СотрудникиБазХолдинга.ВидЗанятости,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора,
	|	гхб_СотрудникиБазХолдинга.ВидСотрудника,
	|	гхб_СотрудникиБазХолдинга.ТабельныйНомер
	|ИЗ
	|	Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга = втДанные.guid
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Наименование КАК Наименование,
	|	втКрайняя.ВидДоговора КАК ВидДоговора,
	|	втКрайняя.ВидЗанятости КАК ВидЗанятости,
	|	втКрайняя.guid КАК guid,
	|	втКрайняя.guidФЛ КАК guidФЛ,
	|	втКрайняя.Сотрудник КАК Сотрудник,
	|	втКрайняя.Примечание КАК Примечание,
	|	втКрайняя.ПометкаУдаления КАК ПометкаУдаления,
	|	втКрайняя.ФизЛицоБазыХолдинга КАК ФизЛицоБазыХолдинга,
	|	втКрайняя.ВидДоговораСсылка КАК ВидДоговораСсылка,
	|	втКрайняя.ВидЗанятостиСсылка КАК ВидЗанятостиСсылка,
	|	втКрайняя.ФизЛицо КАК ФизЛицо,
	|	втКрайняя.ВидДоговораСотрудник КАК ВидДоговораСотрудник,
	|	втКрайняя.ВидЗанятостиСотрудник КАК ВидЗанятостиСотрудник,
	|	втКрайняя.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втКрайняя.ТабельныйНомер КАК ТабельныйНомер
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|
	|СГРУППИРОВАТЬ ПО
	|	втКрайняя.ВидДоговора,
	|	втКрайняя.ВидЗанятости,
	|	втКрайняя.Сотрудник,
	|	втКрайняя.Наименование,
	|	втКрайняя.guid,
	|	втКрайняя.Примечание,
	|	втКрайняя.guidФЛ,
	|	втКрайняя.ПометкаУдаления,
	|	втКрайняя.ФизЛицоБазыХолдинга,
	|	втКрайняя.ВидДоговораСсылка,
	|	втКрайняя.ВидЗанятостиСсылка,
	|	втКрайняя.ФизЛицо,
	|	втКрайняя.ВидДоговораСотрудник,
	|	втКрайняя.ВидЗанятостиСотрудник,
	|	втКрайняя.ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втКрайняя.ТабельныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("таб", тзДанныеСотрудники);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество элементов: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокСотрудникиСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаСотрудникиСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Если Выборка.Примечание = "Не совпадают реквизиты справочников" Тогда
			
			Отличия = "";
			ВидСотрудникаРеквизит = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ВидСотрудника");
			
			Если Выборка.Наименование <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "Наименование") Тогда
				Отличия = Отличия + "Наименование" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ПометкаУдаления") Тогда
				Отличия = Отличия + "Пометка удаления" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ФизЛицоБазыХолдинга <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ФизЛицоБазыХолдинга") Тогда
				Отличия = Отличия + "ФизЛицо базы холдинга" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ВидДоговораСсылка <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ВидДоговора") Тогда
				Отличия = Отличия + "Вид договора " + Символы.ПС;
			КонецЕсли;
			Если Выборка.ВидЗанятостиСсылка <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ВидЗанятости") Тогда
				Отличия = Отличия + "Вид занятости" + Символы.ПС;
			КонецЕсли;
			Если Выборка.ТабельныйНомер <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Сотрудник, "ТабельныйНомер") Тогда
				Отличия = Отличия + "Табельный номер" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ВидДоговораСсылка = Перечисления.гхб_ВидыДоговоровСФизЛицами.Подряда Тогда
			
				Если ВидСотрудникаРеквизит <> Перечисления.гпх_ВидыСотрудников.ГПХ Тогда
					Отличия = Отличия + "Вид сотрудника" + Символы.ПС;
				КонецЕсли;
				
			ИначеЕсли Выборка.ВидДоговораСсылка = Перечисления.гхб_ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
				
				Если (ВидСотрудникаРеквизит = Перечисления.гпх_ВидыСотрудников.БТД 
					И ЗначениеЗаполнено(Выборка.ДатаОкончанияСрочногоТрудовогоДоговора))
					Или 
					(ВидСотрудникаРеквизит = Перечисления.гпх_ВидыСотрудников.СТД 
					И Не ЗначениеЗаполнено(Выборка.ДатаОкончанияСрочногоТрудовогоДоговора))
					Тогда
					Отличия = Отличия + "Вид сотрудника" + Символы.ПС;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВидСотрудникаРеквизит) Тогда
				Отличия = Отличия + "Не заполнен вид сотрудника" + Символы.ПС;
			КонецЕсли;
			
			обл.Параметры.Отличия = СокрЛП(Отличия);
			
		КонецЕсли;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРедактироватьДанныеПоСотрудникамВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоСотрудникамБазХолдинга(Истина);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаСозданияРедактированияСотрудников", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // СоздатьРедактироватьДанныеПоСотрудникамВывестиРезультатКлиент()

#КонецОбласти

#Область СверкаОрганизации

&НаСервере
Процедура ПолучитьДанныеПоОрганизациямБазХолдинга()

	стОтветПоОрганизации = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоОрганизациямБазХолдинга", 
																						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"), 
																						Ложь);
	Если Не стОтветПоОрганизации.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоОрганизациямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоОрганизации.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеОрганизации = Новый ТаблицаЗначений;
	тзДанныеОрганизации.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеОрганизации.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеОрганизации.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеОрганизации.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаОрганизация Из стОтветПоОрганизации.Результат.result.Данные Цикл
		
		новСтр = тзДанныеОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаОрганизация);
		
	КонецЦикла;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоорганизациямБезСверки(тзДанныеОрганизации);
	Иначе
		СверитьДанныеПоОрганизациямВывестиРезультат(тзДанныеОрганизации);
	КонецЕсли;

КонецПроцедуры // ПолучитьДанныеПоОрганизациямБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоорганизациямБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ПолучитьКоличествоЭлементовСправочника("гхб_ОрганизацииБазХолдинга");
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокОрганизации");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаОрганизации");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоорганизациямБезСверки()

&НаСервере
Процедура СверитьДанныеПоОрганизациямВывестиРезультат(тзДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	""Не совпадают реквизиты справочников"" КАК Примечание,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_ОрганизацииБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБаза
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ОрганизацииБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ОрганизацииБазХолдинга.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.guid,
	|	втДанные.ПометкаУдаления,
	|	""Нет элемента в ГХБ 2"",
	|	гхб_ОрганизацииБазХолдинга.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ОрганизацииБазХолдинга.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.guid,
	|	втДанные.ПометкаУдаления,
	|	""Нет элемента в базе РИБ, либо элемент помечен на удаление"",
	|	гхб_ОрганизацииБазХолдинга.Ссылка,
	|	гхб_ОрганизацииБазХолдинга.ПометкаУдаления
	|ИЗ
	|	Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга = втДанные.guid
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Наименование КАК Наименование,
	|	втКрайняя.guid КАК guid,
	|	втКрайняя.ПометкаУдаления КАК ПометкаУдаления,
	|	втКрайняя.Примечание КАК Примечание,
	|	втКрайняя.ПометкаУдаленияБаза КАК ПометкаУдаленияБаза,
	|	втКрайняя.Организация КАК Организация
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|
	|СГРУППИРОВАТЬ ПО
	|	втКрайняя.Наименование,
	|	втКрайняя.guid,
	|	втКрайняя.ПометкаУдаления,
	|	втКрайняя.Примечание,
	|	втКрайняя.ПометкаУдаленияБаза,
	|	втКрайняя.Организация";
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокОрганизацииСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаОрганизацииСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Если Выборка.ПометкаУдаленияБаза Тогда
			обл.Области.СтрокаОрганизацииСверка.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // СверитьДанныеПоОрганизациямВывестиРезультат()

#КонецОбласти

#Область СверкаПользователи

&НаСервере
Процедура ПолучитьДанныеПоПользователямБазХолдинга()
	ПолучитьДанныеПоПользователиБазХолдинга();
КонецПроцедуры // ПолучитьДанныеПоПользователямБазХолдинга()

&НаСервере
Процедура ПолучитьДанныеПоПользователиБазХолдинга() Экспорт 
	
	стОтветПоПользователям = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																				"ПолучитьДанныеПоПользователямИзБазХолдинга", 
																					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																					Ложь);
	Если Не стОтветПоПользователям.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоПользователямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоПользователям.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеПользователи = Новый ТаблицаЗначений;
	тзДанныеПользователи.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеПользователи.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеПользователи.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеПользователи.Колонки.Добавить("guidФЛ", ОписаниеТиповС);
	
	Для каждого СтрокаДолжность Из стОтветПоПользователям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеПользователи.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
	КонецЦикла;
	
	тзДанныеПользователи.Сортировать("Наименование");
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоПользователямБезСверки(тзДанныеПользователи);
	Иначе
		СверитьДанныеПоПользователямВывестиРезультат(тзДанныеПользователи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоПользователямБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ПолучитьКоличествоЭлементовСправочника("гхб_ПользователиБазХолдинга");
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокПользователи");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаПользователи");
		обл.Параметры.Заполнить(СтрокаДанные);
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоПользователямБезСверки()

&НаСервере
Процедура СверитьДанныеПоПользователямВывестиРезультат(тзДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guidФЛ КАК guidФЛ,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
	|	""Не совпадают реквизиты справочников"" КАК Примечание,
	|	гхб_ПользователиБазХолдинга.Ссылка КАК Пользователь,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_ПользователиБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБаза,
	|	гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Блокирован КАК Блокирован
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СрезПоследних КАК гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних
	|			ПО гхб_ПользователиБазХолдинга.Ссылка = гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь
	|				И (гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.БазаХолдинга = &БазаХолдинга)
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ПользователиБазХолдинга.Наименование
	|			ИЛИ втДанные.guidФЛ <> гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ПользователиБазХолдинга.ПометкаУдаления
	|			ИЛИ гхб_ФизическиеЛицаБазХолдинга.Ссылка <> гхб_ПользователиБазХолдинга.ФизЛицоБазыХолдинга)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.guid,
	|	втДанные.ПометкаУдаления,
	|	"""",
	|	""Нет элемента в ГХБ 2"",
	|	гхб_ПользователиБазХолдинга.Ссылка,
	|	втДанные.guidФЛ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ПользователиБазХолдинга.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДанные.Наименование,
	|	втДанные.guid,
	|	втДанные.ПометкаУдаления,
	|	гхб_ПользователиБазХолдинга.ФизЛицоБазыХолдинга,
	|	""Нет элемента в базе РИБ, либо элемент помечен на удаление"",
	|	гхб_ПользователиБазХолдинга.Ссылка,
	|	втДанные.guidФЛ,
	|	гхб_ПользователиБазХолдинга.ПометкаУдаления,
	|	гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Блокирован
	|ИЗ
	|	Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ПользователиБазХолдинга.GUIDБазыХолдинга = втДанные.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СрезПоследних КАК гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних
	|		ПО гхб_ПользователиБазХолдинга.Ссылка = гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь
	|			И (гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Наименование КАК Наименование,
	|	втКрайняя.guid КАК guid,
	|	втКрайняя.ПометкаУдаления КАК ПометкаУдаления,
	|	втКрайняя.Пользователь КАК Пользователь,
	|	втКрайняя.ФизЛицо КАК ФизЛицо,
	|	втКрайняя.Примечание КАК Примечание,
	|	втКрайняя.guidФЛ КАК guidФЛ,
	|	втКрайняя.ПометкаУдаленияБаза КАК ПометкаУдаленияБаза,
	|	ВЫБОР
	|		КОГДА втКрайняя.Блокирован ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Блокирован
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|
	|СГРУППИРОВАТЬ ПО
	|	втКрайняя.Наименование,
	|	втКрайняя.guid,
	|	втКрайняя.ПометкаУдаления,
	|	втКрайняя.Пользователь,
	|	втКрайняя.ФизЛицо,
	|	втКрайняя.Примечание,
	|	втКрайняя.guidФЛ,
	|	втКрайняя.ПометкаУдаленияБаза,
	|	ВЫБОР
	|		КОГДА втКрайняя.Блокирован ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокПользователиСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаПользователиСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Если Выборка.ПометкаУдаленияБаза Тогда
			обл.Области.СтрокаПользователиСверка.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // СверитьДанныеПоПользователямВывестиРезультат()

#КонецОбласти

#Область СверкаПодразделения

&НаСервере
Функция ПолучитьДанныеПоПодразделениямОрганизацийБазХолдинга(ВернутьТаблицу = Ложь)
	
	стОтветПоПодразделениям = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоПодразделениямИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стОтветПоПодразделениям.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стОтветПоПодразделениям.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеПодразделения = Новый ТаблицаЗначений;
	тзДанныеПодразделения.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("guidОрганизация", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("Родитель", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("Родительguid", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеПодразделения.Колонки.Добавить("ДатаС", Новый ОписаниеТипов("Дата"));
	тзДанныеПодразделения.Колонки.Добавить("ДатаПо", Новый ОписаниеТипов("Дата"));
	тзДанныеПодразделения.Колонки.Добавить("УровеньПодразделения", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_УровеньПодразделения"));
	
	Для каждого СтрокаДанные Из стОтветПоПодразделениям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеПодразделения.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДанные);
		новСтр.Организация = СтрокаДанные.НаименованиеОрганизация;
		Попытка
			новСтр.УровеньПодразделения = Перечисления.гхб_УровеньПодразделения[СтрокаДанные.УроверьПодразделения];
		Исключение
			новСтр.УровеньПодразделения = Перечисления.гхб_УровеньПодразделения.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.ДатаС = Дата(Сред(СтрокаДанные.ДатаС, 1, 4),
									Сред(СтрокаДанные.ДатаС, 6, 2),
									Сред(СтрокаДанные.ДатаС, 9, 2));;
		новСтр.ДатаПо = Дата(Сред(СтрокаДанные.ДатаПо, 1, 4),
									Сред(СтрокаДанные.ДатаПо, 6, 2),
									Сред(СтрокаДанные.ДатаПо, 9, 2));;
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДанныеПодразделения;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоПодразделениямБезСверкиБезСверки(тзДанныеПодразделения);
	Иначе
		СверитьДанныеПоПодразделениямВывестиРезультат(тзДанныеПодразделения);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВывестиДанныеПоПодразделениямБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанные.Количество() + Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК Спр
	|ГДЕ
	|	Спр.БазаХолдинга = &БазаХолдинга
	|	И НЕ Спр.ЭтоГруппаБазы";
	
	ВыборкаКоличествоТекущаяБаза = Запрос.Выполнить().Выбрать();
	
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ВыборкаКоличествоТекущаяБаза.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокПодразделения");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаПодразделения");
		обл.Параметры.Заполнить(СтрокаДанные);
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоПодразделениямБезСверкиБезСверки()

&НаСервере
Процедура СверитьДанныеПоПодразделениямВывестиРезультат(тзДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхПодразделений();
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокПодразделенияСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаПодразделенияСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Отличия = "";
		
		Если Выборка.Наименование <> Выборка.НаименованиеБХ Тогда
			Отличия = Отличия + "Наименование, " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> Выборка.ПометкаУдаленияБХ Тогда
			Отличия = Отличия + "Пометка удаления, " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.Организация <> Выборка.ОрганизацияБХ Тогда
			Отличия = Отличия + "Организация " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ДатаС <> Выборка.ДатаСБХ Тогда
			Отличия = Отличия + "Дата С " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ДатаПо <> Выборка.ДатаПоБХ Тогда
			Отличия = Отличия + "Дата По " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.Родитель <> Выборка.РодительБХ Тогда
			Отличия = Отличия + "Родитель " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.УровеньПодразделения <> Выборка.УровеньПодразделенияБХ Тогда
			Отличия = Отличия + "Уровень подразделения " + Символы.ПС;
		КонецЕсли;
		
		обл.Параметры.Отличия = Отличия;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНесуществующиеВГХБПодразделений();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокПодразделения");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаПодразделения");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНесуществующиеВРИБПодразделений();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиГПХ");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДолжностиГПХ");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиДанныеПоПодразделениямБезСверкиБезСверки()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхПодразделений()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guidОрганизация КАК guidОрганизация,
	|	таб.Родительguid КАК Родительguid,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.УровеньПодразделения КАК УровеньПодразделения,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_ПодразделенияОрганизацийБазХолдингаРодители.Ссылка КАК Родитель,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ОрганизацияБазХолдинга КАК ОрганизацияБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ДатаС КАК ДатаСБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ДатаПо КАК ДатаПоБХ,
	|	ВЫБОР
	|		КОГДА НЕ гхб_ПодразделенияОрганизацийБазХолдинга.Родитель.ЭтоГруппаБазы
	|			ТОГДА гхб_ПодразделенияОрганизацийБазХолдинга.Родитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.гхб_ПодразделенияОрганизацийБазХолдинга.ПустаяСсылка)
	|	КОНЕЦ КАК РодительБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ,
	|	втДанные.УровеньПодразделения КАК УровеньПодразделения,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.УровеньПодразделения КАК УровеньПодразделенияБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизация = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдингаРодители
	|		ПО втДанные.Родительguid = гхб_ПодразделенияОрганизацийБазХолдингаРодители.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдингаРодители.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ПодразделенияОрганизацийБазХолдинга.Наименование
	|			ИЛИ гхб_ПодразделенияОрганизацийБазХолдинга.ПометкаУдаления <> втДанные.ПометкаУдаления
	|			ИЛИ гхб_ОрганизацииБазХолдинга.Ссылка <> гхб_ПодразделенияОрганизацийБазХолдинга.ОрганизацияБазХолдинга
	|			ИЛИ гхб_ПодразделенияОрганизацийБазХолдингаРодители.Ссылка <> гхб_ПодразделенияОрганизацийБазХолдинга.Родитель
	|			ИЛИ втДанные.ДатаС <> гхб_ПодразделенияОрганизацийБазХолдинга.ДатаС
	|			ИЛИ втДанные.ДатаПо <> гхб_ПодразделенияОрганизацийБазХолдинга.ДатаПо
	|			ИЛИ втДанные.УровеньПодразделения <> гхб_ПодразделенияОрганизацийБазХолдинга.УровеньПодразделения)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхПодразделений()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНесуществующиеВГХБПодразделений()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guidОрганизация КАК guidОрганизация,
	|	таб.Родительguid КАК Родительguid,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.УровеньПодразделения КАК УровеньПодразделения,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_ПодразделенияОрганизацийБазХолдингаРодители.Ссылка КАК Родитель,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.УровеньПодразделения КАК УровеньПодразделения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизация = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдингаРодители
	|		ПО втДанные.Родительguid = гхб_ПодразделенияОрганизацийБазХолдингаРодители.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдингаРодители.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНесуществующиеВГХБПодразделений()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНесуществующиеВРИБПодразделений()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guidОрганизация КАК guidОрганизация,
	|	таб.Родительguid КАК Родительguid,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.УровеньПодразделения КАК УровеньПодразделения,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Наименование КАК Наименование,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ОрганизацияБазХолдинга КАК Организация,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ДатаС КАК ДатаС,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ДатаПо КАК ДатаПо,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Родитель КАК Родитель,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.УровеньПодразделения КАК УровеньПодразделения
	|ИЗ
	|	втДанные КАК втДанные
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНесуществующиеВРИБПодразделений()

&НаКлиенте
Процедура РедактироватьДанныеПоПодразделениямВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоПодразделениямОрганизацийБазХолдинга(Истина);
	
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияПодразделений", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьДанныеПоПодразделениямВывестиРезультатКлиент()

#КонецОбласти

#Область СверкаДолжностей

&НаСервере
Функция ПолучитьДанныеПоДолжностямОрганизацийБазХолдинга(ВернутьТаблицу = Ложь)
	
	стОтветПоДолжностям = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоДолжностямИзБазХолдинга", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стОтветПоДолжностям.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стОтветПоДолжностям.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеДолжности = Новый ТаблицаЗначений;
	тзДанныеДолжности.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("АнглийскоеНаименование", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеДолжности.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДанные Из стОтветПоДолжностям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеДолжности.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДанные);
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДанныеДолжности;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоДолжностямБезСверкиБезСверки(тзДанныеДолжности);
	Иначе
		СверитьДанныеПоДолжностямВывестиРезультат(тзДанныеДолжности);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВывестиДанныеПоДолжностямБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ПолучитьКоличествоЭлементовСправочника("гхб_ДолжностиОрганизацийБазХолдинга");
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокДолжности");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаДолжности");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры

&НаСервере
Процедура СверитьДанныеПоДолжностямВывестиРезультат(тзДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.АнглийскоеНаименование КАК АнглийскоеНаименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Должность,
	|	гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБаза,
	|	втДанные.АнглийскоеНаименование КАК АнглийскоеНаименование,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга КАК guidБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ДолжностиОрганизацийБазХолдинга.АнглийскоеНаименование КАК АнглийскоеНаименованиеБХ,
	|	гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ДолжностиОрганизацийБазХолдинга.Наименование
	|			ИЛИ втДанные.АнглийскоеНаименование <> гхб_ДолжностиОрганизацийБазХолдинга.АнглийскоеНаименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Должность,
	|	ЛОЖЬ КАК ПометкаУдаленияБаза,
	|	втДанные.АнглийскоеНаименование КАК АнглийскоеНаименование
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДолжностиОрганизацийБазХолдинга.Наименование КАК Наименование,
	|	гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга КАК guid,
	|	гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Должность,
	|	гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБаза,
	|	гхб_ДолжностиОрганизацийБазХолдинга.АнглийскоеНаименование КАК АнглийскоеНаименование
	|ИЗ
	|	Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга = втДанные.guid
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL
	|	И гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	РезПакет = Запрос.ВыполнитьПакет();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	Выборка = РезПакет[1].Выбрать();
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиСверка");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаДолжностьСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Отличия = "";
		
		Если Выборка.ПометкаУдаленияБаза Тогда
			обл.Области.СтрокаДолжностьСверка.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;
		
		Если Выборка.Наименование <> Выборка.НаименованиеБХ Тогда
			Отличия = Отличия + "Наименование, " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.АнглийскоеНаименование <> Выборка.АнглийскоеНаименованиеБХ Тогда
			Отличия = Отличия + "Английское наименование, " + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаленияБХ <> Выборка.ПометкаУдаления Тогда
			Отличия = Отличия + "Пометка удаления " + Символы.ПС;
		КонецЕсли;
		
		обл.Параметры.Отличия = Отличия;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Выборка = РезПакет[2].Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиСверкаОднаСтрока");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаДолжностьСверкаОднаСтрока");
		обл.Параметры.Заполнить(Выборка);
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Выборка = РезПакет[3].Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в РИБ : " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиСверкаОднаСтрока");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаДолжностьСверкаОднаСтрока");
		обл.Параметры.Заполнить(Выборка);
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеПоДолжностямОрганизацийВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоДолжностямОрганизацийБазХолдинга(Истина);
	
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияДолжностей", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьДанныеПоДолжностямОрганизацийВывестиРезультатКлиент()

#КонецОбласти

#Область СверкаЦФО

&НаСервере
Процедура ПолучитьДанныеПоЦФОБазХолдинга()
	
	стСостояния = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоЦФОБазХолдинга", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стСостояния.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стСостояния.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ОписаниеТиповЧ = ОбщегоНазначения.ОписаниеТипаЧисло(10);
		
	тзДанныеСостояния = Новый ТаблицаЗначений;
	тзДанныеСостояния.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("ЦФОguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Шифр", ОписаниеТиповЧ);
	тзДанныеСостояния.Колонки.Добавить("ДатаС", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("ДатаПо", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	тзДанныеСостояния.Колонки.Добавить("Родитель", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Родительguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Ответственный", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Ответственныйguid", ОписаниеТиповС);
	
	Для каждого СтрокаСостояние Из стСостояния.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСостояние);
		
		
		новСтр.ДатаС = Дата(Сред(СтрокаСостояние.ДатаС, 1, 4), 
										Сред(СтрокаСостояние.ДатаС, 6, 2),
										Сред(СтрокаСостояние.ДатаС, 9, 2));
		новСтр.ДатаПо = Дата(Сред(СтрокаСостояние.ДатаПо, 1, 4), 
										Сред(СтрокаСостояние.ДатаПо, 6, 2),
										Сред(СтрокаСостояние.ДатаПо, 9, 2));
		
	КонецЦикла;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоЦФОБезСверкиБезСверки(тзДанныеСостояния);
	Иначе
		СверитьДанныеПоЦФОВывестиРезультат(тзДанныеСостояния);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПоЦФОБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных элементов: " + тзДанные.Количество() + Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ЦФО КАК Спр
	|ГДЕ
	|	Спр.БазаХолдинга = &БазаХолдинга";
	
	ВыборкаЦФО = Запрос.Выполнить().Выбрать();
	
	текстШапки = текстШапки + "количество элементов в ГХБ 2.0: " + ВыборкаЦФО.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокЦФО");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаЦФО");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоЦФОБезСверкиБезСверки()

&НаСервере
Процедура СверитьДанныеПоЦФОВывестиРезультат(тзДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ЦФО КАК ЦФО,
	|	таб.ЦФОguid КАК ЦФОguid,
	|	таб.Шифр КАК Шифр,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.ЭтоГруппа КАК ЭтоГруппа,
	|	таб.Родитель КАК Родитель,
	|	таб.Родительguid КАК Родительguid,
	|	таб.Ответственный КАК Ответственный,
	|	таб.Ответственныйguid КАК Ответственныйguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ЦФО.Ссылка КАК ЦФОСсылка,
	|	""Не совпадают реквизиты справочников"" КАК Примечание,
	|	гхб_ЦФО.ПометкаУдаления КАК ПометкаУдаленияБаза,
	|	гхб_ЦФО.GUIDБазыХолдинга КАК guidГХБ,
	|	втДанные.ЦФО КАК ЦФО,
	|	втДанные.ЦФОguid КАК ЦФОguid,
	|	втДанные.Шифр КАК Шифр,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.Родитель КАК Родитель,
	|	втДанные.Родительguid КАК Родительguid,
	|	втДанные.Ответственный КАК Ответственный,
	|	втДанные.Ответственныйguid КАК Ответственныйguid,
	|	гхб_ЦФО.Родитель КАК РодительБаза,
	|	гхб_ЦФО.Ответственный КАК ОтветственныйГХБ,
	|	гхб_ЦФО.Шифр КАК ШифрГХБ,
	|	гхб_ЦФО.ДатаС КАК ДатаСГХБ,
	|	гхб_ЦФО.ДатаПо КАК ДатаПоГХБ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ПО гхб_ЦФО.Ответственный = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФОродители
	|		ПО втДанные.Родительguid = гхб_ЦФОродители.GUIDБазыХолдинга
	|			И (гхб_ЦФОродители.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.ДатаС <> гхб_ЦФО.ДатаС
	|			ИЛИ втДанные.ДатаПо <> гхб_ЦФО.ДатаПо
	|			ИЛИ втДанные.Шифр <> гхб_ЦФО.Шифр
	|			ИЛИ втДанные.ЦФО <> гхб_ЦФО.Наименование
	|			ИЛИ гхб_ЦФО.Родитель <> гхб_ЦФОродители.Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	гхб_ЦФО.Ссылка,
	|	""Нет элемента в ГХБ 2"",
	|	ЛОЖЬ,
	|	"""",
	|	втДанные.ЦФО,
	|	втДанные.ЦФОguid,
	|	втДанные.Шифр,
	|	втДанные.ДатаС,
	|	втДанные.ДатаПо,
	|	втДанные.Родитель,
	|	NULL,
	|	втДанные.Ответственный,
	|	втДанные.Ответственныйguid,
	|	гхб_ЦФО.Родитель,
	|	гхб_ЦФО.Ответственный,
	|	гхб_ЦФО.Шифр,
	|	гхб_ЦФО.ДатаС,
	|	гхб_ЦФО.ДатаПо
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ЦФО.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	гхб_ЦФО.Ссылка,
	|	""Нет элемента в базе РИБ, либо элемент помечен на удаление"",
	|	гхб_ЦФО.ПометкаУдаления,
	|	гхб_ЦФО.GUIDБазыХолдинга,
	|	втДанные.ЦФО,
	|	втДанные.ЦФОguid,
	|	втДанные.Шифр,
	|	втДанные.ДатаС,
	|	втДанные.ДатаПо,
	|	втДанные.Родитель,
	|	втДанные.Родительguid,
	|	втДанные.Ответственный,
	|	втДанные.Ответственныйguid,
	|	гхб_ЦФО.Родитель,
	|	гхб_ЦФО.Ответственный,
	|	гхб_ЦФО.Шифр,
	|	гхб_ЦФО.ДатаС,
	|	гхб_ЦФО.ДатаПо
	|ИЗ
	|	Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ЦФО.GUIDБазыХолдинга = втДанные.ЦФОguid
	|ГДЕ
	|	гхб_ЦФО.БазаХолдинга = &БазаХолдинга
	|	И втДанные.ЦФО ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.ЦФОСсылка КАК ЦФОСсылка,
	|	втКрайняя.Примечание КАК Примечание,
	|	втКрайняя.ПометкаУдаленияБаза КАК ПометкаУдаленияБаза,
	|	втКрайняя.guidГХБ КАК guidГХБ,
	|	втКрайняя.ЦФОguid КАК ЦФОguid,
	|	втКрайняя.Шифр КАК Шифр,
	|	втКрайняя.ДатаС КАК ДатаС,
	|	втКрайняя.ДатаПо КАК ДатаПо,
	|	втКрайняя.Родитель КАК Родитель,
	|	втКрайняя.Родительguid КАК Родительguid,
	|	втКрайняя.Ответственный КАК Ответственный,
	|	втКрайняя.Ответственныйguid КАК Ответственныйguid,
	|	втКрайняя.ЦФО КАК ЦФО,
	|	втКрайняя.ОтветственныйГХБ КАК ОтветственныйГХБ,
	|	втКрайняя.ШифрГХБ КАК ШифрГХБ,
	|	втКрайняя.ДатаСГХБ КАК ДатаСГХБ,
	|	втКрайняя.ДатаПоГХБ КАК ДатаПоГХБ,
	|	втКрайняя.РодительБаза КАК РодительБаза
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|
	|СГРУППИРОВАТЬ ПО
	|	втКрайняя.ЦФОguid,
	|	втКрайняя.Шифр,
	|	втКрайняя.ДатаС,
	|	втКрайняя.Примечание,
	|	втКрайняя.guidГХБ,
	|	втКрайняя.ЦФОСсылка,
	|	втКрайняя.ПометкаУдаленияБаза,
	|	втКрайняя.ДатаПо,
	|	втКрайняя.Родитель,
	|	втКрайняя.Ответственныйguid,
	|	втКрайняя.Родительguid,
	|	втКрайняя.Ответственный,
	|	втКрайняя.ЦФО,
	|	втКрайняя.ОтветственныйГХБ,
	|	втКрайняя.ШифрГХБ,
	|	втКрайняя.ДатаСГХБ,
	|	втКрайняя.ДатаПоГХБ,
	|	втКрайняя.РодительБаза";
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокЦФОСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаЦФОСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Если Выборка.ПометкаУдаленияБаза Тогда
			обл.Области.СтрокаПодразделенияСверка.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоЦФОБезСверкиБезСверки()

#КонецОбласти

#Область СверкаКадровыхДанных

&НаСервере
Функция ПолучитьДанныеПоКадровымДаннымСотрудниковБазХолдинга(ВернутьТаблицу = Ложь)
	
	стКадровыеДанные = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьКадровыеДанныеБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стКадровыеДанные.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стКадровыеДанные.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКадровыеДанные = Новый ТаблицаЗначений;
	тзКадровыеДанные.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidСотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidДолжность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ПричинаИзмененияСостояния", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ПричиныИзмененияСостояния"));
	тзКадровыеДанные.Колонки.Добавить("ВидЗанятости", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКод", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКодРодителя", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДатаОкончанияСрочногоТрудовогоДоговора", Новый ОписаниеТипов("Дата"));
	тзКадровыеДанные.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	тзКадровыеДанные.Колонки.Добавить("ДатаЗаписиБазыГХБ", Новый ОписаниеТипов("Дата"));
	
	соотПричина = Новый Соответствие;
	соотПричина.Вставить("Прием на работу", Перечисления.гхб_ПричиныИзмененияСостояния.ПриемНаРаботу);
	соотПричина.Вставить("Перемещение", Перечисления.гхб_ПричиныИзмененияСостояния.Перемещение);
	соотПричина.Вставить("Увольнение", Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение);
	соотПричина.Вставить("Декрет", Перечисления.гхб_ПричиныИзмененияСостояния.Декрет);
	соотПричина.Вставить("Возврат из декрет", Перечисления.гхб_ПричиныИзмененияСостояния.ВозвратИзДекрет);
	
	Для каждого СтрокаКадровыеДанные Из стКадровыеДанные.Результат.result.Данные Цикл
		
		новСтр = тзКадровыеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКадровыеДанные);
		новСтр.ПричинаИзмененияСостояния = соотПричина.Получить(СтрокаКадровыеДанные.ПричинаИзмененияСостояния);
		
		новСтр.ДатаОкончанияСрочногоТрудовогоДоговора = Дата(Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 1, 4), 
															Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 6, 2),
															Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 9, 2));
		новСтр.ДатаЗаписиБазыГХБ = Дата(Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 1, 4), 
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 6, 2),
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 9, 2));
		
		Если новСтр.ПричинаИзмененияСостояния = Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение Тогда
			новСтр.ДатаУвольнения = НачалоДня(НачалоДня(новСтр.ДатаЗаписиБазыГХБ) - 1);
		КонецЕсли;
		
		
	КонецЦикла;

	Если ВернутьТаблицу Тогда
		Возврат тзКадровыеДанные;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоКадровымДаннымБезСверкиБезСверки(тзКадровыеДанные);
	Иначе
		СверитьДанныеПоКадровымДаннымВывестиРезультат(тзКадровыеДанные);
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеПоКадровымДаннымСотрудниковБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоКадровымДаннымБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоРегиструКадровыхДанных();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокКадровыеДанные");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаКадровыеДанные");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоКадровымДаннымБезСверкиБезСверки()

&НаСервере
Процедура СверитьДанныеПоКадровымДаннымВывестиРезультат(тзДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеВДанных();
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокКадровыеДанныеСверка");
	РезультатСверки.Вывести(обл);
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаКадровыеДанныеСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Отличия = "";
		
		Если Выборка.дельтаДолжность Тогда
			Отличия = Отличия + "Должность" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаПодразделение Тогда
			Отличия = Отличия + "Подразделение" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаПричинаИзмененияСостояния Тогда
			Отличия = Отличия + "Причина Изменения Состояния" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаПозиция Тогда
			Отличия = Отличия + "Позиция" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаДивизион Тогда
			Отличия = Отличия + "Дивизион" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаБюджетныйКодПозиции Тогда
			Отличия = Отличия + "Бюджетный код позиции" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаГруппаДивизиона Тогда
			Отличия = Отличия + "Группа дивизиона" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаДатаОкончанияСрочногоТрудовогоДоговора Тогда
			Отличия = Отличия + "Дата окончания договора" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаДатаУвольнения Тогда
			Отличия = Отличия + "Дата увольнения";
		КонецЕсли;
		Если Выборка.дельтаЦФО Тогда
			Отличия = Отличия + "ЦФО";
		КонецЕсли;
		
		обл.Параметры.Отличия = Отличия;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНесуществующиеВГХБ();
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
	
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество ненайденых: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаКадровыеДанныеСверка");
		обл.Параметры.Заполнить(Выборка);
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНесуществующиеВРИБ();
	
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
	
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество лишних: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаКадровыеДанныеСверка");
		обл.Параметры.Заполнить(Выборка);
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;

КонецПроцедуры // СверитьДанныеПоКадровымДаннымВывестиРезультат()

&НаСервере
Функция ПолучитьТекстЗапросаРазличиеВДанных()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК СотрудникТекст,
	|	таб.guidСотрудник КАК guidСотрудник,
	|	таб.Должность КАК ДолжностьТекст,
	|	таб.guidДолжность КАК guidДолжность,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизацииТекст,
	|	таб.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	таб.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.Организация КАК ОрганизацияТекст,
	|	таб.guidОрганизации КАК guidОрганизации,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.ИНН КАК ИНН,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.ЦФО КАК ЦФО,
	|	таб.guidЦФО КАК guidЦФО,
	|	таб.ДатаУвольнения КАК ДатаУвольнения,
	|	таб.ДатаЗаписиБазыГХБ КАК Период
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.СотрудникТекст КАК СотрудникТекст,
	|	втДанные.guidСотрудник КАК guidСотрудник,
	|	втДанные.ДолжностьТекст КАК ДолжностьТекст,
	|	втДанные.guidДолжность КАК guidДолжность,
	|	втДанные.ПодразделениеОрганизацииТекст КАК ПодразделениеОрганизацииТекст,
	|	втДанные.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	втДанные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.ОрганизацияТекст КАК ОрганизацияТекст,
	|	втДанные.guidОрганизации КАК guidОрганизации,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.Период КАК Период,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК ДолжностьСсылка,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втДанные.ДатаУвольнения КАК ДатаУвольнения,
	|	гхб_ЦФО.Ссылка КАК ЦФОСсылка
	|ПОМЕСТИТЬ втСводная
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guidСотрудник = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guidПодразделениеОрганизации = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизации = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guidДолжность = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.guidЦФО = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСводная.Период КАК Период,
	|	втСводная.ДолжностьСсылка КАК Должность,
	|	втСводная.ОрганизацияСсылка КАК Организация,
	|	втСводная.ПодразделениеСсылка КАК ПодразделениеОрганизации,
	|	втСводная.СотрудникСсылка КАК Сотрудник,
	|	гхб_Дивизионы.Ссылка КАК ГруппаДивизиона,
	|	гхб_ДивизионыРодители.Ссылка КАК Дивизион,
	|	втСводная.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втСводная.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияШтатногоРасписания,
	|	втСводная.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втСводная.ДатаУвольнения КАК ДатаУвольнения,
	|	втСводная.ДивизионКод КАК ДивизионКод,
	|	втСводная.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	ВЫБОР
	|		КОГДА втСводная.ДолжностьСсылка <> гхб_РаботникиОрганизацийБазХолдинга.Должность
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаДолжность,
	|	ВЫБОР
	|		КОГДА втСводная.ПодразделениеСсылка <> гхб_РаботникиОрганизацийБазХолдинга.ПодразделениеОрганизации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаПодразделение,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдинга.ПричинаИзмененияСостояния <> втСводная.ПричинаИзмененияСостояния
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаПричинаИзмененияСостояния,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдинга.ПозицияШтатногоРасписания <> гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаПозиция,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдинга.Дивизион <> гхб_ДивизионыРодители.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаДивизион,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдинга.БюджетныйКодПозиции <> втСводная.БюджетныйКодПозиции
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаБюджетныйКодПозиции,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдинга.ГруппаДивизиона <> гхб_Дивизионы.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаГруппаДивизиона,
	|	ВЫБОР
	|		КОГДА втСводная.ДатаОкончанияСрочногоТрудовогоДоговора <> гхб_РаботникиОрганизацийБазХолдинга.ДатаОкончанияСрочногоТрудовогоДоговора
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаДатаОкончанияСрочногоТрудовогоДоговора,
	|	ВЫБОР
	|		КОГДА втСводная.ДатаУвольнения <> гхб_РаботникиОрганизацийБазХолдинга.ДатаУвольнения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаДатаУвольнения,
	|	гхб_РаботникиОрганизацийБазХолдинга.Организация КАК ОрганизацияРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.Сотрудник КАК СотрудникРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостоянияРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.Должность КАК ДолжностьРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизацииРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписанияРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговораРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.Дивизион КАК ДивизионРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозицииРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ГруппаДивизиона КАК ГруппаДивизионаРС,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаУвольнения КАК ДатаУвольненияРС,
	|	ВЫБОР
	|		КОГДА втСводная.ЦФОСсылка <> гхб_РаботникиОрганизацийБазХолдинга.ЦФО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДельтаЦФО,
	|	втСводная.ЦФОСсылка КАК ЦФО
	|ПОМЕСТИТЬ втНестыковки
	|ИЗ
	|	втСводная КАК втСводная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга КАК гхб_РаботникиОрганизацийБазХолдинга
	|		ПО втСводная.Период = гхб_РаботникиОрганизацийБазХолдинга.Период
	|			И втСводная.СотрудникСсылка = гхб_РаботникиОрганизацийБазХолдинга.Сотрудник
	|			И втСводная.ОрганизацияСсылка = гхб_РаботникиОрганизацийБазХолдинга.Организация
	|			И (гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ПО втСводная.ДивизионКод = гхб_Дивизионы.Код
	|			И втСводная.ДивизионКодРодителя = гхб_Дивизионы.Родитель.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_ДивизионыРодители
	|		ПО втСводная.ДивизионКодРодителя = гхб_ДивизионыРодители.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО (ВЫБОР
	|				КОГДА втСводная.Позицияguid = """"
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ втСводная.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			КОНЕЦ)
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНестыковки.Период КАК Период,
	|	втНестыковки.Должность КАК Должность,
	|	втНестыковки.Организация КАК Организация,
	|	втНестыковки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втНестыковки.Сотрудник КАК Сотрудник,
	|	втНестыковки.ГруппаДивизиона КАК ГруппаДивизиона,
	|	втНестыковки.Дивизион КАК Дивизион,
	|	втНестыковки.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втНестыковки.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втНестыковки.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	втНестыковки.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втНестыковки.ДатаУвольнения КАК ДатаУвольнения,
	|	втНестыковки.ДивизионКод КАК ДивизионКод,
	|	втНестыковки.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втНестыковки.дельтаДолжность КАК дельтаДолжность,
	|	втНестыковки.дельтаПодразделение КАК дельтаПодразделение,
	|	втНестыковки.дельтаПричинаИзмененияСостояния КАК дельтаПричинаИзмененияСостояния,
	|	втНестыковки.дельтаПозиция КАК дельтаПозиция,
	|	втНестыковки.дельтаДивизион КАК дельтаДивизион,
	|	втНестыковки.дельтаБюджетныйКодПозиции КАК дельтаБюджетныйКодПозиции,
	|	втНестыковки.дельтаГруппаДивизиона КАК дельтаГруппаДивизиона,
	|	втНестыковки.дельтаДатаОкончанияСрочногоТрудовогоДоговора КАК дельтаДатаОкончанияСрочногоТрудовогоДоговора,
	|	втНестыковки.дельтаДатаУвольнения КАК дельтаДатаУвольнения,
	|	втНестыковки.ОрганизацияРС КАК ОрганизацияРС,
	|	втНестыковки.СотрудникРС КАК СотрудникРС,
	|	втНестыковки.ПричинаИзмененияСостоянияРС КАК ПричинаИзмененияСостоянияРС,
	|	втНестыковки.ДолжностьРС КАК ДолжностьРС,
	|	втНестыковки.ПодразделениеОрганизацииРС КАК ПодразделениеОрганизацииРС,
	|	втНестыковки.ПозицияШтатногоРасписанияРС КАК ПозицияШтатногоРасписанияРС,
	|	втНестыковки.ДатаОкончанияСрочногоТрудовогоДоговораРС КАК ДатаОкончанияСрочногоТрудовогоДоговораРС,
	|	втНестыковки.ДивизионРС КАК ДивизионРС,
	|	втНестыковки.БюджетныйКодПозицииРС КАК БюджетныйКодПозицииРС,
	|	втНестыковки.ГруппаДивизионаРС КАК ГруппаДивизионаРС,
	|	втНестыковки.ДатаУвольненияРС КАК ДатаУвольненияРС,
	|	втНестыковки.ЦФО КАК ЦФО,
	|	втНестыковки.ДельтаЦФО КАК ДельтаЦФО
	|ИЗ
	|	втНестыковки КАК втНестыковки
	|ГДЕ
	|	(втНестыковки.дельтаДолжность
	|			ИЛИ втНестыковки.дельтаПодразделение
	|			ИЛИ втНестыковки.дельтаПричинаИзмененияСостояния
	|			ИЛИ втНестыковки.дельтаПозиция
	|			ИЛИ втНестыковки.дельтаДивизион
	|			ИЛИ втНестыковки.дельтаБюджетныйКодПозиции
	|			ИЛИ втНестыковки.дельтаГруппаДивизиона
	|			ИЛИ втНестыковки.дельтаДатаОкончанияСрочногоТрудовогоДоговора
	|			ИЛИ втНестыковки.дельтаДатаУвольнения
	|			ИЛИ втНестыковки.ДельтаЦФО)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеВДанных()

&НаСервере
Функция ПолучитьТекстЗапросаНесуществующиеВГХБ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК СотрудникТекст,
	|	таб.guidСотрудник КАК guidСотрудник,
	|	таб.Должность КАК ДолжностьТекст,
	|	таб.guidДолжность КАК guidДолжность,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизацииТекст,
	|	таб.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	таб.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.Организация КАК ОрганизацияТекст,
	|	таб.guidОрганизации КАК guidОрганизации,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.ИНН КАК ИНН,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.ЦФО КАК ЦФО,
	|	таб.guidЦФО КАК guidЦФО,
	|	таб.ДатаУвольнения КАК ДатаУвольнения,
	|	таб.ДатаЗаписиБазыГХБ КАК Период
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.СотрудникТекст КАК СотрудникТекст,
	|	втДанные.ДолжностьТекст КАК ДолжностьТекст,
	|	втДанные.ПодразделениеОрганизацииТекст КАК ПодразделениеОрганизацииТекст,
	|	втДанные.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	втДанные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.ОрганизацияТекст КАК ОрганизацияТекст,
	|	втДанные.guidОрганизации КАК guidОрганизации,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.Период КАК Период,
	|	втДанные.ЦФО КАК ЦФО,
	|	втДанные.guidЦФО КАК guidЦФО
	|ПОМЕСТИТЬ втСводная
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guidСотрудник = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизации = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСводная.ДолжностьТекст КАК Должность,
	|	втСводная.ПодразделениеОрганизацииТекст КАК ПодразделениеОрганизации,
	|	втСводная.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втСводная.ВидЗанятости КАК ВидЗанятости,
	|	втСводная.ОрганизацияТекст КАК ОрганизацияТекст,
	|	втСводная.ДивизионКод КАК ДивизионКод,
	|	втСводная.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втСводная.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втСводная.Позиция КАК ПозицияШтатногоРасписания,
	|	втСводная.Период КАК Период,
	|	втСводная.ЦФО КАК ЦФО
	|ИЗ
	|	втСводная КАК втСводная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга КАК гхб_РаботникиОрганизацийБазХолдинга
	|		ПО втСводная.Период = гхб_РаботникиОрганизацийБазХолдинга.Период
	|			И (гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдинга.Период ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеВДанных()

&НаСервере
Функция ПолучитьТекстЗапросаНесуществующиеВРИБ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК СотрудникТекст,
	|	таб.guidСотрудник КАК guidСотрудник,
	|	таб.Должность КАК ДолжностьТекст,
	|	таб.guidДолжность КАК guidДолжность,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизацииТекст,
	|	таб.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	таб.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.Организация КАК ОрганизацияТекст,
	|	таб.guidОрганизации КАК guidОрганизации,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.ИНН КАК ИНН,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.ДатаУвольнения КАК ДатаУвольнения,
	|	таб.ДатаЗаписиБазыГХБ КАК Период
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.СотрудникТекст КАК СотрудникТекст,
	|	втДанные.guidСотрудник КАК guidСотрудник,
	|	втДанные.ДолжностьТекст КАК ДолжностьТекст,
	|	втДанные.guidДолжность КАК guidДолжность,
	|	втДанные.ПодразделениеОрганизацииТекст КАК ПодразделениеОрганизацииТекст,
	|	втДанные.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	втДанные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.ОрганизацияТекст КАК ОрганизацияТекст,
	|	втДанные.guidОрганизации КАК guidОрганизации,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.Период КАК Период,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втДанные.ДатаУвольнения КАК ДатаУвольнения
	|ПОМЕСТИТЬ втСводная
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guidСотрудник = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизации = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_РаботникиОрганизацийБазХолдинга.Организация КАК Организация,
	|	гхб_РаботникиОрганизацийБазХолдинга.Сотрудник КАК Сотрудник,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	гхб_РаботникиОрганизацийБазХолдинга.Должность КАК Должность,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	гхб_РаботникиОрганизацийБазХолдинга.Дивизион КАК Дивизион,
	|	гхб_РаботникиОрганизацийБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	гхб_РаботникиОрганизацийБазХолдинга.ГруппаДивизиона КАК ГруппаДивизиона,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаУвольнения КАК ДатаУвольнения,
	|	гхб_РаботникиОрганизацийБазХолдинга.Период КАК Период,
	|	гхб_РаботникиОрганизацийБазХолдинга.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга КАК гхб_РаботникиОрганизацийБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСводная КАК втСводная
	|		ПО гхб_РаботникиОрганизацийБазХолдинга.Период = втСводная.Период
	|			И гхб_РаботникиОрганизацийБазХолдинга.Организация = втСводная.ОрганизацияСсылка
	|			И гхб_РаботникиОрганизацийБазХолдинга.Сотрудник = втСводная.СотрудникСсылка
	|ГДЕ
	|	втСводная.Период ЕСТЬ NULL
	|	И гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеВДанных()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоРегиструКадровыхДанных()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	гхб_РаботникиОрганизацийБазХолдинга.Организация КАК Организация,
	|	гхб_РаботникиОрганизацийБазХолдинга.Сотрудник КАК Сотрудник,
	|	гхб_РаботникиОрганизацийБазХолдинга.Период КАК Период
	|ИЗ
	|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга КАК гхб_РаботникиОрганизацийБазХолдинга
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоРегиструКадровыхДанных()

&НаКлиенте
Процедура РедактироватьКадровыеДанныеВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоКадровымДаннымСотрудниковБазХолдинга(Истина);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияКадровыхДанных", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьКадровыеДанныеВывестиРезультатКлиент()

#КонецОбласти

#Область СверкаСостоянийСотрудников

&НаСервере
Функция ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга(ВернутьТаблицу = Ложь)

	стСостояния = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьСостояниеРаботниковБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стСостояния.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стСостояния.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ОписаниеТиповЧ = ОбщегоНазначения.ОписаниеТипаЧисло(10);
		
	тзДанныеСостояния = Новый ТаблицаЗначений;
	тзДанныеСостояния.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Сотрудникguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСостояния.Колонки.Добавить("СостояниеЗавершения", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСостояния.Колонки.Добавить("ПериодЗавершения", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСостояние Из стСостояния.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСостояние);
		
		Попытка
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСостояние.Состояние];
		Исключение
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		Попытка
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСостояние.СостояниеЗавершения];
		Исключение
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.Период = Дата(Сред(СтрокаСостояние.Период, 1, 4), 
										Сред(СтрокаСостояние.Период, 6, 2),
										Сред(СтрокаСостояние.Период, 9, 2));
		новСтр.ПериодЗавершения = Дата(Сред(СтрокаСостояние.ПериодЗавершения, 1, 4), 
										Сред(СтрокаСостояние.ПериодЗавершения, 6, 2),
										Сред(СтрокаСостояние.ПериодЗавершения, 9, 2));
		
	КонецЦикла;

	Если ВернутьТаблицу Тогда
		Возврат тзДанныеСостояния;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоСостояниямБезСверкиБезСверки(тзДанныеСостояния);
	Иначе
		СверитьДанныеПоСостояниямВывестиРезультат(тзДанныеСостояния);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоСостояниямБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоРегиструСостояний();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокСостояния");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаСостояния");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры

&НаСервере
Процедура СверитьДанныеПоСостояниямВывестиРезультат(тзДанные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Период КАК Период,
	|	Таб.Организация КАК Организация,
	|	Таб.Организацияguid КАК Организацияguid,
	|	Таб.Сотрудник КАК Сотрудник,
	|	Таб.Сотрудникguid КАК Сотрудникguid,
	|	Таб.Состояние КАК Состояние,
	|	Таб.СостояниеЗавершения КАК СостояниеЗавершения,
	|	Таб.ПериодЗавершения КАК ПериодЗавершения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.Состояние КАК Состояние,
	|	втДанные.СостояниеЗавершения КАК СостояниеЗавершения,
	|	втДанные.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка
	|ПОМЕСТИТЬ втСоСсылками
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоСсылками.Период КАК Период,
	|	втСоСсылками.Организация КАК Организация,
	|	втСоСсылками.Организацияguid КАК Организацияguid,
	|	втСоСсылками.Сотрудник КАК Сотрудник,
	|	втСоСсылками.Сотрудникguid КАК Сотрудникguid,
	|	втСоСсылками.Состояние КАК Состояние,
	|	втСоСсылками.СостояниеЗавершения КАК СостояниеЗавершения,
	|	втСоСсылками.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_СостояниеРаботниковОрганизаций.Период КАК ПериодБХ,
	|	гхб_СостояниеРаботниковОрганизаций.БазаХолдинга КАК БазаХолдингаБХ,
	|	гхб_СостояниеРаботниковОрганизаций.Организация КАК ОрганизацияБХ,
	|	гхб_СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершенияБХ,
	|	гхб_СостояниеРаботниковОрганизаций.Сотрудник КАК СотрудникБХ,
	|	гхб_СостояниеРаботниковОрганизаций.Состояние КАК СостояниеБХ,
	|	гхб_СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершенияБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК ОрганизацияguidБХ,
	|	гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга КАК СотрудникguidБХ
	|ИЗ
	|	втСоСсылками КАК втСоСсылками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СостояниеРаботниковОрганизаций КАК гхб_СостояниеРаботниковОрганизаций
	|		ПО втСоСсылками.Период = гхб_СостояниеРаботниковОрганизаций.Период
	|			И втСоСсылками.ОрганизацияСсылка = гхб_СостояниеРаботниковОрганизаций.Организация
	|			И втСоСсылками.СотрудникСсылка = гхб_СостояниеРаботниковОрганизаций.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втСоСсылками.ОрганизацияСсылка = гхб_ОрганизацииБазХолдинга.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втСоСсылками.СотрудникСсылка = гхб_СотрудникиБазХолдинга.Ссылка
	|ГДЕ
	|	гхб_СостояниеРаботниковОрганизаций.БазаХолдинга = &БазаХолдинга
	|	И (втСоСсылками.ПериодЗавершения <> гхб_СостояниеРаботниковОрганизаций.ПериодЗавершения
	|			ИЛИ втСоСсылками.Состояние <> гхб_СостояниеРаботниковОрганизаций.Состояние
	|			ИЛИ втСоСсылками.СостояниеЗавершения <> гхб_СостояниеРаботниковОрганизаций.СостояниеЗавершения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоСсылками.Период КАК Период,
	|	втСоСсылками.Организация КАК Организация,
	|	втСоСсылками.Организацияguid КАК Организацияguid,
	|	втСоСсылками.Сотрудник КАК Сотрудник,
	|	втСоСсылками.Сотрудникguid КАК Сотрудникguid,
	|	втСоСсылками.Состояние КАК Состояние,
	|	втСоСсылками.СостояниеЗавершения КАК СостояниеЗавершения,
	|	""РИБ"" КАК ТипДанных,
	|	втСоСсылками.ПериодЗавершения КАК ПериодЗавершения
	|ИЗ
	|	втСоСсылками КАК втСоСсылками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СостояниеРаботниковОрганизаций КАК гхб_СостояниеРаботниковОрганизаций
	|		ПО втСоСсылками.Период = гхб_СостояниеРаботниковОрганизаций.Период
	|			И втСоСсылками.ОрганизацияСсылка = гхб_СостояниеРаботниковОрганизаций.Организация
	|			И втСоСсылками.СотрудникСсылка = гхб_СостояниеРаботниковОрганизаций.Сотрудник
	|ГДЕ
	|	гхб_СостояниеРаботниковОрганизаций.Период ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_СостояниеРаботниковОрганизаций.Период КАК Период,
	|	гхб_СостояниеРаботниковОрганизаций.Организация КАК Организация,
	|	гхб_СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	гхб_СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	гхб_СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершения,
	|	гхб_СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК Организацияguid,
	|	""ГХБ 2.0"" КАК ТипДанных,
	|	гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга КАК Сотрудникguid
	|ИЗ
	|	РегистрСведений.гхб_СостояниеРаботниковОрганизаций КАК гхб_СостояниеРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоСсылками КАК втСоСсылками
	|		ПО гхб_СостояниеРаботниковОрганизаций.Период = втСоСсылками.Период
	|			И гхб_СостояниеРаботниковОрганизаций.Организация = втСоСсылками.ОрганизацияСсылка
	|			И гхб_СостояниеРаботниковОрганизаций.Сотрудник = втСоСсылками.СотрудникСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО гхб_СостояниеРаботниковОрганизаций.Организация = гхб_ОрганизацииБазХолдинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО гхб_СостояниеРаботниковОрганизаций.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка
	|ГДЕ
	|	втСоСсылками.Период ЕСТЬ NULL
	|	И гхб_СостояниеРаботниковОрганизаций.БазаХолдинга = &БазаХолдинга";
	
	резПакет = Запрос.ВыполнитьПакет();
	
	Выборка = резПакет[2].Выбрать();
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	РасхожденийНет = Истина;
	
	Если Выборка.Количество() > 0 Тогда
		
		РасхожденийНет = Ложь;
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокСостоянияСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаСостоянияСверка");
			обл.Параметры.Заполнить(Выборка);
			Отличия = "";
			
			Если Выборка.ПериодЗавершения <> Выборка.ПериодЗавершенияБХ Тогда
				Отличия = Отличия + "Период завершения" + Символы.ПС;
			КонецЕсли;
			Если Выборка.Состояние <> Выборка.СостояниеБХ Тогда
				Отличия = Отличия + "Состояние" + Символы.ПС;
			КонецЕсли;
			Если Выборка.СостояниеЗавершения <> Выборка.СостояниеЗавершенияБХ Тогда
				Отличия = Отличия + "Состояние завершения" + Символы.ПС;
			КонецЕсли;
			
			обл.Параметры.Отличия = СокрЛП(Отличия);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
	
	КонецЕсли;
		
	Выборка = резПакет[3].Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		РасхожденийНет = Ложь;
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество Нет элемента в базе ГХБ 2: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокСостоянияСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаСостоянияСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Выборка = резПакет[4].Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		РасхожденийНет = Ложь;
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("Шапка");
		
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "количество Нет элемента в РИБ: " + Выборка.Количество();
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ЗаголовокСостоянияСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
			
			обл = макет.ПолучитьОбласть("СтрокаСостоянияСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			
			РезультатСверки.Вывести(обл);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если РасхожденийНет Тогда
		
		обл = макет.ПолучитьОбласть("Шапка");
		текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
		текстШапки = текстШапки + "Расхождений нет.";
		обл.Параметры.текстШапки = текстШапки;
		РезультатСверки.Вывести(обл);
	
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоСостояниямВывестиРезультат()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоРегиструСостояний()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_СостояниеРаботниковОрганизаций.БазаХолдинга КАК БазаХолдинга,
	|	гхб_СостояниеРаботниковОрганизаций.Организация КАК Организация,
	|	гхб_СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	гхб_СостояниеРаботниковОрганизаций.Период КАК Период
	|ИЗ
	|	РегистрСведений.гхб_СостояниеРаботниковОрганизаций КАК гхб_СостояниеРаботниковОрганизаций
	|ГДЕ
	|	гхб_СостояниеРаботниковОрганизаций.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоРегиструСостояний()

&НаКлиенте
Процедура РедактироватьДанныеПоСостояниямСотрудниковВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга(Истина);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияСостоянияСотрудников", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьДанныеПоСостояниямСотрудниковВывестиРезультатКлиент()

#КонецОбласти

#Область СверкаШтатногоРасписания

&НаКлиенте
Процедура РедактироватьШтатноеРасписаниеВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга(Истина);
	тзПозиции = ПолучитьТаблицуНенайденныхПозиций(тзДанные);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга,тзПозиции", тзДанные, Объект.БазаХолдинга, тзПозиции);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияШтатногоРасписания", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьШтатноеРасписаниеВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга(ВернутьТаблицу = Ложь)

	стШтатное = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоШтатномуРасписаниюДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стШтатное.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стШтатное.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзШтатное = Новый ТаблицаЗначений;
	тзШтатное.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	тзШтатное.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизацииguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	тзШтатное.Колонки.Добавить("КритичнаяПозиция", Новый ОписаниеТипов("Булево"));
	тзШтатное.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("БюджетныйКодПозицииРуководителя", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("УровеньДолжности", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_УровниДолжностей"));
	тзШтатное.Колонки.Добавить("ПризнакПозиции", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ПризнакиПозиций"));
	
	соотУровеньДолжности = Новый Соответствие;
	соотУровеньДолжности.Вставить("N", Перечисления.гхб_УровниДолжностей.N);
	соотУровеньДолжности.Вставить("N-1", Перечисления.гхб_УровниДолжностей.N1);
	соотУровеньДолжности.Вставить("N-2", Перечисления.гхб_УровниДолжностей.N2);
	соотУровеньДолжности.Вставить("N-3", Перечисления.гхб_УровниДолжностей.N3);
	соотУровеньДолжности.Вставить("N-4", Перечисления.гхб_УровниДолжностей.N4);
	соотУровеньДолжности.Вставить("N-5", Перечисления.гхб_УровниДолжностей.N5);
	соотУровеньДолжности.Вставить("N-6", Перечисления.гхб_УровниДолжностей.N6);
	соотУровеньДолжности.Вставить("N-7", Перечисления.гхб_УровниДолжностей.N7);
	
	соотПризнакПозиции = Новый Соответствие;
	соотПризнакПозиции.Вставить("Керівник", Перечисления.гхб_ПризнакиПозиций.Руководитель);
	соотПризнакПозиции.Вставить("Співробітник", Перечисления.гхб_ПризнакиПозиций.Сотрудник);
	
	Для каждого СтрокаДолжность Из стШтатное.Результат.result.Данные Цикл
		
		новСтр = тзШтатное.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
		новСтр.КритичнаяПозиция = ?(СтрокаДолжность.КритичнаяПозиция = "Да", Истина, Ложь);
		новСтр.УровеньДолжности = соотУровеньДолжности.Получить(СтрокаДолжность.УровеньДолжности);
		новСтр.ПризнакПозиции = соотПризнакПозиции.Получить(СтрокаДолжность.ПризнакПозиции);
		
		новСтр.Период = Дата(Сред(СтрокаДолжность.Период, 1, 4), 
										Сред(СтрокаДолжность.Период, 6, 2),
										Сред(СтрокаДолжность.Период, 9, 2));
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзШтатное;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоШтатномуРасписаниюБезСверкиБезСверки(тзШтатное);
	Иначе
		СверитьДанныеПоШтатномуРасписаниюВывестиРезультат(тзШтатное);
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоШтатномуРасписаниюБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоРегиструШтатноеРасписание();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокШтатноеРасписаниеСверкаВсе");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаШтатноеРасписаниеСверкаВсе");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоШтатномуРасписаниюБезСверкиБезСверки()

&НаСервере
Процедура СверитьДанныеПоШтатномуРасписаниюВывестиРезультат(тзДанные)
	
	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНенайденныхПозиций();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество ненайденных позиций: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокПозиции");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаПозиции");
		обл.Параметры.Заполнить(Выборка);
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхШтатноеРасписание();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокШтатноеРасписаниеСверка");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаШтатноеРасписаниеСверка");
		обл.Параметры.Заполнить(Выборка);
		
		Отличия = "";
		
		Если Выборка.дельтаКритическаяПозиция Тогда
			Отличия = Отличия + "Критическая позиция" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаКоличествоСтавок Тогда
			Отличия = Отличия + " Количество ставок" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаБК Тогда
			Отличия = Отличия + "Бюджетный код" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаБКР Тогда
			Отличия = Отличия + "Бюджетный код руководителя" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаУровеньДолжности Тогда
			Отличия = Отличия + "Уровень должности" + Символы.ПС;
		КонецЕсли;
		Если Выборка.дельтаПризнакПозиции Тогда
			Отличия = Отличия + "Признак позиции";
		КонецЕсли;
		
		обл.Параметры.Отличия = Отличия;
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхГХБШтатноеРасписание();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокШтатноеРасписаниеСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаШтатноеРасписаниеСверкаНетДанных");
		обл.Параметры.Заполнить(Выборка);
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокШтатноеРасписаниеСверкаНетДанных");
		РезультатСверки.Вывести(обл);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаШтатноеРасписаниеСверкаБХ");
		обл.Параметры.Заполнить(Выборка);
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеПоШтатномуРасписаниюБезСверкиБезСверки()

&НаСервере
Функция ПолучитьТекстЗапросаРазличиеДанныхШтатноеРасписание()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Период КАК Период,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	таб.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.КоличествоСтавок КАК КоличествоСтавок,
	|	таб.КритичнаяПозиция КАК КритичнаяПозиция,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	таб.УровеньДолжности КАК УровеньДолжности,
	|	таб.ПризнакПозиции КАК ПризнакПозиции
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втДанные.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.КоличествоСтавок КАК КоличествоСтавок,
	|	втДанные.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втДанные.УровеньДолжности КАК УровеньДолжности,
	|	втДанные.ПризнакПозиции КАК ПризнакПозиции,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК ОрганизацияguidБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга КАК ПодразделениеОрганизацииguidБХ,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга КАК ПозицияguidБХ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.ПодразделениеОрганизацииguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Период КАК Период,
	|	втКрайняя.Организация КАК Организация,
	|	втКрайняя.Организацияguid КАК Организацияguid,
	|	втКрайняя.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втКрайняя.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втКрайняя.Позиция КАК Позиция,
	|	втКрайняя.Позицияguid КАК Позицияguid,
	|	втКрайняя.КоличествоСтавок КАК КоличествоСтавок,
	|	втКрайняя.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втКрайняя.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втКрайняя.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втКрайняя.УровеньДолжности КАК УровеньДолжности,
	|	втКрайняя.ПризнакПозиции КАК ПризнакПозиции,
	|	втКрайняя.ОрганизацияСсылка КАК ОрганизацияСсылка,
	|	втКрайняя.ПодразделениеСсылка КАК ПодразделениеСсылка,
	|	втКрайняя.ПозицияСсылка КАК ПозицияСсылка,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Период КАК ПериодБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Организация КАК ОрганизацияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизацииБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Позиция КАК ПозицияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КоличествоСтавок КАК КоличествоСтавокБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КритичнаяПозиция КАК КритичнаяПозицияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозицииБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителяБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.УровеньДолжности КАК УровеньДолжностиБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПризнакПозиции КАК ПризнакПозицииБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	ВЫБОР
	|		КОГДА гхб_ШтатноеРасписаниеБазХолдинга.КритичнаяПозиция <> втКрайняя.КритичнаяПозиция
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаКритическаяПозиция,
	|	ВЫБОР
	|		КОГДА гхб_ШтатноеРасписаниеБазХолдинга.КоличествоСтавок <> втКрайняя.КоличествоСтавок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаКоличествоСтавок,
	|	ВЫБОР
	|		КОГДА втКрайняя.БюджетныйКодПозиции <> гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозиции
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаБК,
	|	ВЫБОР
	|		КОГДА гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозицииРуководителя <> втКрайняя.БюджетныйКодПозицииРуководителя
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаБКР,
	|	ВЫБОР
	|		КОГДА гхб_ШтатноеРасписаниеБазХолдинга.УровеньДолжности <> втКрайняя.УровеньДолжности
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаУровеньДолжности,
	|	ВЫБОР
	|		КОГДА гхб_ШтатноеРасписаниеБазХолдинга.ПризнакПозиции <> втКрайняя.ПризнакПозиции
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК дельтаПризнакПозиции,
	|	втКрайняя.ОрганизацияguidБХ КАК ОрганизацияguidБХ,
	|	втКрайняя.ПодразделениеОрганизацииguidБХ КАК ПодразделениеОрганизацииguidБХ,
	|	втКрайняя.ПозицияguidБХ КАК ПозицияguidБХ
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга КАК гхб_ШтатноеРасписаниеБазХолдинга
	|		ПО втКрайняя.Период = гхб_ШтатноеРасписаниеБазХолдинга.Период
	|			И втКрайняя.ОрганизацияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Организация
	|			И втКрайняя.ПодразделениеСсылка = гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации
	|			И втКрайняя.ПозицияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Позиция
	|			И (гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(гхб_ШтатноеРасписаниеБазХолдинга.КритичнаяПозиция <> втКрайняя.КритичнаяПозиция
	|			ИЛИ гхб_ШтатноеРасписаниеБазХолдинга.КоличествоСтавок <> втКрайняя.КоличествоСтавок
	|			ИЛИ втКрайняя.БюджетныйКодПозиции <> гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозиции
	|			ИЛИ гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозицииРуководителя <> втКрайняя.БюджетныйКодПозицииРуководителя
	|			ИЛИ гхб_ШтатноеРасписаниеБазХолдинга.УровеньДолжности <> втКрайняя.УровеньДолжности
	|			ИЛИ гхб_ШтатноеРасписаниеБазХолдинга.ПризнакПозиции <> втКрайняя.ПризнакПозиции)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхГХБШтатноеРасписание()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхГХБШтатноеРасписание()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Период КАК Период,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	таб.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.КоличествоСтавок КАК КоличествоСтавок,
	|	таб.КритичнаяПозиция КАК КритичнаяПозиция,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	таб.УровеньДолжности КАК УровеньДолжности,
	|	таб.ПризнакПозиции КАК ПризнакПозиции
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втДанные.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.КоличествоСтавок КАК КоличествоСтавок,
	|	втДанные.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втДанные.УровеньДолжности КАК УровеньДолжности,
	|	втДанные.ПризнакПозиции КАК ПризнакПозиции,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК ОрганизацияguidБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга КАК ПодразделениеОрганизацииguidБХ,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга КАК ПозицияguidБХ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.ПодразделениеОрганизацииguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Период КАК Период,
	|	втКрайняя.Организация КАК Организация,
	|	втКрайняя.Организацияguid КАК Организацияguid,
	|	втКрайняя.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втКрайняя.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втКрайняя.Позиция КАК Позиция,
	|	втКрайняя.Позицияguid КАК Позицияguid,
	|	втКрайняя.КоличествоСтавок КАК КоличествоСтавок,
	|	втКрайняя.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втКрайняя.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втКрайняя.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втКрайняя.УровеньДолжности КАК УровеньДолжности,
	|	втКрайняя.ПризнакПозиции КАК ПризнакПозиции,
	|	втКрайняя.ОрганизацияСсылка КАК ОрганизацияСсылка,
	|	втКрайняя.ПодразделениеСсылка КАК ПодразделениеСсылка,
	|	втКрайняя.ПозицияСсылка КАК ПозицияСсылка,
	|	""РИБ"" КАК ТипДанных
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга КАК гхб_ШтатноеРасписаниеБазХолдинга
	|		ПО втКрайняя.Период = гхб_ШтатноеРасписаниеБазХолдинга.Период
	|			И втКрайняя.ОрганизацияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Организация
	|			И втКрайняя.ПодразделениеСсылка = гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации
	|			И втКрайняя.ПозицияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Позиция
	|			И (гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ШтатноеРасписаниеБазХолдинга.Период ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхШтатноеРасписание()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Период КАК Период,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	таб.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.КоличествоСтавок КАК КоличествоСтавок,
	|	таб.КритичнаяПозиция КАК КритичнаяПозиция,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	таб.УровеньДолжности КАК УровеньДолжности,
	|	таб.ПризнакПозиции КАК ПризнакПозиции
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втДанные.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.КоличествоСтавок КАК КоличествоСтавок,
	|	втДанные.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втДанные.УровеньДолжности КАК УровеньДолжности,
	|	втДанные.ПризнакПозиции КАК ПризнакПозиции,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК ОрганизацияguidБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга КАК ПодразделениеОрганизацииguidБХ,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга КАК ПозицияguidБХ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.ПодразделениеОрганизацииguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ШтатноеРасписаниеБазХолдинга.Период КАК ПериодБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Организация КАК ОрганизацияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизацииБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Позиция КАК ПозицияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КоличествоСтавок КАК КоличествоСтавокБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КритичнаяПозиция КАК КритичнаяПозицияБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозицииБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителяБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.УровеньДолжности КАК УровеньДолжностиБХ,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПризнакПозиции КАК ПризнакПозицииБХ,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втКрайняя.ОрганизацияguidБХ КАК ОрганизацияguidБХ,
	|	втКрайняя.ПодразделениеОрганизацииguidБХ КАК ПодразделениеОрганизацииguidБХ,
	|	втКрайняя.ПозицияguidБХ КАК ПозицияguidБХ
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга КАК гхб_ШтатноеРасписаниеБазХолдинга
	|		ПО втКрайняя.Период = гхб_ШтатноеРасписаниеБазХолдинга.Период
	|			И втКрайняя.ОрганизацияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Организация
	|			И втКрайняя.ПодразделениеСсылка = гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации
	|			И втКрайняя.ПозицияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Позиция
	|			И (гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втКрайняя.Период ЕСТЬ NULL
	|	И гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоРегиструШтатноеРасписание()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Организация КАК Организация,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Период КАК Период
	|ИЗ
	|	РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга КАК гхб_ШтатноеРасписаниеБазХолдинга
	|ГДЕ
	|	гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоРегиструШтатноеРасписание()

&НаСервере
Функция ПолучитьТекстЗапросаНенайденныхПозиций()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанные.Позиция,
	|	втДанные.Позицияguid
	|
	|УПОРЯДОЧИТЬ ПО
	|	Позиция,
	|	Позицияguid";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНенайденныхПозиций()

&НаСервере
Функция ПолучитьТаблицуНенайденныхПозиций(тзДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНенайденныхПозиций();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуНенауденныхПозиций()

#КонецОбласти

#Область СверкаДоговораГПХ

&НаКлиенте
Процедура РедактироватьДоговораГПХВывестиРезультатКлиент()
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияДоговоровГПХ", ПолучитьДанныеПоДоговораГПХБазХолдинга(Истина), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры // РедактироватьДоговораГПХВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеПоДоговораГПХБазХолдинга(ВернутьТаблицу = Ложь)

	стДоговораГПХ = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоДоговорамГПХБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стДоговораГПХ.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стДоговораГПХ.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	тзДивизионы = ПолучитьДивизионы();
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДоговораГПХ = Новый ТаблицаЗначений;
	тзДоговораГПХ.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("Сотрудникguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ФизЛицоguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДокументСсылка", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДокументСсылкаguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	тзДоговораГПХ.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	тзДоговораГПХ.Колонки.Добавить("Изменение", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("Дивизион", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("Дивизионguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДивизионКод", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДивизионРодитель", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДивизионРодительguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДивизионРодительКод", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ФактическийРуководитель", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ФактическийРуководительguid", ОписаниеТиповС);
	тзДоговораГПХ.Колонки.Добавить("ДивизионСсылка", Новый ОписаниеТипов("СправочникСсылка.гхб_Дивизионы"));
	
	тзДанныеДолжности = Новый ТаблицаЗначений;
	тзДанныеДолжности.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("ЦФОguid", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("Должностьguid", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("ДокументСсылкаguid", ОписаниеТиповС);
	
	Для каждого СтрокаДоговор Из стДоговораГПХ.Результат.result.Данные Цикл
		
		новСтр = тзДоговораГПХ.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДоговор);
		
		новСтр.ДатаНачала = Дата(Сред(СтрокаДоговор.ДатаНачала, 1, 4), 
										Сред(СтрокаДоговор.ДатаНачала, 6, 2),
										Сред(СтрокаДоговор.ДатаНачала, 9, 2));
		новСтр.ДатаОкончания = Дата(Сред(СтрокаДоговор.ДатаОкончания, 1, 4), 
										Сред(СтрокаДоговор.ДатаОкончания, 6, 2),
										Сред(СтрокаДоговор.ДатаОкончания, 9, 2));
		
		мНайденое = тзДивизионы.НайтиСтроки(Новый Структура("Код,КодРодитель", СтрокаДоговор.ДивизионКод, СтрокаДоговор.ДивизионРодительКод));
		
		Если мНайденое.Количество() > 0 Тогда
			новСтр.ДивизионСсылка = мНайденое[0].Дивизион;
		КонецЕсли;
		
		Для каждого СтрокаУсловияРаботы Из СтрокаДоговор.УсловияДоговора Цикл
		
			новСтрУсловия = тзДанныеДолжности.Добавить();
			ЗаполнитьЗначенияСвойств(новСтрУсловия, СтрокаУсловияРаботы);
			новСтрУсловия.ДокументСсылкаguid = СтрокаДоговор.ДокументСсылкаguid;
			
		КонецЦикла;
		
	КонецЦикла;
	
	стДанныеПоТабЧастям = ДозаполнитьТалицуДолжностей(тзДанныеДолжности);
	тзДанныеДолжностиЗаполненная = стДанныеПоТабЧастям.тзДанныеДолжности;
	тзДоговораОшибкиПоТабЧасти = стДанныеПоТабЧастям.тзДоговораОшибкиПоТабЧасти;
	
	Если ВернутьТаблицу Тогда
		Возврат Новый Структура("тзДоговораГПХ,тзДанныеДолжности,тзДоговораОшибкиПоТабЧасти,БазаХолдинга", тзДоговораГПХ, тзДанныеДолжности, тзДоговораОшибкиПоТабЧасти, Объект.БазаХолдинга);
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоДоговорамГПХБезСверки(тзДоговораГПХ, тзДанныеДолжности);
	Иначе
		СверитьДанныеПоДоговорамГПХВывестиРезультат(тзДоговораГПХ, тзДанныеДолжности, тзДоговораОшибкиПоТабЧасти);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоДоговораГПХБазХолдинга()

&НаСервере
Функция ДозаполнитьТалицуДолжностей(тзДанныеДолжности)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанныеДолжности);
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ЦФО КАК ЦФО,
	|	таб.ЦФОguid КАК ЦФОguid,
	|	таб.Должность КАК Должность,
	|	таб.Должностьguid КАК Должностьguid,
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ЦФО КАК ЦФО,
	|	втДанные.ЦФОguid КАК ЦФОguid,
	|	втДанные.Должность КАК Должность,
	|	втДанные.Должностьguid КАК Должностьguid,
	|	втДанные.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	ЕСТЬNULL(гхб_ЦФО.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ЦФО.ПустаяСсылка)) КАК ЦФОСсылка,
	|	ЕСТЬNULL(гхб_ДолжностиГПХФОП.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ДолжностиГПХФОП.ПустаяСсылка)) КАК ДолжностьСсылка,
	|	ЕСТЬNULL(гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка, ЗНАЧЕНИЕ(Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)) КАК ДокументСсылка
	|ПОМЕСТИТЬ втДляПоискаНестыковок
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|		ПО втДанные.Должностьguid = гхб_ДолжностиГПХФОП.GUIDБазыХолдинга
	|			И (гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|			И (гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДляПоискаНестыковок.ДокументСсылка КАК ДокументСсылка
	|ПОМЕСТИТЬ втДокументыНестыковок
	|ИЗ
	|	втДляПоискаНестыковок КАК втДляПоискаНестыковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом.УсловияДоговора КАК гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора
	|		ПО втДляПоискаНестыковок.ЦФОСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.ЦФО
	|			И втДляПоискаНестыковок.ДолжностьСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.Должность
	|			И втДляПоискаНестыковок.ДокументСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.Ссылка
	|ГДЕ
	|	(гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.ЦФО ЕСТЬ NULL
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.Должность ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДляПоискаНестыковок.ДокументСсылка
	|ИЗ
	|	втДляПоискаНестыковок КАК втДляПоискаНестыковок
	|		ПРАВОЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом.УсловияДоговора КАК гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора
	|		ПО втДляПоискаНестыковок.ЦФОСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.ЦФО
	|			И втДляПоискаНестыковок.ДолжностьСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.Должность
	|			И втДляПоискаНестыковок.ДокументСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицомУсловияДоговора.Ссылка
	|ГДЕ
	|	(втДляПоискаНестыковок.ЦФО ЕСТЬ NULL
	|			ИЛИ втДляПоискаНестыковок.Должность ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыНестыковок.ДокументСсылка КАК ДокументСсылка,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник КАК Сотрудник,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачала,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончания,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель КАК ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион КАК Дивизион,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК ОрганизацияБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник КАК СотрудникБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачалаБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончанияБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель КАК ФактическийРуководительБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион КАК ДивизионБХ
	|ИЗ
	|	втДокументыНестыковок КАК втДокументыНестыковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДокументыНестыковок.ДокументСсылка = гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДокументыНестыковок.ДокументСсылка,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДляПоискаНестыковок.ЦФО КАК ЦФО,
	|	втДляПоискаНестыковок.ЦФОguid КАК ЦФОguid,
	|	втДляПоискаНестыковок.Должность КАК Должность,
	|	втДляПоискаНестыковок.Должностьguid КАК Должностьguid,
	|	втДляПоискаНестыковок.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втДляПоискаНестыковок.ЦФОСсылка КАК ЦФОСсылка,
	|	втДляПоискаНестыковок.ДолжностьСсылка КАК ДолжностьСсылка,
	|	втДляПоискаНестыковок.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	втДляПоискаНестыковок КАК втДляПоискаНестыковок";
	
	резПакет = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("тзДанныеДолжности,тзДоговораОшибкиПоТабЧасти", резПакет[4].Выгрузить(), резПакет[3].Выгрузить());
	
КонецФункции // ДозаполнитьТалицуДолжностей()

&НаСервере
Функция ПолучитьДивизионы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гхб_Дивизионы.Ссылка КАК Дивизион,
	|	гхб_Дивизионы.Код КАК Код,
	|	гхб_ДивизионыРодители.Родитель КАК Родитель,
	|	гхб_ДивизионыРодители.Код КАК КодРодитель
	|ИЗ
	|	Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_ДивизионыРодители
	|		ПО гхб_Дивизионы.Родитель = гхб_ДивизионыРодители.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДивизионы()

&НаСервере
Процедура ВывестиДанныеПоДоговорамГПХБезСверки(тзДоговораГПХ, тзДанныеДолжности)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДоговораГПХ.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоДокументамДоговораГПХ();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокДоговораГПХ");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДоговораГПХ Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаДоговораГПХ");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
		
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораТабЧастьГПХ");
		РезультатСверки.Вывести(обл);
		
		мНайденное = тзДанныеДолжности.НайтиСтроки(Новый Структура("ДокументСсылкаguid", СтрокаДанные.ДокументСсылкаguid));
		
		Для каждого СтрокаТабЧасть Из мНайденное Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораТабЧастьГПХ");
			обл.Параметры.Заполнить(СтрокаТабЧасть);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
		обл = макет.ПолучитьОбласть("ПустаяСтрока");
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоДоговорамГПХБезСверки()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоДокументамДоговораГПХ()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоДокументамДоговораГПХ()

&НаСервере
Процедура СверитьДанныеПоДоговорамГПХВывестиРезультат(тзДоговораГПХ, тзДанныеДолжности, тзДоговораОшибкиПоТабЧасти)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДоговораГПХ);
	Запрос.УстановитьПараметр("ДанныеТабличныхЧастей", тзДоговораОшибкиПоТабЧасти);
	резПакет = Запрос.ВыполнитьПакет();
	Выборка = резПакет[3].Выбрать();
	ВыборкаТЧ = резПакет[4].Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + (Выборка.Количество() + ВыборкаТЧ.Количество());
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораГПХСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораГПХСверка");
			обл.Параметры.Заполнить(Выборка);
			
			Отличия = "";
			
			Если Выборка.ФактическийРуководительБХ <> Выборка.ФактическийРуководитель Тогда
				Отличия = Отличия + "Руководитель" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ДатаНачалаБХ <> Выборка.ДатаНачала Тогда
				Отличия = Отличия + "Дата начала" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ДатаОкончанияБХ <> Выборка.ДатаОкончания Тогда
				Отличия = Отличия + "Дата окончания" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ДивизионБХ <> Выборка.Дивизион Тогда
				Отличия = Отличия + "Дивизион" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.СотрудникБХ <> Выборка.Сотрудник Тогда
				Отличия = Отличия + "Сотрудник" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ОрганизацияБХ <> Выборка.Организация Тогда
				Отличия = Отличия + "Организация" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.ЕстьОшибкиТабличнойЧасти Тогда
				Отличия = Отличия + "Таб. часть" + Символы.ПС;
			КонецЕсли;
			
			обл.Параметры.Отличия = Отличия;
			
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ВыборкаТЧ.Следующий() Цикл
		
		обл = макет.ПолучитьОбласть("СтрокаДоговораГПХСверка");
		обл.Параметры.Заполнить(ВыборкаТЧ);
		обл.Параметры.Отличия = "Таб. часть";
		
		РезультатСверки.Вывести(обл);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхДанныхДоговораГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДоговораГПХ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораГПХ");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораГПХ");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
			
			мНайденное = тзДанныеДолжности.НайтиСтроки(Новый Структура("ДокументСсылкаguid", Выборка.ДокументСсылкаguid));
			
			обл = макет.ПолучитьОбласть("ПустаяСтрока");
			РезультатСверки.Вывести(обл);
			
			обл = макет.ПолучитьОбласть("ЗаголовокДоговораТабЧастьГПХ");
			РезультатСверки.Вывести(обл);
			
			Для каждого СтрокаНайденное Из мНайденное Цикл
			
				обл = макет.ПолучитьОбласть("СтрокаДоговораТабЧастьГПХ");
				обл.Параметры.Заполнить(СтрокаНайденное);
				РезультатСверки.Вывести(обл);
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБДанныхДоговораГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДоговораГПХ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораГПХ");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораГПХ");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
			
			ВыборкаУсловияДоговора = Выборка.УсловияДоговора.Выбрать();
			
			обл = макет.ПолучитьОбласть("ПустаяСтрока");
			
			обл = макет.ПолучитьОбласть("ЗаголовокДоговораТабЧастьГПХ");
			РезультатСверки.Вывести(обл);
			
			Пока ВыборкаУсловияДоговора.Следующий() Цикл
			
				обл = макет.ПолучитьОбласть("СтрокаДоговораТабЧастьГПХ");
				обл.Параметры.Заполнить(ВыборкаУсловияДоговора);
				РезультатСверки.Вывести(обл);
			
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоДоговорамГПХВывестиРезультат()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ФизЛицоguid КАК ФизЛицоguid,
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.Дивизион КАК Дивизион,
	|	таб.ДивизионСсылка КАК ДивизионСсылка,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионРодитель КАК ДивизионРодитель,
	|	таб.ДивизионРодительКод КАК ДивизионРодительКод,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.ФактическийРуководительguid КАК ФактическийРуководительguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.Организация КАК Организация,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.Дивизион КАК Дивизион,
	|	таб.Организация КАК ОрганизацияБХ,
	|	таб.Сотрудник КАК СотрудникБХ,
	|	таб.ДатаНачала КАК ДатаНачалаБХ,
	|	таб.ДатаОкончания КАК ДатаОкончанияБХ,
	|	таб.ТипДанных КАК ТипДанных,
	|	таб.ТипДанныхБХ КАК ТипДанныхБХ,
	|	таб.ФактическийРуководитель КАК ФактическийРуководительБХ,
	|	таб.Дивизион КАК ДивизионБХ
	|ПОМЕСТИТЬ втДанныеТабличныхЧастей
	|ИЗ
	|	&ДанныеТабличныхЧастей КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втДанные.Организация КАК ОрганизацияСтрока,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.Сотрудник КАК СотрудникСтрока,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ФизЛицоguid КАК ФизЛицоguid,
	|	втДанные.ДокументСсылка КАК ДокументСсылка,
	|	втДанные.Дивизион КАК Дивизион,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионРодитель КАК ДивизионРодитель,
	|	втДанные.ДивизионРодительКод КАК ДивизионРодительКод,
	|	втДанные.ДатаНачала КАК ДатаНачала,
	|	втДанные.ДатаОкончания КАК ДатаОкончания,
	|	втДанные.ФактическийРуководитель КАК ФактическийРуководительСтрока,
	|	втДанные.ФактическийРуководительguid КАК ФактическийРуководительguid,
	|	втДанные.ДивизионСсылка КАК ДивизионСсылка,
	|	ЕСТЬNULL(гхб_ОрганизацииБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ОрганизацииБазХолдинга.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(гхб_СотрудникиБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_СотрудникиБазХолдинга.ПустаяСсылка)) КАК Сотрудник,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	ЕСТЬNULL(гхб_ФизическиеЛицаБазХолдинга.Ссылка, ЗНАЧЕНИЕ(Справочник.гхб_ФизическиеЛицаБазХолдинга.ПустаяСсылка)) КАК ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачалаБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончанияБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион КАК ДивизионБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК ДоговорСсылка,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель КАК ФактическийРуководительБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК ОрганизацияБХ,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник КАК СотрудникБХ,
	|	ВЫБОР
	|		КОГДА втДанныеТабличныхЧастей.ДокументСсылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиТабличнойЧасти
	|ПОМЕСТИТЬ втОшибкиШапки
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|			ЛЕВОЕ СОЕДИНЕНИЕ втДанныеТабличныхЧастей КАК втДанныеТабличныхЧастей
	|			ПО гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = втДанныеТабличныхЧастей.ДокументСсылка
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФактическийРуководительguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация <> гхб_ОрганизацииБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник <> гхб_СотрудникиБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель <> гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <> втДанные.ДатаНачала
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания <> втДанные.ДатаОкончания
	|			ИЛИ гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион <> втДанные.ДивизионСсылка)
	|	И гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОшибкиШапки.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втОшибкиШапки.ОрганизацияСтрока КАК ОрганизацияСтрока,
	|	втОшибкиШапки.Организацияguid КАК Организацияguid,
	|	втОшибкиШапки.Сотрудникguid КАК Сотрудникguid,
	|	втОшибкиШапки.СотрудникСтрока КАК СотрудникСтрока,
	|	втОшибкиШапки.ФизЛицо КАК ФизЛицо,
	|	втОшибкиШапки.ФизЛицоguid КАК ФизЛицоguid,
	|	втОшибкиШапки.ДокументСсылка КАК ДокументСсылка,
	|	втОшибкиШапки.Дивизион КАК Дивизион,
	|	втОшибкиШапки.ДивизионКод КАК ДивизионКод,
	|	втОшибкиШапки.ДивизионРодитель КАК ДивизионРодитель,
	|	втОшибкиШапки.ДивизионРодительКод КАК ДивизионРодительКод,
	|	втОшибкиШапки.ДатаНачала КАК ДатаНачала,
	|	втОшибкиШапки.ДатаОкончания КАК ДатаОкончания,
	|	втОшибкиШапки.ФактическийРуководительСтрока КАК ФактическийРуководительСтрока,
	|	втОшибкиШапки.ФактическийРуководительguid КАК ФактическийРуководительguid,
	|	втОшибкиШапки.ДивизионСсылка КАК ДивизионСсылка,
	|	втОшибкиШапки.Организация КАК Организация,
	|	втОшибкиШапки.Сотрудник КАК Сотрудник,
	|	втОшибкиШапки.ТипДанных КАК ТипДанных,
	|	втОшибкиШапки.ТипДанныхБХ КАК ТипДанныхБХ,
	|	втОшибкиШапки.ФактическийРуководитель КАК ФактическийРуководитель,
	|	втОшибкиШапки.ДатаНачалаБХ КАК ДатаНачалаБХ,
	|	втОшибкиШапки.ДатаОкончанияБХ КАК ДатаОкончанияБХ,
	|	втОшибкиШапки.ДивизионБХ КАК ДивизионБХ,
	|	втОшибкиШапки.ДоговорСсылка КАК ДоговорСсылка,
	|	втОшибкиШапки.ФактическийРуководительБХ КАК ФактическийРуководительБХ,
	|	втОшибкиШапки.ОрганизацияБХ КАК ОрганизацияБХ,
	|	втОшибкиШапки.СотрудникБХ КАК СотрудникБХ,
	|	втОшибкиШапки.ЕстьОшибкиТабличнойЧасти КАК ЕстьОшибкиТабличнойЧасти
	|ИЗ
	|	втОшибкиШапки КАК втОшибкиШапки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТабличныхЧастей.ДокументСсылка КАК ДокументСсылка,
	|	втДанныеТабличныхЧастей.Организация КАК Организация,
	|	втДанныеТабличныхЧастей.Сотрудник КАК Сотрудник,
	|	втДанныеТабличныхЧастей.ДатаНачала КАК ДатаНачала,
	|	втДанныеТабличныхЧастей.ДатаОкончания КАК ДатаОкончания,
	|	втДанныеТабличныхЧастей.ФактическийРуководитель КАК ФактическийРуководитель,
	|	втДанныеТабличныхЧастей.Дивизион КАК Дивизион,
	|	втДанныеТабличныхЧастей.ОрганизацияБХ КАК ОрганизацияБХ,
	|	втДанныеТабличныхЧастей.СотрудникБХ КАК СотрудникБХ,
	|	втДанныеТабличныхЧастей.ДатаНачалаБХ КАК ДатаНачалаБХ,
	|	втДанныеТабличныхЧастей.ДатаОкончанияБХ КАК ДатаОкончанияБХ,
	|	втДанныеТабличныхЧастей.ТипДанных КАК ТипДанных,
	|	втДанныеТабличныхЧастей.ТипДанныхБХ КАК ТипДанныхБХ,
	|	втДанныеТабличныхЧастей.ФактическийРуководительБХ КАК ФактическийРуководительБХ,
	|	втДанныеТабличныхЧастей.ДивизионБХ КАК ДивизионБХ
	|ИЗ
	|	втДанныеТабличныхЧастей КАК втДанныеТабличныхЧастей
	|ГДЕ
	|	НЕ втДанныеТабличныхЧастей.ДокументСсылка В
	|				(ВЫБРАТЬ
	|					втОшибкиШапки.ДоговорСсылка
	|				ИЗ
	|					втОшибкиШапки КАК втОшибкиШапки)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхДанныхДоговораГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	таб.Организация КАК Организация,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.ФактическийРуководитель КАК ФактическийРуководитель,
	|	таб.Дивизион КАК Дивизион
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.ДатаНачала КАК ДатаНачала,
	|	втДанные.ДатаОкончания КАК ДатаОкончания,
	|	втДанные.ФактическийРуководитель КАК ФактическийРуководитель,
	|	втДанные.Дивизион КАК Дивизион
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|ГДЕ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка ЕСТЬ NULL
	|	И гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДоговораГПХ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхРИБДанныхДоговораГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник КАК Сотрудник,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачала,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончания,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ФактическийРуководитель КАК ФактическийРуководитель,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Дивизион КАК Дивизион,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.УсловияДоговора.(
	|		ЦФО КАК ЦФО,
	|		Должность КАК Должность
	|	) КАК УсловияДоговора
	|ИЗ
	|	Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга = втДанные.ДокументСсылкаguid
	|ГДЕ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга
	|	И втДанные.ДокументСсылкаguid ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБДанныхДоговораГПХ()

#КонецОбласти

#Область СверкаДолжностиГПХ

&НаКлиенте
Процедура РедактироватьДолжностиГПХВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоДолжностямГПХБазХолдинга(Истина);
	
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияДолжностейГПХ", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьДоговораГПХВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеПоДолжностямГПХБазХолдинга(ВернутьТаблицу = Ложь)

	стДолжностиГПХ = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоДолжностямГПХФОПИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стДолжностиГПХ.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стДолжностиГПХ.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДолжностиГПХ = Новый ТаблицаЗначений;
	тзДолжностиГПХ.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДолжностиГПХ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДолжностиГПХ.Колонки.Добавить("guid", ОписаниеТиповС);
	
	Для каждого СтрокаДолжностиГПХ Из стДолжностиГПХ.Результат.result.Данные Цикл
		
		новСтр = тзДолжностиГПХ.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжностиГПХ);
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДолжностиГПХ;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоДолжностямГПХБезСверки(тзДолжностиГПХ);
	Иначе
		СверитьДанныеПоДолжностямГПХВывестиРезультат(тзДолжностиГПХ);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоДоговораГПХБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоДолжностямГПХБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоСправочникуДолжностейГПХ();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокДолжностиГПХ");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаДолжностиГПХ");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоДолжностямГПХБезСверки()

&НаСервере
Процедура СверитьДанныеПоДолжностямГПХВывестиРезультат(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхДолжностиГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиГПХСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДолжностиГПХСверка");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхДолжностиГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиГПХ");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДолжностиГПХ");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБДолжностиГПХ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДолжностиГПХ");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДолжностиГПХ");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоДолжностямГПХВывестиРезультат()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхДолжностиГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДолжностиГПХФОП.Ссылка КАК Должность,
	|	гхб_ДолжностиГПХФОП.Наименование КАК НаименованиеБХ,
	|	гхб_ДолжностиГПХФОП.GUIDБазыХолдинга КАК guidБХ,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	гхб_ДолжностиГПХФОП.ПометкаУдаления КАК ПометкаУдаленияБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|		ПО втДанные.guid = гхб_ДолжностиГПХФОП.GUIDБазыХолдинга
	|			И (гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_ДолжностиГПХФОП.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ДолжностиГПХФОП.ПометкаУдаления
	|			ИЛИ втДанные.guid <> гхб_ДолжностиГПХФОП.GUIDБазыХолдинга)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДолжностиГПХ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхДолжностиГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|		ПО втДанные.guid = гхб_ДолжностиГПХФОП.GUIDБазыХолдинга
	|			И (гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДолжностиГПХФОП.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДолжностиГПХ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхРИБДолжностиГПХ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	втДанные КАК втДанные
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|		ПО втДанные.guid = гхб_ДолжностиГПХФОП.GUIDБазыХолдинга
	|			И (гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.guid ЕСТЬ NULL
	|	И гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДолжностиГПХ()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоСправочникуДолжностейГПХ()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ДолжностиГПХФОП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ДолжностиГПХФОП КАК гхб_ДолжностиГПХФОП
	|ГДЕ
	|	НЕ гхб_ДолжностиГПХФОП.ЭтоГруппа
	|	И гхб_ДолжностиГПХФОП.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоСправочникуДолжностейГПХ()

#КонецОбласти

#Область СверкаКонтактнойИнформации

&НаКлиенте
Процедура РедактироватьКИВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоКИБазХолдинга(Истина);
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияКИ", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьКИВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеПоКИБазХолдинга(ВернутьТаблицу = Ложь)

	стКИ = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоКонтактнойИнформацииИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стКИ.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стКИ.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКонтактныеДанные = Новый ТаблицаЗначений;
	тзКонтактныеДанные.Колонки.Добавить("Представление", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Тип", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Вид", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("guid", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	тзКонтактныеДанные.Колонки.Добавить("ВидСсылка", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	
	соотВид = Новый Соответствие;
	соотВид.Вставить("Внутренний телефон", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефон);
	соотВид.Вставить("Служебный адрес электронной почты пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	соотВид.Вставить("Мобильный телефон сотрудника", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Телефон мобільный", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Служебный телефон пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя);
	соотВид.Вставить("Телефон физ. лица", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	соотВид.Вставить("Адрес по прописке", Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизЛица);
	соотВид.Вставить("Адрес проживания", Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица);
	соотВид.Вставить("Адрес информирования", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица);
	
	Для каждого СтрокаКонтактныеДанные Из стКИ.Результат.result.Данные Цикл
		
		новСтр = тзКонтактныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКонтактныеДанные);
		новСтр.ТипСсылка = Перечисления.ТипыКонтактнойИнформации[СтрокаКонтактныеДанные.ТипИмя];
		новСтр.ВидСсылка = соотВид.Получить(СтрокаКонтактныеДанные.Вид);
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзКонтактныеДанные;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоКИБезСверкиБезСверки(тзКонтактныеДанные);
	Иначе
		СверитьДанныеПоКИВывестиРезультат(тзКонтактныеДанные);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоКИБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоКИБезСверкиБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоРегиструКИ();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокКИСверкаВсе");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаКИСверкаВсе");
		обл.Параметры.Заполнить(СтрокаДанные);
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;


КонецПроцедуры // ВывестиДанныеПоКИБезСверкиБезСверки()

&НаСервере
Процедура СверитьДанныеПоКИВывестиРезультат(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхКИ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокКИСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаКИСверка");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхГХБКИ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокКИСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаКИСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБКИ();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокКИСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаКИСверкаНетДанных");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СверитьДанныеПоКИВывестиРезультат()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхКИ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Тип КАК Тип,
	|	таб.Вид КАК Вид,
	|	таб.ТипСсылка КАК ТипСсылка,
	|	таб.ВидСсылка КАК ВидСсылка,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Тип КАК Тип,
	|	втДанные.Вид КАК Вид,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ТипСсылка КАК ТипСсылка,
	|	втДанные.ВидСсылка КАК ВидСсылка,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Объект КАК ФизЛицо,
	|	втКрайняя.ТипСсылка КАК Тип,
	|	втКрайняя.ВидСсылка КАК Вид,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втКрайняя.Представление КАК Представление,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК ФизЛицоБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Тип КАК ТипБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК ПредставлениеБХ
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ПО втКрайняя.ТипСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Тип
	|			И втКрайняя.ВидСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Вид
	|			И втКрайняя.Объект = гхб_КонтактнаяИнформацияБазХолдинга.Объект
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|			И ((ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(150))) <> втКрайняя.Представление)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхКИ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхГХБКИ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Тип КАК Тип,
	|	таб.Вид КАК Вид,
	|	таб.ТипСсылка КАК ТипСсылка,
	|	таб.ВидСсылка КАК ВидСсылка,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Тип КАК Тип,
	|	втДанные.Вид КАК Вид,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ТипСсылка КАК ТипСсылка,
	|	втДанные.ВидСсылка КАК ВидСсылка,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.Объект КАК ФизЛицо,
	|	втКрайняя.ТипСсылка КАК Тип,
	|	втКрайняя.ВидСсылка КАК Вид,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втКрайняя.Представление КАК Представление,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК ОбъектБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Тип КАК ТипБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидБХ,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК ПредставлениеБХ
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ПО втКрайняя.ТипСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Тип
	|			И втКрайняя.ВидСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Вид
	|			И втКрайняя.Объект = гхб_КонтактнаяИнформацияБазХолдинга.Объект
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхГХБКИ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхРИБКИ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Тип КАК Тип,
	|	таб.Вид КАК Вид,
	|	таб.ТипСсылка КАК ТипСсылка,
	|	таб.ВидСсылка КАК ВидСсылка,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Тип КАК Тип,
	|	втДанные.Вид КАК Вид,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ТипСсылка КАК ТипСсылка,
	|	втДанные.ВидСсылка КАК ВидСсылка,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ГХБ 2.0"" КАК ТипДанных,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК ФизЛицо,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Тип КАК Тип,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК Вид,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК Представление
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ПО втКрайняя.ТипСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Тип
	|			И втКрайняя.ВидСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Вид
	|			И втКрайняя.Объект = гхб_КонтактнаяИнформацияБазХолдинга.Объект
	|ГДЕ
	|	гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга = &БазаХолдинга
	|	И втКрайняя.Объект ЕСТЬ NULL
	|	И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБКИ()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоРегиструКИ()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Тип КАК Тип,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК Вид,
	|	гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК Представление,
	|	гхб_КонтактнаяИнформацияБазХолдинга.РабочееПомещение КАК РабочееПомещение,
	|	гхб_КонтактнаяИнформацияБазХолдинга.ДатаЗаписи КАК ДатаЗаписи
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|ГДЕ
	|	гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга = &БазаХолдинга
	|	И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоРегиструКИ()

#КонецОбласти

#Область СверкаКонтрагентыФОП

&НаКлиенте
Процедура РедактироватьКонрагентыФОПВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеПоКонрагентыФОПБазХолдинга(Истина);
	
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,БазаХолдинга", тзДанные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияКонтрагентовФОП", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьКонрагентыФОПВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеПоКонрагентыФОПБазХолдинга(ВернутьТаблицу = Ложь)

	стКонтрагентыФОП = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоКонтрагентамФОПИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стКонтрагентыФОП.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стКонтрагентыФОП.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКонтрагентыФОП = Новый ТаблицаЗначений;
	тзКонтрагентыФОП.Колонки.Добавить("Контрагент", ОписаниеТиповС);
	тзКонтрагентыФОП.Колонки.Добавить("ПометкаУдаленияКонтрагент", Новый ОписаниеТипов("Булево"));
	тзКонтрагентыФОП.Колонки.Добавить("КонтрагентGuid", ОписаниеТиповС);
	тзКонтрагентыФОП.Колонки.Добавить("КодПоЕДРПОУ", ОписаниеТиповС);
	тзКонтрагентыФОП.Колонки.Добавить("ЮрФизЛицо", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ЮрФизЛицо"));
	тзКонтрагентыФОП.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзКонтрагентыФОП.Колонки.Добавить("ВидКонтрагента", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ВидыКонтрагентов"));
	
	Для каждого СтрокаКонтрагентФОП Из стКонтрагентыФОП.Результат.result.Данные Цикл
		
		новСтр = тзКонтрагентыФОП.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКонтрагентФОП);
		
		Попытка
			новСтр.ЮрФизЛицо = Перечисления.гхб_ЮрФизЛицо[СтрокаКонтрагентФОП.ЮрФизЛицо];
		Исключение
			новСтр.ЮрФизЛицо = Перечисления.гхб_ЮрФизЛицо.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.ВидКонтрагента = Перечисления.гхб_ВидыКонтрагентов.ФОП;
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзКонтрагентыФОП;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоКонрагентамФОПБезСверки(тзКонтрагентыФОП);
	Иначе
		СверитьДанныеПоКонрагентамФОПВывестиРезультат(тзКонтрагентыФОП);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоКонрагентыФОПБазХолдинга()

&НаСервере
Процедура ВывестиДанныеПоКонрагентамФОПБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоСправочникуКонтрагентов();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокКонтрагентыФОП");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
	
		обл = макет.ПолучитьОбласть("СтрокаКонтрагентыФОП");
		обл.Параметры.Наименование = СтрокаДанные.Контрагент;
		обл.Параметры.КодПоЕДРПОУ = СтрокаДанные.КодПоЕДРПОУ;
		обл.Параметры.ИНН = СтрокаДанные.ИНН;
		обл.Параметры.ЮрФизЛицо = СтрокаДанные.ЮрФизЛицо;
		обл.Параметры.ПометкаУдаления = СтрокаДанные.ПометкаУдаленияКонтрагент;
		
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоКонрагентамФОПБезСверки()

&НаСервере
Процедура СверитьДанныеПоКонрагентамФОПВывестиРезультат(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхКонтрагентыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОПСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОПСверка");
			обл.Параметры.Заполнить(Выборка);
			
			Отличия = "";
			
			Если Выборка.НаименованиеБХ <> Выборка.Наименование Тогда
				Отличия = Отличия + " Наименование" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.КодПоЕДРПОУ <> Выборка.КодПоЕДРПОУБХ Тогда
				Отличия = Отличия + " КодПоЕДРПОУ" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ИНН <> Выборка.ИННБХ Тогда
				Отличия = Отличия + " ИНН" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ЮрФизЛицо <> Выборка.ЮрФизЛицоБХ Тогда
				Отличия = Отличия + " ЮрФизЛицо" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ПометкаУдаления <> Выборка.ПометкаУдаленияБХ Тогда
				Отличия = Отличия + " ПометкаУдаления" + Символы.ПС
			КонецЕсли;
			
			обл.Параметры.Отличия = Отличия;
			
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхКонтрагентыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокКонтрагентыФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаКонтрагентыФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБКонтрагентыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокКонтрагентыФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаКонтрагентыФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоКонрагентамФОПВывестиРезультат()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаРазличиеДанныхКонтрагентыФОП()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Контрагент КАК Наименование,
	|	таб.ПометкаУдаленияКонтрагент КАК ПометкаУдаления,
	|	таб.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	таб.ЮрФизЛицо КАК ЮрФизЛицо,
	|	таб.ИНН КАК ИНН,
	|	таб.ВидКонтрагента КАК ВидКонтрагента,
	|	таб.КонтрагентGuid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	втДанные.ЮрФизЛицо КАК ЮрФизЛицо,
	|	втДанные.ИНН КАК ИНН,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втДанные.ВидКонтрагента КАК ВидКонтрагента,
	|	гхб_КонтрагентыБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_КонтрагентыБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ,
	|	гхб_КонтрагентыБазХолдинга.КодПоЕДРПОУ КАК КодПоЕДРПОУБХ,
	|	гхб_КонтрагентыБазХолдинга.ЮрФизЛицо КАК ЮрФизЛицоБХ,
	|	гхб_КонтрагентыБазХолдинга.ИНН КАК ИННБХ,
	|	гхб_КонтрагентыБазХолдинга.ВидКонтрагента КАК ВидКонтрагентаБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.guid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.Наименование <> гхб_КонтрагентыБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_КонтрагентыБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.КодПоЕДРПОУ <> гхб_КонтрагентыБазХолдинга.КодПоЕДРПОУ
	|			ИЛИ втДанные.ЮрФизЛицо <> гхб_КонтрагентыБазХолдинга.ЮрФизЛицо
	|			ИЛИ втДанные.ИНН <> гхб_КонтрагентыБазХолдинга.ИНН
	|			ИЛИ гхб_КонтрагентыБазХолдинга.ВидКонтрагента <> втДанные.ВидКонтрагента)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхКонтрагентыФОП()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхКонтрагентыФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Контрагент КАК Наименование,
	|	таб.ПометкаУдаленияКонтрагент КАК ПометкаУдаления,
	|	таб.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	таб.ЮрФизЛицо КАК ЮрФизЛицо,
	|	таб.ИНН КАК ИНН,
	|	таб.ВидКонтрагента КАК ВидКонтрагента,
	|	таб.КонтрагентGuid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	втДанные.ЮрФизЛицо КАК ЮрФизЛицо,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.ВидКонтрагента КАК ВидКонтрагента
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.guid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_КонтрагентыБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхКонтрагентыФОП()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетДанныхРИБКонтрагентыФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Контрагент КАК Наименование,
	|	таб.ПометкаУдаленияКонтрагент КАК ПометкаУдаления,
	|	таб.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	таб.ЮрФизЛицо КАК ЮрФизЛицо,
	|	таб.ИНН КАК ИНН,
	|	таб.ВидКонтрагента КАК ВидКонтрагента,
	|	таб.КонтрагентGuid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_КонтрагентыБазХолдинга.Наименование КАК Наименование,
	|	гхб_КонтрагентыБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_КонтрагентыБазХолдинга.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	гхб_КонтрагентыБазХолдинга.ЮрФизЛицо КАК ЮрФизЛицо,
	|	гхб_КонтрагентыБазХолдинга.ИНН КАК ИНН,
	|	гхб_КонтрагентыБазХолдинга.ВидКонтрагента КАК ВидКонтрагента
	|ИЗ
	|	втДанные КАК втДанные
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.guid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.Наименование ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБКонтрагентыФОП()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоСправочникуКонтрагентов()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|ГДЕ
	|	НЕ гхб_КонтрагентыБазХолдинга.ЭтоГруппа
	|	И гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоСправочникуКонтрагентов()

#КонецОбласти

#Область СверкаДоговораФОП

&НаКлиенте
Процедура РедактироватьДоговораФОПВывестиРезультатКлиент()

	тзДанные = ПолучитьДанныеДоговорамФОПБазХолдинга(Истина);
	тзДанныеДетальные = ПолучитьДанныеДоговорамДеталиФОПБазХолдинга(Истина);
	
	Если тзДанные = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	стПараметры = Новый Структура("тзДанные,тзДанныеДетальные,БазаХолдинга", тзДанные, тзДанныеДетальные, Объект.БазаХолдинга);
	ОткрытьФорму("Обработка.гхб_ИнструментДляСверкиДанныхБазХолдингаГХБ2.Форма.ФормаРедактированияДоговоровФОП", стПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // РедактироватьКонрагентыФОПВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеДоговорамФОПБазХолдинга(ВернутьТаблицу = Ложь)

	стДоговораФОП = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДанныеПоДоговорамФОПИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стДоговораФОП.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стДоговораФОП.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДоговораФОП = Новый ТаблицаЗначений;
	тзДоговораФОП.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ОрганизацияGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДоговорКонтрагентаGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("Контрагент", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("КонтрагентGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ПометкаУдаленияДоговор", Новый ОписаниеТипов("Булево"));
	тзДоговораФОП.Колонки.Добавить("НомерДоговора", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДатаДоговора", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаДоговораФОП Из стДоговораФОП.Результат.result.Данные Цикл
		
		новСтр = тзДоговораФОП.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДоговораФОП);
		новСтр.ДатаДоговора = Дата(Сред(СтрокаДоговораФОП.ДатаДоговора, 1, 4),
									Сред(СтрокаДоговораФОП.ДатаДоговора, 6, 2),
									Сред(СтрокаДоговораФОП.ДатаДоговора, 9, 2));
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДоговораФОП;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоДоговорамФОПБезСверки(тзДоговораФОП);
	Иначе
		СверитьДанныеПоДоговорамФОПВывестиРезультат(тзДоговораФОП);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоКонрагентыФОПБазХолдинга()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоСправочникуДоговоровФОП()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|ГДЕ
	|	НЕ гхб_ДоговораКонтрагентовБазХолдинга.ЭтоГруппа
	|	И гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоСправочникуДоговоровФОП()

&НаСервере
Процедура ВывестиДанныеПоДоговорамФОПБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоСправочникуДоговоровФОП();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОП");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
		
		Если СтрокаДанные.ПометкаУдаленияДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		обл = макет.ПолучитьОбласть("СтрокаДоговораФОП");
		обл.Параметры.Заполнить(СтрокаДанные);
		обл.Параметры.Наименование = СтрокаДанные.ДоговорКонтрагента;
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоДоговорамФОПБезСверки()

&НаСервере
Процедура СверитьДанныеПоДоговорамФОПВывестиРезультат(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОПСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОПСверка");
			обл.Параметры.Заполнить(Выборка);
			
			Отличия = "";
			
			Если Выборка.Организация <> Выборка.ОрганизацияБХ Тогда
				Отличия = Отличия + " Организация" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.Наименование <> Выборка.НаименованиеБХ Тогда
				Отличия = Отличия + " Наименование" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.НомерДоговора <> Выборка.НомерДоговораБХ Тогда
				Отличия = Отличия + " НомерДоговора" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ДатаДоговора <> Выборка.ДатаДоговораБХ Тогда
				Отличия = Отличия + " ДатаДоговора" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ПометкаУдаления <> Выборка.ПометкаУдаленияБХ Тогда
				Отличия = Отличия + " ПометкаУдаления" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.Контрагент <> Выборка.КонтрагентБХ Тогда
				Отличия = Отличия + " Контрагент" + Символы.ПС
			КонецЕсли;
			
			обл.Параметры.Отличия = Отличия;
			
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоКонрагентамФОПВывестиРезультат()

&НаСервере
Функция ПолучитьТекстЗапросаРазличиеДанныхДоговорыФОП()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Организация КАК ОрганизацияСтрока,
	|	втДанные.ДоговорКонтрагента КАК Наименование,
	|	втДанные.Контрагент КАК КонтрагентСтрока,
	|	втДанные.НомерДоговора КАК НомерДоговора,
	|	втДанные.ДатаДоговора КАК ДатаДоговора,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Контрагент,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Номер КАК НомерДоговораБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Дата КАК ДатаДоговораБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Организация КАК ОрганизацияБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Контрагент КАК КонтрагентБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.ДоговорКонтрагента <> гхб_ДоговораКонтрагентовБазХолдинга.Наименование
	|			ИЛИ гхб_КонтрагентыБазХолдинга.Ссылка <> гхб_ДоговораКонтрагентовБазХолдинга.Контрагент
	|			ИЛИ гхб_ОрганизацииБазХолдинга.Ссылка <> гхб_ДоговораКонтрагентовБазХолдинга.Организация
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.НомерДоговора <> гхб_ДоговораКонтрагентовБазХолдинга.Номер
	|			ИЛИ втДанные.ДатаДоговора <> гхб_ДоговораКонтрагентовБазХолдинга.Дата)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДоговорыФОП()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхДоговорыФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ДоговорКонтрагента КАК Наименование,
	|	втДанные.НомерДоговора КАК НомерДоговора,
	|	втДанные.ДатаДоговора КАК ДатаДоговора,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Контрагент
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхДоговорыФОП()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхРИБДоговорыФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Наименование КАК Наименование,
	|	гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Номер КАК НомерДоговора,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Дата КАК ДатаДоговора,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Организация КАК Организация,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Владелец КАК Контрагент
	|ИЗ
	|	втДанные КАК втДанные
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.Организация ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБДоговорыФОП()

#КонецОбласти

#Область СверкаДетальныеЗаписиФОП

&НаКлиенте
Процедура РедактироватьДоговораДеталиФОПВывестиРезультатКлиент()

	

КонецПроцедуры // РедактироватьКонрагентыФОПВывестиРезультатКлиент()

&НаСервере
Функция ПолучитьДанныеДоговорамДеталиФОПБазХолдинга(ВернутьТаблицу = Ложь)

	стДоговораФОП = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(Объект.БазаХолдинга, 
																						"ПолучитьДетальныеДанныеПоДоговорамФОПИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стДоговораФОП.ОбменПрошел Тогда
		
		ОбщегоНазначения.СообщитьПользователю(стДоговораФОП.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДоговораФОП = Новый ТаблицаЗначений;
	тзДоговораФОП.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ОрганизацияGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДоговорКонтрагентаGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("Контрагент", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("КонтрагентGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ФизЛицоGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДолжностьGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	тзДоговораФОП.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	тзДоговораФОП.Колонки.Добавить("Дивизион", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДивизионКод", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ФактическийРуководитель", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ФактическийРуководительGuid", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДивизионРодитель", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ДивизионРодительКод", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("КодПоЕДРПОУ", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("НомерДоговора", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ЮрФизЛицо", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзДоговораФОП.Колонки.Добавить("ПометкаУдаленияДоговор", Новый ОписаниеТипов("Булево"));
	тзДоговораФОП.Колонки.Добавить("ДатаДоговора", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаДоговораФОП Из стДоговораФОП.Результат.result.Данные Цикл
		
		новСтр = тзДоговораФОП.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДоговораФОП);
		новСтр.ДатаДоговора = Дата(Сред(СтрокаДоговораФОП.ДатаДоговора, 1, 4),
									Сред(СтрокаДоговораФОП.ДатаДоговора, 6, 2),
									Сред(СтрокаДоговораФОП.ДатаДоговора, 9, 2));
		новСтр.ДатаНачала = Дата(Сред(СтрокаДоговораФОП.ДатаНачала, 1, 4),
									Сред(СтрокаДоговораФОП.ДатаНачала, 6, 2),
									Сред(СтрокаДоговораФОП.ДатаНачала, 9, 2));
		новСтр.ДатаОкончания = Дата(Сред(СтрокаДоговораФОП.ДатаОкончания, 1, 4),
									Сред(СтрокаДоговораФОП.ДатаОкончания, 6, 2),
									Сред(СтрокаДоговораФОП.ДатаОкончания, 9, 2));
		
	КонецЦикла;
	
	Если ВернутьТаблицу Тогда
		Возврат тзДоговораФОП;
	КонецЕсли;
	
	Если Объект.ЧтоДелать = "ПоказатьДанныеБазыХолдинга" Тогда
		ВывестиДанныеПоДоговорамДеталиФОПБезСверки(тзДоговораФОП);
	Иначе
		СверитьДанныеПоДоговорамДеталиФОПВывестиРезультат(тзДоговораФОП);
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоКонрагентыФОПБазХолдинга()

&НаСервере
Функция ПолучитьКоличествоЗаписейПоСправочникуДоговоровДеталиФОП()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Справочник.гхб_ДоговораКонтрагентовБазХолдинга.РаботникиФОП КАК гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.Ссылка = гхб_ДоговораКонтрагентовБазХолдинга.Ссылка
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)";
	
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции // ПолучитьКоличествоЗаписейПоСправочникуДоговоровФОП()

&НаСервере
Процедура ВывестиДанныеПоДоговорамДеталиФОПБезСверки(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество полученных записей: " + тзДанные.Количество() + Символы.ПС;
	текстШапки = текстШапки + "количество записей в ГХБ 2.0: " + ПолучитьКоличествоЗаписейПоСправочникуДоговоровДеталиФОП();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("ЗаголовокДоговораДеталиФОП");
	РезультатСверки.Вывести(обл);
	
	Для каждого СтрокаДанные Из тзДанные Цикл
		
		Если СтрокаДанные.ПометкаУдаленияДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		обл = макет.ПолучитьОбласть("СтрокаДоговораДеталиФОП");
		обл.Параметры.Заполнить(СтрокаДанные);
		обл.Параметры.Наименование = СтрокаДанные.ДоговорКонтрагента;
		РезультатСверки.Вывести(обл);
	
	КонецЦикла;
	
	РезультатСверки.ФиксацияСверху = 2;

КонецПроцедуры // ВывестиДанныеПоДоговорамФОПБезСверки()

&НаСервере
Процедура СверитьДанныеПоДоговорамДеталиФОПВывестиРезультат(тзДанные)

	макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РезультатСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазличиеДанныхДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("Шапка");
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество нестыковок: " + Выборка.Количество();
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОПСверка");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОПСверка");
			обл.Параметры.Заполнить(Выборка);
			
			Отличия = "";
			
			Если Выборка.Организация <> Выборка.ОрганизацияБХ Тогда
				Отличия = Отличия + " Организация" + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.Наименование <> Выборка.НаименованиеБХ Тогда
				Отличия = Отличия + " Наименование" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.НомерДоговора <> Выборка.НомерДоговораБХ Тогда
				Отличия = Отличия + " НомерДоговора" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ДатаДоговора <> Выборка.ДатаДоговораБХ Тогда
				Отличия = Отличия + " ДатаДоговора" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.ПометкаУдаления <> Выборка.ПометкаУдаленияБХ Тогда
				Отличия = Отличия + " ПометкаУдаления" + Символы.ПС
			КонецЕсли;
			
			Если Выборка.Контрагент <> Выборка.КонтрагентБХ Тогда
				Отличия = Отличия + " Контрагент" + Символы.ПС
			КонецЕсли;
			
			обл.Параметры.Отличия = Отличия;
			
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в ГХБ 2 : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБДоговорыФОП();
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	обл = макет.ПолучитьОбласть("ПустаяСтрока");
	РезультатСверки.Вывести(обл);
	
	обл = макет.ПолучитьОбласть("Шапка");
	
	текстШапки = "База " + Объект.БазаХолдинга + Символы.ПС;
	текстШапки = текстШапки + "количество Нет элемента в базе РИБ : " + Выборка.Количество();
	
	обл.Параметры.текстШапки = текстШапки;
	РезультатСверки.Вывести(обл);
	
	Если Выборка.Количество() > 0 Тогда
		
		обл = макет.ПолучитьОбласть("ЗаголовокДоговораФОП");
		РезультатСверки.Вывести(обл);
		
		Пока Выборка.Следующий() Цикл
		
			обл = макет.ПолучитьОбласть("СтрокаДоговораФОП");
			обл.Параметры.Заполнить(Выборка);
			РезультатСверки.Вывести(обл);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СверитьДанныеПоКонрагентамФОПВывестиРезультат()

&НаСервере
Функция ПолучитьТекстЗапросаРазличиеДанныхДоговорыДеталиФОП()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Организация КАК ОрганизацияСтрока,
	|	втДанные.ДоговорКонтрагента КАК Наименование,
	|	втДанные.Контрагент КАК КонтрагентСтрока,
	|	втДанные.НомерДоговора КАК НомерДоговора,
	|	втДанные.ДатаДоговора КАК ДатаДоговора,
	|	""РИБ"" КАК ТипДанных,
	|	""ГХБ 2.0"" КАК ТипДанныхБХ,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Контрагент,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Наименование КАК НаименованиеБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления КАК ПометкаУдаленияБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Номер КАК НомерДоговораБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Дата КАК ДатаДоговораБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Организация КАК ОрганизацияБХ,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Владелец КАК КонтрагентБХ
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	(втДанные.ДоговорКонтрагента <> гхб_ДоговораКонтрагентовБазХолдинга.Наименование
	|			ИЛИ гхб_КонтрагентыБазХолдинга.Ссылка <> гхб_ДоговораКонтрагентовБазХолдинга.Владелец
	|			ИЛИ гхб_ОрганизацииБазХолдинга.Ссылка <> гхб_ДоговораКонтрагентовБазХолдинга.Организация
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.НомерДоговора <> гхб_ДоговораКонтрагентовБазХолдинга.Номер
	|			ИЛИ втДанные.ДатаДоговора <> гхб_ДоговораКонтрагентовБазХолдинга.Дата)";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаРазличиеДанныхДоговорыФОП()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхДоговорыДеталиФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ДоговорКонтрагента КАК Наименование,
	|	втДанные.НомерДоговора КАК НомерДоговора,
	|	втДанные.ДатаДоговора КАК ДатаДоговора,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Контрагент
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхДоговорыФОП()

&НаСервере
Функция ПолучитьТекстЗапросаНетДанныхРИБДоговорыДеталиФОП()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.ОрганизацияGuid КАК ОрганизацияGuid,
	|	таб.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	таб.ДоговорКонтрагентаGuid КАК ДоговорКонтрагентаGuid,
	|	таб.Контрагент КАК Контрагент,
	|	таб.КонтрагентGuid КАК КонтрагентGuid,
	|	таб.НомерДоговора КАК НомерДоговора,
	|	таб.ДатаДоговора КАК ДатаДоговора,
	|	таб.ПометкаУдаленияДоговор КАК ПометкаУдаления
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Наименование КАК Наименование,
	|	гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Номер КАК НомерДоговора,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Дата КАК ДатаДоговора,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Организация КАК Организация,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Владелец КАК Контрагент
	|ИЗ
	|	втДанные КАК втДанные
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|		ПО втДанные.ДоговорКонтрагентаGuid = гхб_ДоговораКонтрагентовБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДоговораКонтрагентовБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.ОрганизацияGuid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|		ПО втДанные.КонтрагентGuid = гхб_КонтрагентыБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_КонтрагентыБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.Организация ЕСТЬ NULL";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБДоговорыФОП()


#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПолучитьКоличествоЭлементовСправочника(ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", Объект.БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Спр
	|ГДЕ
	|	НЕ Спр.ЭтоГруппа
	|	И Спр.БазаХолдинга = &БазаХолдинга";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

#КонецОбласти