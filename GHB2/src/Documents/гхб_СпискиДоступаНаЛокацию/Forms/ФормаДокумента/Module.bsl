
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность();
	УстановитьНазванияКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьНаСервере()
	
	Элементы.ПеренесеноИзБазыРесурсов.Видимость = Объект.ПеренесеноИзБазыРесурсов;
	ЭтотОбъект.ТолькоПросмотр = Объект.ПеренесеноИзБазыРесурсов;
	
	Элементы.ГруппаПериод.Видимость = НЕ Объект.ПеренесеноИзБазыРесурсов;
	Элементы.Данные.Видимость = НЕ Объект.ПеренесеноИзБазыРесурсов;
	Элементы.ДанныеПеренесенныеИзБазыРесурсов.Видимость = Объект.ПеренесеноИзБазыРесурсов;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И (Объект.ДатаНачала < _ТекущаяДата) Тогда
		
		Элементы.ГруппаПериод.ТолькоПросмотр = Истина;
		//Элементы.ДанныеЛокация.ТолькоПросмотр = Истина;
		//Элементы.ДанныеГость.ТолькоПросмотр = Истина;
		//Элементы.ДанныеСотрудник.ТолькоПросмотр = Истина;
		
		Для ф = 1 По 7 Цикл
		
			Элементы["ДанныеДата" + ф].ТолькоПросмотр = 
				гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(Объект.ДатаНачала, ф - 1) < _ТекущаяДата;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНазванияКолонок()

	Для ф = 1 По 7 Цикл
		
		Элементы["ДанныеДата" + ф].Заголовок = Формат(
			гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(Объект.ДатаНачала, ф - 1), "ДФ=dd.MM");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	_ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(НачалоНедели(ТекущаяДатаСеанса()), 7);
		Объект.ДатаОкончания = ВернутьДатуОкончанияПоДатеНачала(Объект.ДатаНачала);
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьДатуОкончанияПоДатеНачала(_ДатаНачала)
	
	Возврат НачалоДня(КонецНедели(_ДатаНачала));
	
КонецФункции

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Объект.ДатаОкончания = ВернутьДатуОкончанияПоДатеНачала(Объект.ДатаНачала);
	УстановитьНазванияКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.ДатаНачала < _ТекущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСотрудникПриИзменении(Элемент)
	
	ТД = Элементы.Данные.ТекущиеДанные;
	
	Если НЕ (ТД = Неопределено) И ЗначениеЗаполнено(ТД.Сотрудник) Тогда
		_ДанныеСотрудника = ПолучитьДанныеСотрудникаПоОсновномуМестуРаботы(ТД.Сотрудник);
		ЗаполнитьЗначенияСвойств(ТД, _ДанныеСотрудника);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникаПоОсновномуМестуРаботы(_ФЛ)
	
	_Структура = Новый Структура("Дивизион, Функция", Справочники.гхб_Дивизионы.ПустаяСсылка(), Справочники.гхб_Дивизионы.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(_ФЛ) Тогда
		
		ЗапросКадры = Новый Запрос();
		ЗапросКадры.Текст = "ВЫБРАТЬ
		                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Дивизион КАК Дивизион,
		                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ГруппаДивизиона КАК Функция
		                    |ИЗ
		                    |	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних(, Сотрудник.ФизЛицоБазыХолдинга.ФизЛицоТекущейБазы = &ФизЛицоТекущейБазы) КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
		                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга.СрезПоследних КАК гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних
		                    |		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БазаХолдинга
		                    |			И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.Организация
		                    |			И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.ПодразделениеОрганизации
		                    |			И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПозицияШтатногоРасписания = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.Позиция
		                    |ГДЕ
		                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
		                    |	И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник.ВидЗанятости В(&ВидЗанятости)";
		
		_СписокВидовЗанятости = Новый СписокЗначений();
		_СписокВидовЗанятости.Добавить(Перечисления.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		_СписокВидовЗанятости.Добавить(Перечисления.гхб_ВидыЗанятостиВОрганизации.Совместительство);

		ЗапросКадры.УстановитьПараметр("ВидЗанятости", _СписокВидовЗанятости);
		ЗапросКадры.УстановитьПараметр("ФизЛицоТекущейБазы", _ФЛ);
		
		Выборка = ЗапросКадры.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			_Структура.Дивизион = Выборка.Дивизион;
			_Структура.Функция = Выборка.Функция;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Структура;
	
КонецФункции

&НаКлиенте
Процедура ДанныеПриАктивизацииСтроки(Элемент)
	
	УстановитьОграничениеВыбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеВыбора(_ОчищатьДанные)
	
	ТД = Элементы.Данные.ТекущиеДанные;
	
	Если НЕ (ТД = Неопределено) Тогда
		Если ТД.Гость Тогда
			Элементы.ДанныеСотрудник.ОграничениеТипа = Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(100));
			Элементы.ДанныеСотрудник.КнопкаВыбора = Ложь;
			
			Если _ОчищатьДанные Тогда
				ТД.Сотрудник = "";
			КонецЕсли;
		Иначе
			Элементы.ДанныеСотрудник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.гхб_ФизическиеЛица");
			Элементы.ДанныеСотрудник.КнопкаВыбора = Истина;
			
			Если _ОчищатьДанные Тогда
				ТД.Сотрудник = ПредопределенноеЗначение("Справочник.гхб_ФизическиеЛица.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеГостьПриИзменении(Элемент)
	
	УстановитьОграничениеВыбора(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеГостьОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Сообщить("1");
	
КонецПроцедуры
