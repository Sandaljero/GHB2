&НаКлиенте
Перем _Документ Экспорт ;

&НаКлиенте
Перем СписокКнопокСостоянийПодписи;

&НаКлиенте
Перем СписокКартинокСостоянийПодписи;

&НаСервере
Перем ШрифтНадписи;
&НаСервере
Перем ШрифтНадписиЖирный;
&НаСервере
Перем ШрифтКомментария;
&НаСервере
Перем ЦветКомментария;
&НаСервере
Перем ЦветОтсутствуетБП;
&НаКлиенте
Перем ФлПолеКартинкиПодписьДоступность, ФлПолеКартинкиОтклонитьДоступность, ФлПолеКартинкиОтозватьДоступность;

&НаКлиенте
Перем ОставитьФормуОткрытой;

&НаКлиенте
Процедура ОткрытьБП(Команда)
	Попытка
		Если ЗначениеЗаполнено(БизнесПроцессОбъект.Ссылка) Тогда
			ОткрытьЗначение(БизнесПроцессОбъект.Ссылка);
		КонецЕсли;
		
		//Форма = ПолучитьФорму("БизнесПроцесс.Подписание.Форма.ФормаБизнесПроцессаУправляемая");
		//ДанныеФормы = Форма.Объект; // Получаем объект формы в переменную
		//ЗаполнитьБПНаСервере(ДанныеФормы); // Заполняем документ на сервере
		//КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); // копируем наш объект в объект формы и далее открываем ее
		//Форма.Открыть();
		//
		//
		////Адрес = УпаковатьОбъект();
		////ПолучитьФорму("БизнесПроцесс.Подписание.Форма.ФормаБизнесПроцессаУправляемая", Новый Структура("ОткрываетсяИзВне, Объект", Истина, Адрес), ЭтаФорма, Истина).Открыть();
		//
		//////_Ф = БизнесПроцессы.Подписание.ПолучитьФорму("БизнесПроцесс.Подписание.Форма.ФормаБизнесПроцессаУправляемая");
		//////_Ф.Объект = БизнесПроцессОбъект;
		//////_Ф.Открыть();
		////
		//////Парам = Новый Структура("Ключ", БизнесПроцессОбъект);
		//////ОткрытьФорму("БизнесПроцесс.Подписание.Форма.ФормаБизнесПроцессаУправляемая", Парам, ЭтаФорма);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьБПНаСервере(ДанныеФормы);

	Док = ДанныеФормыВЗначение(ДанныеФормы, Тип("БизнесПроцессОбъект.Подписание")); // Получаем объект из данных формы ИЛИ
	Док = БизнесПроцессы.Подписание.СоздатьБизнесПроцесс();

	// Заполняем реквизиты объекта или другие действия ********
	ЗначениеВДанныеФормы(Док, ДанныеФормы); // Кладем обратно в объект формы уже созданный документ

КонецФункции

&НаСервере
Функция УпаковатьОбъект()
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
    Адрес = ПоместитьВоВременноеХранилище(БП, Новый УникальныйИдентификатор);
                  
    Возврат Адрес;
КонецФункции

&НаСервере
Функция ВернутьТаблицуПодписания(_ТЧ)
	_ТаблицаПодписания = Новый ТаблицаЗначений();
	_ТаблицаПодписания.Колонки.Добавить("Роль");
	_ТаблицаПодписания.Колонки.Добавить("Приоритет");
	_ТаблицаПодписания.Колонки.Добавить("Подписант");
	
	Для Каждого Стр Из _ТЧ Цикл
		Если ЗначениеЗаполнено(Стр.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Стадия) Тогда
			Если ЗначениеЗаполнено(Стр.СозданнаяЗадача) Тогда
				Если НЕ Стр.СозданнаяЗадача.Адресаты.Количество() = 0 Тогда
					Для Каждого _СН Из Стр.СозданнаяЗадача.Адресаты Цикл
						НС = _ТаблицаПодписания.Добавить();
						НС.Приоритет = 9999;
						НС.Подписант = "Доп. подписанты по текущей стадии: " + ?(ЗначениеЗаполнено(_СН.Подразделение), СокрЛП(_СН.Подразделение) + " - " + СокрЛП(_СН.Должность), ?(ЗначениеЗаполнено(_СН.РольДокументооборота), СокрЛП(_СН.РольДокументооборота), СокрЛП(_СН.Сотрудник)));
						
						НС = _ТаблицаПодписания.Добавить();
						НС.Приоритет = 9999;
						НС.Подписант = "";
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Стр.Стадия) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(Стр.Стадия) = Тип("СправочникСсылка.Пользователи") Тогда
				НС = _ТаблицаПодписания.Добавить();
				НС.Роль = Строка(Стр.Стадия);
				НС.Приоритет = Стр.Приоритет;
				НС.Подписант = Строка(Стр.Стадия);
				
				НС = _ТаблицаПодписания.Добавить();
				НС.Роль = Строка(Стр.Стадия);
				НС.Приоритет = Стр.Приоритет;
				НС.Подписант = "";
				
			ИначеЕсли ТипЗнч(Стр.Стадия) = Тип("СправочникСсылка.но_РолиДокументооборота") Тогда
				//p.lukashov(26.03.2019) --->
				Если (Стр.Стадия = Справочники.но_РолиДокументооборота.Продюсер
						ИЛИ Стр.Стадия = Справочники.но_РолиДокументооборота.ДиректорСтудии
						ИЛИ Стр.Стадия = Справочники.но_РолиДокументооборота.ИсполнительныйПродюсерСтудии) Тогда
					_Метаданные = БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные();
					
					Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", _Метаданные) ИЛИ ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", _Метаданные) Тогда 
						ЗначениеАналитики = ?(ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", _Метаданные), БизнесПроцессОбъект.ПодписываемыйОбъект.ЦФО, БизнесПроцессОбъект.ПодписываемыйОбъект.Проект);
						
						Если Стр.Стадия = Справочники.но_РолиДокументооборота.Продюсер Тогда
							_СписокПодписантов = но_Документооборот.ВернутьПродюсеров(ЗначениеАналитики);
						ИначеЕсли Стр.Стадия = Справочники.но_РолиДокументооборота.ДиректорСтудии Тогда	
							_СписокПодписантов = но_Документооборот.ВернутьДиректоровСтудии(ЗначениеАналитики);
						Иначе
							_СписокПодписантов = но_Документооборот.ВернутьИсполнительныхПродюсеровСтудии(ЗначениеАналитики);	
						КонецЕсли;	
				//p.lukashov(26.03.2019) <---		
						Для Каждого _СтрПодписант Из _СписокПодписантов Цикл
							НС = _ТаблицаПодписания.Добавить();
							НС.Роль = Строка(Стр.Стадия);
							НС.Приоритет = Стр.Приоритет;
							НС.Подписант = Строка(_СтрПодписант);
						КонецЦикла;
					Иначе
						НС = _ТаблицаПодписания.Добавить();
						НС.Роль = Строка(Стр.Стадия);
						НС.Приоритет = Стр.Приоритет;
						НС.Подписант = "Ошибка: для использования роли подписания документ должен содержать реквизит ""ЦФО"" или ""Проект""";
					КонецЕсли;
					
                    НС = _ТаблицаПодписания.Добавить();
					НС.Роль = Строка(Стр.Стадия);
					НС.Приоритет = Стр.Приоритет;
					НС.Подписант = "";
				//p.lukashov(06.03.2019) --->
				// Для Заявок на бронирование АВМ берем в подписанты данные из поля ответственный за ЦФО из самого документа
				ИначеЕсли (Стр.Стадия = Справочники.но_РолиДокументооборота.ОтветственныйЗаЦФОЗаявкаНаАВМ) Тогда  
					
					_Метаданные = БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные();
					
					Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтветственныйЗаЦФО", _Метаданные) Тогда
						НС = _ТаблицаПодписания.Добавить();
						НС.Роль = Строка(Стр.Стадия);
						НС.Приоритет = Стр.Приоритет;
						НС.Подписант = Строка(БизнесПроцессОбъект.ПодписываемыйОбъект.ОтветственныйЗаЦФО);
					КонецЕсли;	
					
				//p.lukashov(06.03.2019) <---
				ИначеЕсли (Стр.Стадия = Справочники.но_РолиДокументооборота.ГлавныйРежиссер) Тогда	
					
					МетаданныеОбъекта = БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные();
					МассивГлавныхРежиссеров = Новый Массив;
					
					Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", МетаданныеОбъекта) Тогда
						
						МассивГлавныхРежиссеров = но_Документооборот.ВернутьГлавныхРежиссеров(БизнесПроцессОбъект.ПодписываемыйОбъект.ЦФО);
						
					ИначеЕсли ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", МетаданныеОбъекта) Тогда	
						
						МассивГлавныхРежиссеров = но_Документооборот.ВернутьГлавныхРежиссеров(БизнесПроцессОбъект.ПодписываемыйОбъект.Проект.ЦФО);
						
					Иначе
						
						НС = _ТаблицаПодписания.Добавить();
						НС.Роль = Строка(Стр.Стадия);
						НС.Приоритет = Стр.Приоритет;
						НС.Подписант = "Ошибка: для использования роли подписания ""Главный режиссер"" документ должен содержать реквизит ""ЦФО"" или ""Проект""";
					
					КонецЕсли;
					
					Для Каждого ТекущийГлавныйРежиссер Из МассивГлавныхРежиссеров Цикл
						
						НС = _ТаблицаПодписания.Добавить();
						НС.Роль = Строка(Стр.Стадия);
						НС.Приоритет = Стр.Приоритет;
						НС.Подписант = Строка(ТекущийГлавныйРежиссер);
						
					КонецЦикла;
					
					НС = _ТаблицаПодписания.Добавить();
					НС.Роль = Строка(Стр.Стадия);
					НС.Приоритет = Стр.Приоритет;
					НС.Подписант = "";

				Иначе
					Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь
				                      |ИЗ
				                      |	Справочник.но_РолиДокументооборота.УчастникиСогласования КАК но_РолиДокументооборотаУчастникиСогласования
				                      |ГДЕ
				                      |	но_РолиДокументооборотаУчастникиСогласования.Ссылка = &РольДокументооборота
				                      |	И но_РолиДокументооборотаУчастникиСогласования.Дата1 <= &ТекДата
				                      |	И (но_РолиДокументооборотаУчастникиСогласования.Дата2 >= &ТекДата
				                      |	ИЛИ но_РолиДокументооборотаУчастникиСогласования.Дата2 = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
				                      |
				                      |СГРУППИРОВАТЬ ПО
				                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь");
								
					Запрос.УстановитьПараметр("ТекДата", НачалоДня(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере()));
					Запрос.УстановитьПараметр("РольДокументооборота", Стр.Стадия);
					Рез = Запрос.Выполнить().Выгрузить();
					
					Для Каждого _С Из Рез Цикл
						НС = _ТаблицаПодписания.Добавить();
						НС.Роль = Строка(Стр.Стадия);
						НС.Приоритет = Стр.Приоритет;
						НС.Подписант = Строка(_С.Пользователь);
					КонецЦикла;
					
					НС = _ТаблицаПодписания.Добавить();
					НС.Роль = Строка(Стр.Стадия);
					НС.Приоритет = Стр.Приоритет;
					НС.Подписант = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Стр.Подразделение) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
	               |	НазначенияРаботниковСрезПоследних.Ссылка КАК Работник
	               |ИЗ
	               |	Справочник.ФизическиеЛица.Назначения КАК НазначенияРаботниковСрезПоследних
	               |ГДЕ
	               |	НазначенияРаботниковСрезПоследних.Ссылка.Неактуален = ДАТАВРЕМЯ(1, 1, 1)
	               |	И НазначенияРаботниковСрезПоследних.Подразделение В ИЕРАРХИИ(&Подразделение)
	               |	И НазначенияРаботниковСрезПоследних.Должность В ИЕРАРХИИ(&Должность)");
					
			Запрос.УстановитьПараметр("Подразделение", Стр.Подразделение);
			Запрос.УстановитьПараметр("Должность", Стр.Должность);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого _С Из ТЗ Цикл
				НС = _ТаблицаПодписания.Добавить();
				НС.Роль = СокрЛП(Стр.Подразделение) + " - " + СокрЛП(Стр.Должность);
				НС.Приоритет = Стр.Приоритет;
				НС.Подписант = Строка(_С.Работник);
			КонецЦикла;
			
			НС = _ТаблицаПодписания.Добавить();
			НС.Роль = Строка(Стр.Стадия);
			НС.Приоритет = Стр.Приоритет;
			НС.Подписант = "";
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат _ТаблицаПодписания;
КонецФункции

&НаСервере
Функция ВернутьТДСписокПодписания()
	
	_ТЗ = ВернутьТЗИзТЧ();
	
	ТД = Новый ТабличныйДокумент();
	СКД = БизнесПроцессы.Подписание.ПолучитьМакет("МакетСКДСписокПодписания");
	Настройки = СКД.НастройкиПоУмолчанию;
	Настройки.ПараметрыВывода.Элементы.Найти("Title").Значение = "Подписание: " + БизнесПроцессОбъект.ПодписываемыйОбъект;
	Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;

	МакетКомпоновки = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = МакетКомпоновки.Выполнить(СКД,Настройки,Расшифровка);

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("_тз", _тз);
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных);

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	ТД.Очистить();
	ТД.АвтоМасштаб = Истина;
	ТД.ОтображатьСетку = Ложь;
	ТД.НижнийКолонтитул.Выводить = Истина;
	ТД.НижнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] из [&СтраницВсего]";

	ПроцессорВывода.УстановитьДокумент(ТД);

	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
    	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата= Неопределено Тогда
        	Прервать;
		Иначе
        	ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
        КонецЕсли;
    КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();	
	
	Возврат ТД;
	
КонецФункции

&НаСервере
Функция ВернутьТДКтоМожетПодписать()
	_ТЗ = ВернутьТаблицуПодписания(ВернутьТЗИзТЧ());
	
	ТД = Новый ТабличныйДокумент();
	СКД = БизнесПроцессы.Подписание.ПолучитьМакет("МакетСКД");
	Настройки = СКД.НастройкиПоУмолчанию;
	Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;

	МакетКомпоновки = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = МакетКомпоновки.Выполнить(СКД,Настройки,Расшифровка);

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("_тз", _тз);
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных);

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	ТД.Очистить();
	ТД.АвтоМасштаб = Истина;
	ТД.ОтображатьСетку = Ложь;
	ТД.НижнийКолонтитул.Выводить = Истина;
	ТД.НижнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] из [&СтраницВсего]";

	ПроцессорВывода.УстановитьДокумент(ТД);

	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
    	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата= Неопределено Тогда
        	Прервать;
		Иначе
        	ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
        КонецЕсли;
    КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();	
	Возврат ТД;
КонецФункции

&НаКлиенте
Процедура КтоМожетПодписать(Команда)
	Если БизнесПроцессОбъект.ПодписываемыйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТД = ВернутьТДКтоМожетПодписать();
	ТД.Показать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодписываемыйОбъектЭтоДокумент(_ПодписываемыйОбъект)
	Возврат Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(_ПодписываемыйОбъект));
КонецФункции

&НаКлиенте
Процедура ПолеКартинкиПодписьНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.МаршрутПодписания) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлПолеКартинкиПодписьДоступность Тогда 
		Возврат;
	КонецЕсли;
	
	//Если НЕ (БизнесПроцессОбъект.ПодписываемыйОбъект = Неопределено) Тогда
	//	Если ПодписываемыйОбъектЭтоДокумент(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
	//		Попытка
	//			Если Этаформа.ВладелецФормы.ДокументОбъект.Модифицированность() Тогда
	//				_Ответ = Вопрос("Сохранить изменения в документе?", РежимДиалогаВопрос.ДаНетОтмена, 30, КодВозвратаДиалога.Нет);
	//				
	//				Если (_Ответ = КодВозвратаДиалога.Отмена) Тогда
	//					Возврат;
	//				ИначеЕсли (_Ответ = КодВозвратаДиалога.Да) Тогда
	//					Этаформа.ВладелецФормы.ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	//				КонецЕсли;
	//			КонецЕсли;
	//		Исключение
	//			//
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
	
	_НачатьТранзакцию();
	
	Попытка
	
		Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Состояние) Тогда
			НачатьСогласование();
		ИначеЕсли (БизнесПроцессОбъект.Состояние = _Отклонен()) Тогда	
			СписокДоступныхСостояний = Новый СписокЗначений;
			СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
			
			Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
				НачатьСогласование();
			Иначе
				Ознакомлен();
			КонецЕсли;
		ИначеЕсли (БизнесПроцессОбъект.Состояние = _НаПодписании()) Тогда
			Подписать();
		ИначеЕсли (БизнесПроцессОбъект.Состояние = _Отозван()) Тогда	
			СписокДоступныхСостояний = Новый СписокЗначений;
			СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
			
			Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
				НачатьСогласование();
			Иначе
				Ознакомлен();
			КонецЕсли;
		ИначеЕсли (БизнесПроцессОбъект.Состояние = _Подписан()) Тогда	
			СписокДоступныхСостояний = Новый СписокЗначений;
			СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
			
			Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
				Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, , , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
					//
				Иначе
					Подписать();
				КонецЕсли;
			Иначе
				Ознакомлен();
			КонецЕсли;
		КонецЕсли;
		
		_ЗафиксироватьТранзакцию();
		
	Исключение
		
		_ОтменитьТранзакцию();
		
	КонецПопытки;
	
	УстВидимость();
КонецПроцедуры

&НаСервере
Функция ВернутьТекущийПриоритетЛок(_Приоритет)
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");	
	Возврат БП.ВернутьСледующийПриоритет(_Приоритет);
КонецФункции

&НаСервере
Процедура ПерейтиКСледующемуПриоритетуЛок(_Приориет)
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");	
	БП.ПерейтиКСледующемуПриоритету(_Приориет);
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаСервере
Процедура ДобавитьВИсториюСобытиеЛок(_Событие)
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");	
	БП.ДобавитьВИсториюСобытие(_Событие);
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаСервере
Функция БылоЛиХотьОдноПодписание()
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	Возврат НЕ (БП.ТаблицаПодписания.Найти(_Подписан(), "СостояниеПодписи") = Неопределено);
КонецФункции

&НаКлиенте
Процедура НачатьСогласование() экспорт
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.МаршрутПодписания) Тогда
		Возврат;
	КонецЕсли;
	
	//p.lukashov(13.03.2019) --->
	Если ВладелецФормы <> Неопределено И ВладелецФормы.ИмяФормы = "Документ.но_ЗаявкаНаБронированиеАВМ.Форма.ФормаДокумента" Тогда
		Если ВладелецФормы.ПередИнициализацией() Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	//p.lukashov(13.03.2019) <---
	
	_НачатьТранзакцию();
	
	//Если НЕ (но_ДокументооборотКлиент.СписокДокументыПередИнициализацией().НайтиПоЗначению(БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные().Имя) = Неопределено) Тогда
	//	ЭтаФорма.ВладелецФормы.ДокументОбъект.ПередИнициализацией();
	//КонецЕсли;
	
	Если (НЕ БизнесПроцессОбъект.Стартован И БизнесПроцессОбъект.Завершен) 
		ИЛИ (БизнесПроцессОбъект.Стартован И БизнесПроцессОбъект.Завершен) 
		ИЛИ (НЕ БизнесПроцессОбъект.Стартован И НЕ БизнесПроцессОбъект.Завершен И БизнесПроцессОбъект.Состояние = _Отозван()) Тогда
		
		//Если (БизнесПроцессОбъект.ИнициаторПодписания = ПараметрыСеансаТекущийПользователь()) Тогда 
		Если (НЕ (БизнесПроцессОбъект.Состояние = _Отозван() 
			ИЛИ БизнесПроцессОбъект.Состояние = _Отклонен()) И БылоЛиХотьОдноПодписание()) Тогда
				Сообщить("Нельзя повторно инициировать документ, который уже кем-либо подписан.");
				Возврат;
			КонецЕсли;
			
			Если (Вопрос("Вы уверенны, что хотите повторно инициировать подписание?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет) Тогда
				Возврат;
			КонецЕсли;
			
			_Маршрут = БизнесПроцессОбъект.МаршрутПодписания;
			
			ЗавершитьВсеОткрытыеЗадачи(БизнесПроцессОбъект.Ссылка);
			ПрочитатьБП();
			
			БизнесПроцессОбъект.МаршрутПодписания = _Маршрут;
			
			ЗаполнитьМаршрутПодписания(БизнесПроцессОбъект.МаршрутПодписания, БизнесПроцессОбъект.ПодписываемыйОбъект);
			ЗаписатьБП();
			ПрочитатьБП();

			//ЭтаФорма.Обновить();
		//Иначе
		//	Сообщить("Повторно инициировать подписание может только начавший его пользователь!");
		//	_ОтменитьТранзакцию();
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Попытка
		БизнесПроцессОбъект.ТекущийПриориет = ВернутьТекущийПриоритетЛок(1000);
		ПерейтиКСледующемуПриоритетуЛок(БизнесПроцессОбъект.ТекущийПриориет);
		ДобавитьВИсториюСобытиеЛок("Инициация");
		
		БизнесПроцессОбъект.Состояние = _НаПодписании();
		БизнесПроцессОбъект.ИнициаторПодписания = ПараметрыСеансаТекущийПользователь();
		
		Если (НЕ БизнесПроцессОбъект.Стартован) ИЛИ (БизнесПроцессОбъект.Стартован И БизнесПроцессОбъект.Завершен) Тогда
			_ТекБП = СогласованиеДокументов.ПолучитьТекущийБизнесПроцессДляОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект);
			
			Если НЕ _ТекБП.Пустая() И НЕ (_ТекБП = БизнесПроцессОбъект.Ссылка) Тогда
				ПоказатьПредупреждение(, "Подписание уже инициировано", 30);
				
				Модифицированность = Ложь;
				_ОтменитьТранзакцию();
				
				ЭтаФорма.Закрыть();
				
				Возврат;
			КонецЕсли;
			//БизнесПроцессОбъект.ДопСообщение = ВернутьТекстДопСообщения(БизнесПроцессОбъект.ПодписываемыйОбъект);
			
			БизнесПроцессОбъект.Стартован = Ложь;
			БизнесПроцессОбъект.Завершен = Ложь;
			ЗаписатьБП();
			СтартБП();
		Иначе
			ПоказатьПредупреждение(, "Подписание уже инициировано", 30);
		КонецЕсли;
		
		_ЗафиксироватьТранзакцию();
		ПрочитатьБП();
		
		//ЭтаФорма.Обновить();
	Исключение
		Сообщить(ОписаниеОшибки());

		_ОтменитьТранзакцию();
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБП()
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	
	Если НЕ ЗначениеЗаполнено(БП.Дата) Тогда
		БП.Дата = ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере();
	КонецЕсли;
	
	БП.Записать();
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаСервере
Процедура СтартБП()
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	БП.Старт();
	БП.Прочитать();
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаСервере
Процедура ПрочитатьБП()
	//БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	//БП.Прочитать();
	БП = БизнесПроцессОбъект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьВсеОткрытыеЗадачи(_БП)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодписаниеТаблицаПодписания.СозданнаяЗадача
	               |ИЗ
	               |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
	               |ГДЕ
	               |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
	               |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача.Выполнена = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет УБЫВ";
						  
	Запрос.УстановитьПараметр("Ссылка", _БП);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.СозданнаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачаОбъект = Выборка.СозданнаяЗадача.ПолучитьОбъект();
		ЗадачаОбъект.Примечание = "Завершено при повторной инициации.";
		ЗадачаОбъект.ПроводитьОбработкуВыполнения = Ложь;
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура _НачатьТранзакцию()
	НачатьТранзакцию();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура _ОтменитьТранзакцию()
	//ОтменитьТранзакцию();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура _ЗафиксироватьТранзакцию()
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура Подписать()
	_НачатьТранзакцию();
	
	Попытка
		ОставитьФормуОткрытой = Ложь;
		УстановитьПризнак(_Подписан(), Истина);
		ЗаписатьБП();
		_ЗафиксироватьТранзакцию();
		ПрочитатьБП();
		//ЭтаФорма.Обновить();
		
		//Если НЕ ОставитьФормуОткрытой Тогда
		//	ЗакрытьФормуБизнесПроцессаИВладельца();
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		_ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Ознакомлен()
	_НачатьТранзакцию();
	
	Попытка
		СписокДоступныхСостояний = Новый СписокЗначений();
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
		ОставитьФормуОткрытой = Ложь;
		УстановитьПризнак(_Ознакомлен(), Истина, СписокДоступныхСостояний,Ложь);
		ЗаписатьБП();
		ПрочитатьБП();
		_ЗафиксироватьТранзакцию();
		
		//ЭтаФорма.Обновить();
		
		//Если НЕ ОставитьФормуОткрытой Тогда
		//	ЗакрытьФормуБизнесПроцессаИВладельца();
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		_ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьКонтрольУстановитьПризнак(_Ссылка, _СледующийПриоритет)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПодписаниеТаблицаПодписания.Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
	                      |ГДЕ
	                      |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
	                      |	И ПодписаниеТаблицаПодписания.Приоритет = &Приоритет
	                      |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача.Выполнена = ИСТИНА
	                      |	И (НЕ ПодписаниеТаблицаПодписания.СостояниеПодписи В (&Ознакомление))");
						  
	Запрос.УстановитьПараметр("Ссылка", _Ссылка);
	Запрос.УстановитьПараметр("Приоритет", _СледующийПриоритет);	
	
	СписокОзнакомления = Новый СписокЗначений();
	СписокОзнакомления.Добавить(_НаОзнакомлении());
	СписокОзнакомления.Добавить(_Ознакомлен());
	
	Запрос.УстановитьПараметр("Ознакомление",СписокОзнакомления);
	Возврат Запрос.Выполнить().Выбрать().Следующий();
КонецФункции	
	
&НаКлиенте
Процедура УстановитьПризнак(Признак,ЗадачаВыполнена,СписокДоступныхСостояний = Неопределено,ПроводитьОбработкуВыполнения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Необходимо сначала инициировать подписание", 30);
		Возврат;
	Конецесли;
	
	//p.lukashov(19.07.2019) --->
	Если Признак = ПредопределенноеЗначение("Перечисление.но_СостояниеПодписи.Подписан")
			И ТипЗнч(БизнесПроцессОбъект.ПодписываемыйОбъект) = Тип("ДокументСсылка.но_ЗаявкаНаБронированиеАВМ") Тогда
			
		Если НЕ ПроверитьВозможностьПодписанияЗаявкаНаБронированиеАВМ() Тогда
			
			Сообщить("Невозможно подписать документ! Назначьте все монтажки!");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли; 
	//p.lukashov(19.07.2019) <---
	
	Если СписокДоступныхСостояний = Неопределено Тогда
		СписокДоступныхСостояний = Новый СписокЗначений;
		СписокДоступныхСостояний.Добавить(_НаПодписании());
		СписокДоступныхСостояний.Добавить(_Приостановлен());
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
	КонецЕсли;
	
	Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
		ПоказатьПредупреждение(, "Вы не имеете право подписи в этом маршруте!", 30);
		ОставитьФормуОткрытой = Истина;
		Возврат;
	КонецЕсли;
	
	СледующийПриоритет = ВернутьТекущийПриоритетЛок(БизнесПроцессОбъект.ТекущийПриориет);
	
	Если ВернутьКонтрольУстановитьПризнак(БизнесПроцессОбъект.Ссылка, СледующийПриоритет) Тогда
		ПоказатьПредупреждение(, "Документ ушел дальше", 30);
		Возврат;
	КонецЕсли;
		
	_ДопПараметры = Новый Структура();
	_ДопПараметры.Вставить("Признак", Признак);
	_ДопПараметры.Вставить("ЗадачаВыполнена", ЗадачаВыполнена);
	_ДопПараметры.Вставить("СписокДоступныхСостояний", СписокДоступныхСостояний);
	_ДопПараметры.Вставить("ПроводитьОбработкуВыполнения", ПроводитьОбработкуВыполнения);
	
	_ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПризнакКомментарийЗавершение", ЭтаФорма, _ДопПараметры);
	
	_Парам = Новый Структура();
	_Парам.Вставить("_Заголовок", "Введите комментарий");
	_Парам.Вставить("_Строка", "");
	
	ОткрытьФорму("ОбщаяФорма.РедактироватьСтрокуУправляемая", _Парам, ЭтаФорма, , , , _ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакКомментарийЗавершение(Результат, _ДопПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		УстановитьПризнакЛок(БизнесПроцессОбъект.Ссылка, _ДопПараметры.Признак, _ДопПараметры.ЗадачаВыполнена, _ДопПараметры.СписокДоступныхСостояний, _ДопПараметры.ПроводитьОбработкуВыполнения, Результат);
		ПрочитатьБП();
		
		Оповестить("ВыполненаЗадача");
		
		УстВидимость();
	Иначе	
		ОставитьФормуОткрытой = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакЛок(_Ссылка, Признак, ЗадачаВыполнена, СписокДоступныхСостояний, ПроводитьОбработкуВыполнения, лПримечание)
	ТЗ = НетПраваПодписи(_Ссылка, СписокДоступныхСостояний, Истина, _Ссылка.ПодписываемыйОбъект);
	
	Для Каждого Выборка Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.СозданнаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗадачаОбъект = Выборка.СозданнаяЗадача.ПолучитьОбъект();
		ЗадачаОбъект.Примечание = лПримечание;
		ЗадачаОбъект.Состояние = Признак;
		ЗадачаОбъект.ПроводитьОбработкуВыполнения = ПроводитьОбработкуВыполнения;
		
		Если ЗадачаВыполнена Тогда
			Если ЗадачаОбъект.Выполнена Тогда
				ЗадачаОбъект.Записать();
			Иначе
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
		Иначе
			ЗадачаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартинкиОтклонитьНажатие(Элемент)
	Если НЕ ФлПолеКартинкиОтклонитьДоступность Тогда 
		Возврат;
	КонецЕсли;

	_НачатьТранзакцию();
	
	Попытка
		СогласованиеДокументов.ЗаписатьЗаписьВИсторииСогласования(БизнесПроцессОбъект.ПодписываемыйОбъект, _Отклонен());
		УстановитьПризнак(_Отклонен(), Истина);
		СогласованиеДокументов.УдалитьЗаписьВИсторииСогласования(БизнесПроцессОбъект.ПодписываемыйОбъект);
		_ЗафиксироватьТранзакцию();
		ПрочитатьБП();
		//ЭтаФорма.Обновить();
		//ЗакрытьФормуБизнесПроцессаИВладельца();
	Исключение
		Сообщить(ОписаниеОшибки());
		_ОтменитьТранзакцию();
	КонецПопытки;
	
	УстВидимость();
КонецПроцедуры

&НаСервереБезКонтекста
Функция _Отклонен()
	Возврат Перечисления.но_СостояниеПодписи.Отклонен;
КонецФункции

&НаСервереБезКонтекста
Функция _Отозван()
	Возврат Перечисления.но_СостояниеПодписи.Отозван;
КонецФункции

&НаСервереБезКонтекста
Функция _Ознакомлен()
	Возврат Перечисления.но_СостояниеПодписи.Ознакомлен;
КонецФункции

&НаСервереБезКонтекста
Функция _Подписан()
	Возврат Перечисления.но_СостояниеПодписи.Подписан;
КонецФункции

&НаСервереБезКонтекста
Функция _Ожидает()
	Возврат Перечисления.но_СостояниеПодписи.Ожидает;
КонецФункции

&НаСервереБезКонтекста
Функция _НаПодписании()
	Возврат Перечисления.но_СостояниеПодписи.НаПодписании;
КонецФункции

&НаСервереБезКонтекста
Функция _НаОзнакомлении()
	Возврат Перечисления.но_СостояниеПодписи.НаОзнакомлении;
КонецФункции

&НаСервереБезКонтекста
Функция но_СостояниеПодписиПустаяСсылка()
	Возврат Перечисления.но_СостояниеПодписи.ПустаяСсылка();
КонецФункции

&НаСервереБезКонтекста
Функция _Приостановлен()
	Возврат Перечисления.но_СостояниеПодписи.Приостановлен;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыСеансаТекущийПользователь()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыСеансаТекущийПользовательФизЛицо()
	Возврат ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо;
КонецФункции

&НаСервере
Функция ТаблицаПодписанияСодержитТекПользователя()
	ТЗ = БизнесПроцессОбъект.ТаблицаПодписания.Выгрузить();
	Возврат НЕ (ТЗ.Найти(ПараметрыСеансаТекущийПользователь(), "Сотрудник") = Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРеквизитДокументаЛок(_Объект, _ИмяРеквизита)
	Возврат СогласованиеДокументов.ЕстьРеквизитДокумента(_ИмяРеквизита, _Объект.Метаданные());
КонецФункции

&НаСервереБезКонтекста
Функция ОтветственныйИзОбъекта(_Объект)
	Возврат _Объект.Ответственный;
КонецФункции

&НаКлиенте
Процедура ПолеКартинкиОтозватьНажатие(Элемент)
	Если НЕ ФлПолеКартинкиОтозватьДоступность Тогда 
		Возврат;
	КонецЕсли;
	
	_НачатьТранзакцию();
	
	Попытка
		Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Ссылка) Тогда
			ПоказатьПредупреждение(, "Необходимо сначала инициировать подписание", 30);
			Возврат;
		Конецесли;
		
		СогласованиеДокументов.ЗаписатьЗаписьВИсторииСогласования(БизнесПроцессОбъект.ПодписываемыйОбъект, _Отозван());
		
		СписокДоступныхСостояний = Новый СписокЗначений;
		СписокДоступныхСостояний.Добавить(_Подписан());

		Если ЕстьРеквизитДокументаЛок(БизнесПроцессОбъект.ПодписываемыйОбъект, "Ответственный") И
			 НЕ ТаблицаПодписанияСодержитТекПользователя()
			 И (ОтветственныйИзОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект) = ПараметрыСеансаТекущийПользователь()
			 ИЛИ ОтветственныйИзОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект) = ПараметрыСеансаТекущийПользовательФизЛицо()
			 ИЛИ БизнесПроцессОбъект.ИнициаторПодписания = ПараметрыСеансаТекущийПользователь()) Тогда
			 
			  //Если БизнесПроцессОбъект.Состояние = _Подписан() Тогда
			  //  	Предупреждение("Документ уже утвержден");
			  //  	Возврат;
			  //  КонецЕсли;
				
			_ОписаниеОповещения = Новый ОписаниеОповещения("ОтозватьЗавершение", ЭтаФорма);
			
			_Парам = Новый Структура();
			_Парам.Вставить("_Заголовок", "Введите комментарий");
			_Парам.Вставить("_Строка", "");
			
			ОткрытьФорму("ОбщаяФорма.РедактироватьСтрокуУправляемая", _Парам, ЭтаФорма, , , , _ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОтозватьПодпись();
			СогласованиеДокументов.УдалитьЗаписьВИсторииСогласования(БизнесПроцессОбъект.ПодписываемыйОбъект);
			
			_ЗафиксироватьТранзакцию();
			ПрочитатьБП();
			УстВидимость();
		КонецЕсли;
		
		//ЭтаФорма.Обновить();
		//ЗакрытьФормуБизнесПроцессаИВладельца();
	Исключение
		Сообщить(ОписаниеОшибки());
		_ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЗавершение(Результат, _ДопПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		_НачатьТранзакцию();
		
		Попытка
			ПрочитатьБП();
			БизнесПроцессОбъект.Завершен = Ложь;
			БизнесПроцессОбъект.Стартован = Ложь;
			
			БизнесПроцессОбъект.Состояние = _Отозван();
			ДобавитьВИсториюСобытиеЛок("Отозван инициатором");
			ЗаписатьБП();
			
			ВыполнитьЗадачиПриОтзыве(Результат);
			
			ПрочитатьБП();
			УстВидимость();
			
			_ЗафиксироватьТранзакцию();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			_ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачиПриОтзыве(Причина)
	Для Каждого СтрокаТаблицыПодписания Из БизнесПроцессОбъект.ТаблицаПодписания Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыПодписания.СозданнаяЗадача) Тогда
			ЗадачаО = СтрокаТаблицыПодписания.СозданнаяЗадача.ПолучитьОбъект();
			ЗадачаО.ДатаВыполнения = ТекущаяДата();
			ЗадачаО.Сотрудник = ПараметрыСеансаТекущийПользователь();
			
			Если ЗадачаО.Состояние = _НаОзнакомлении()
			 ИЛИ ЗадачаО.Состояние = _Ознакомлен() Тогда
				ЗадачаО.Состояние = _Ознакомлен();
			Иначе
				ЗадачаО.Состояние = _Отозван();
			КонецЕсли;
			
			ЗадачаО.Примечание = "Отозван инициатором по причине:" + Причина;
			ЗадачаО.ПроводитьОбработкуВыполнения = Ложь;
			ЗадачаО.Записать();
			ЗадачаО.ВыполнитьЗадачу();
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Отозвать() Экспорт
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	
	БП.Прочитать();
	
	Если НЕ БП.Завершен Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПодписаниеТаблицаПодписания.СозданнаяЗадача
		                      |ИЗ
		                      |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
		                      |ГДЕ
		                      |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
		                      |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача <> &ПустаяЗадача
		                      |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача.Выполнена = ЛОЖЬ");
							  
		Запрос.УстановитьПараметр("ПустаяЗадача", Задачи.СогласованиеДокумента.ПустаяСсылка());
		Запрос.УстановитьПараметр("Ссылка", БП.Ссылка);
		ВыборкаПоставленныхЗадач = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоставленныхЗадач.Следующий() Цикл
			ЗО = ВыборкаПоставленныхЗадач.СозданнаяЗадача.ПолучитьОбъект();
			
			Если (ЗО <> Неопределено) Тогда
				ЗО.Состояние = но_СостояниеПодписиПустаяСсылка();
				ЗО.ВыполнитьЗадачу();
			КонецЕсли;
		КонецЦикла;
		
		БП.Прочитать();
	Конецесли;
	
	Массив1 = БП.ТаблицаПодписания.НайтиСтроки(Новый Структура("СостояниеПодписи", _НаОзнакомлении()));
	Массив2 = БП.ТаблицаПодписания.НайтиСтроки(Новый Структура("СостояниеПодписи", _Ознакомлен()));
	
	МассивЗадачнаОзнакомление = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
		МассивЗадачнаОзнакомление.Добавить(ЭлементМассива);	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
		МассивЗадачнаОзнакомление.Добавить(ЭлементМассива);	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивЗадачнаОзнакомление Цикл
		ЗадачаНаОзнакомление = ЭлементМассива.СозданнаяЗадача.ПолучитьОбъект();
		
		Если (ЗадачаНаОзнакомление <> Неопределено) Тогда
			ЗадачаНаОзнакомление.УстановитьПометкуУдаления(Истина);	
		Конецесли;
		
		БП.ТаблицаПодписания.Удалить(ЭлементМассива);
	КонецЦикла;

	_Приоритет = БП.ВернутьПредыдущийПриоритет(БП.ТекущийПриориет);
	
	БП.ТекущийПриориет = _Приоритет;//Выборка.Приоритет;
	БП.Завершен = Ложь;
	БП.Стартован = Ложь;
	
	БП.ПерейтиКСледующемуПриоритету(_Приоритет);//Выборка.Приоритет);
	БП.Индекс = БП.Индекс + 1;
	ДобавитьВИсториюСобытиеЛок("Отозван");
	БП.Записать();
	БП.Заблокировать();
	БП.Старт();
	БП.Разблокировать();
	БП.Прочитать();
	
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры
	
&НаКлиенте
Процедура ОтозватьПодпись() Экспорт
	
	Если НЕ ДоступноОтозвать() Тогда
		ПоказатьПредупреждение(, "Вы не имеете право подпись в этом маршруте или документ ушел дальше!", 30);
		Возврат;
	КонецЕсли;
	
	Отозвать();
	Оповестить("ВыполненаЗадача");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭтаФорма.Параметры.Свойство("Док") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	_Документ = ЭтаФорма.Параметры.Док;
	
	Если ЗначениеЗаполнено(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
		Возврат;
	Конецесли;
	
	лОбъект = Неопределено;
	
	Попытка 
		лОбъект = _Документ;	
	Исключение
		Возврат;
	КонецПопытки;
	
	Если лОбъект = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	лБППодписания = СогласованиеДокументов.ПолучитьТекущийБизнесПроцессДляОбъекта(лОбъект.ССылка);
	
	Если лБППодписания.Пустая() Тогда
		БизнесПроцессОбъект.ПодписываемыйОбъект = лОбъект.Ссылка;
	Иначе
		ЗначениеВДанныеФормы(лБППодписания.ПолучитьОбъект(), БизнесПроцессОбъект);
	КонецЕсли;	
	
	Элементы.ОткрытьБП.Видимость = РольДоступна("ПолныеПрава");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НетПраваПодписи(_Ссылка, СписокДоступныхСостояний = Неопределено, _ВернутьТЗ = Ложь, _ПодписываемыйОбъект)
//&НаСервере
//Функция НетПраваПодписи(СписокДоступныхСостояний = Неопределено)
	//_Ссылка = БизнесПроцессОбъект.Ссылка;
	
	Если СписокДоступныхСостояний = Неопределено Тогда
		СписокДоступныхСостояний = Новый СписокЗначений;
		СписокДоступныхСостояний.Добавить(_НаПодписании());
		СписокДоступныхСостояний.Добавить(_Приостановлен());
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
	КонецЕсли;
	
	СписокСтадий = СогласованиеДокументов.ВернутьПолныйСписокРолей(ПараметрыСеансаТекущийПользователь(), Истина);
	
	_Метаданные = _ПодписываемыйОбъект.Метаданные();
	
	Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", _Метаданные) ИЛИ ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", _Метаданные) Тогда 
		_Аналитика = ?(ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", _Метаданные), _ПодписываемыйОбъект.ЦФО, _ПодписываемыйОбъект.Проект);
		_Продюсеры = но_Документооборот.ВернутьПродюсеров(_Аналитика);
		
		Если НЕ (_Продюсеры.Найти(ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо) = Неопределено) Тогда
			СписокСтадий.Добавить(Справочники.но_РолиДокументооборота.Продюсер);
		КонецЕсли;
		
		_ГлавныеРежиссеры = но_Документооборот.ВернутьГлавныхРежиссеров(_Аналитика);
		
		Если НЕ (_ГлавныеРежиссеры.Найти(ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо) = Неопределено) Тогда
			СписокСтадий.Добавить(Справочники.но_РолиДокументооборота.ГлавныйРежиссер);
		КонецЕсли;
		
		//p.lukashov(26.03.2019) --->
		_ДиректорСтудии = но_Документооборот.ВернутьДиректоровСтудии(_Аналитика);
		
		Если НЕ (_ДиректорСтудии.Найти(ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо) = Неопределено) Тогда
			СписокСтадий.Добавить(Справочники.но_РолиДокументооборота.ДиректорСтудии);
		КонецЕсли;
		
		_ИсполнительныйПродюсерСтудии = но_Документооборот.ВернутьИсполнительныхПродюсеровСтудии(_Аналитика);
		
		Если НЕ (_ИсполнительныйПродюсерСтудии.Найти(ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо) = Неопределено) Тогда
			СписокСтадий.Добавить(Справочники.но_РолиДокументооборота.ИсполнительныйПродюсерСтудии);
		КонецЕсли;
		//p.lukashov(26.03.2019) <---
		
	КонецЕсли;
	
	//p.lukashov(06.03.2019) --->
	Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ОтветственныйЗаЦФО", _Метаданные) Тогда
		
		Если ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо = _ПодписываемыйОбъект.ОтветственныйЗаЦФО Тогда
			СписокСтадий.Добавить(Справочники.но_РолиДокументооборота.ОтветственныйЗаЦФОЗаявкаНаАВМ);	
		КонецЕсли;
		
	КонецЕсли;	
	//p.lukashov(06.03.2019) <---
		
	ПодразделениеИДолжностьРаботника = СогласованиеДокументов.ВернутьПодразделениеИДолжность(ПараметрыСеансаТекущийПользователь());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПодписаниеТаблицаПодписания.СозданнаяЗадача,
	                      |	ПодписаниеТаблицаПодписания.НомерСтроки,
	                      |	ПодписаниеТаблицаПодписания.Приоритет КАК Приоритет
	                      |ИЗ
	                      |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
	                      |ГДЕ
	                      |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
	                      |	И ((НЕ ПодписаниеТаблицаПодписания.Стадия = &СтадияПустая)
	                      |				И ПодписаниеТаблицаПодписания.Стадия В (&СписокСтадий)
	                      |			ИЛИ ПодписаниеТаблицаПодписания.СозданнаяЗадача В
	                      |				(ВЫБРАТЬ
	                      |					СогласованиеДокументаАдресаты.Ссылка
	                      |				ИЗ
	                      |					Задача.СогласованиеДокумента.Адресаты КАК СогласованиеДокументаАдресаты
	                      |				ГДЕ
	                      |					(СогласованиеДокументаАдресаты.Ссылка.БизнесПроцесс = &Ссылка
	                      |							И (СогласованиеДокументаАдресаты.Подразделение <> &ПодразделениеПустое
	                      |								И СогласованиеДокументаАдресаты.Подразделение В (&Подразделение)
	                      |								И СогласованиеДокументаАдресаты.Должность В (&Должность))
						  |						ИЛИ (СогласованиеДокументаАдресаты.Сотрудник <> &СотрудникПустое
	                      |							И СогласованиеДокументаАдресаты.Сотрудник = &Сотрудник)
	                      |						ИЛИ СогласованиеДокументаАдресаты.РольДокументооборота В (&СписокСтадий))))
	                      |	И ПодписаниеТаблицаПодписания.СостояниеПодписи В(&СписокДоступныхСостояний)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Приоритет УБЫВ");

	Запрос.УстановитьПараметр("СписокДоступныхСостояний",СписокДоступныхСостояний);
	Запрос.УстановитьПараметр("СписокСтадий", СписокСтадий);
	Запрос.УстановитьПараметр("СтадияПустая", Неопределено);	
	Запрос.УстановитьПараметр("Ссылка", _Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеПустое", Справочники.ур_ПодразделенияОрганизации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СотрудникПустое", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеансаТекущийПользовательФизЛицо());
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеИДолжностьРаботника.Подразделение);
	Запрос.УстановитьПараметр("Должность", ПодразделениеИДолжностьРаботника.Должность);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если _ВернутьТЗ Тогда
    	Возврат Выборка;
	Иначе
		Возврат (Выборка.Количество() = 0);
	КонецЕсли;
КонецФункции

//&НаСервере
//Процедура МаршрутНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
//		БизнесПроцессОбъект.ТаблицаПодписания.Очистить();
//		Возврат;
//	Конецесли;
//	
//	Если БизнесПроцессОбъект.ПодписываемыйОбъект.ПометкаУдаления Тогда
//		БизнесПроцессОбъект.ТаблицаПодписания.Очистить();
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//						  |	МаршрутыСогласования.Ссылка КАК МаршрутПодписания
//						  |ИЗ
//						  |	Справочник.но_МаршрутыСогласования КАК МаршрутыСогласования
//						  |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.но_ТипыДокументов КАК ТипыДокументов
//						  |		ПО ТипыДокументов.Ссылка = МаршрутыСогласования.ТипДокумента
//						  |ГДЕ
//						  |	НЕ ТипыДокументов.ПометкаУдаления
//						  |	И НЕ МаршрутыСогласования.ПометкаУдаления
//						  |	И (ТипыДокументов.ТипДокумента = &ТипДокумента1
//						  |	ИЛИ ТипыДокументов.ТипДокумента = &ТипДокумента2)");
//						  
//	Запрос.УстановитьПараметр("ТипДокумента1", БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные().Имя);
//	Запрос.УстановитьПараметр("ТипДокумента2", БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные().Синоним);
//	Элемент.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МаршрутПодписания"));
//КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЭтаФорма.ВладелецФормы = Неопределено) Тогда
	//	Если ЗначениеЗаполнено(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
	//		Возврат;
	//	Конецесли;
	//	
	//	лОбъект = Неопределено;
	//	
	//	Попытка 
	//		лОбъект = _Документ;	
	//	Исключение
	//		Возврат;
	//	КонецПопытки;
	//	
	//	Если лОбъект = Неопределено Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//	
	//	//Если Мод(лОбъект) Тогда
	//	//	Попытка
	//	//		лОбъект.Записать();
	//	//	Исключение
	//	//		Сообщение = Новый СообщениеПользователю;
	//	//		Сообщение.Текст = "Не удалось сохранить изменения по причине " + ОписаниеОшибки();
	//	//		Сообщение.Поле = "";
	//	//		Сообщение.УстановитьДанные();
	//	//		Сообщение.Сообщить();
	//	//		
	//	//		Для Каждого ЭлФормы Из ЭтаФорма.Элементы Цикл
	//	//			Попытка
	//	//				Если (ЭлФормы.Имя <> "Закрыть") ТОгда
	//	//					ЭлФормы.Доступность = Ложь;
	//	//				КонецЕсли;
	//	//			Исключение
	//	//				//
	//	//			КонецПопытки;
	//	//		КонецЦикла;
	//	//	КонецПопытки;
	//	//КонецЕсли;
	КонецЕсли;

	//лБППодписания = СогласованиеДокументов.ПолучитьТекущийБизнесПроцессДляОбъекта(лОбъект.ССылка);
	//
	//Если лБППодписания.Пустая() Тогда
	//	БизнесПроцессОбъект.ПодписываемыйОбъект = лОбъект.Ссылка;
	//Иначе
	//	ЗначениеВДанныеФормы(лБППодписания.ПолучитьОбъект(), БизнесПроцессОбъект);
	//КонецЕсли;
	
	Если БизнесПроцессОбъект.МаршрутПодписания.Пустая() Тогда
		МаршрутПодписанияНачалоВыбораИзСписка(Элементы.МаршрутПодписания, Истина);
		 
		Если (Элементы.МаршрутПодписания.СписокВыбора.Количество() = 1) Тогда
			 БизнесПроцессОбъект.МаршрутПодписания = Элементы.МаршрутПодписания.СписокВыбора.Получить(0).Значение;
			 ЗаполнитьМаршрутПодписания(БизнесПроцессОбъект.МаршрутПодписания, БизнесПроцессОбъект.ПодписываемыйОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если (БизнесПроцессОбъект.Состояние = _НаПодписании()) ИЛИ
		 (БизнесПроцессОбъект.Состояние = _Подписан()) 		ИЛИ 
		 (БизнесПроцессОбъект.Состояние = _НаОзнакомлении()) ИЛИ 
		 (БизнесПроцессОбъект.Состояние = _Ознакомлен()) 	Тогда
			Элементы.МаршрутПодписания.Доступность = Ложь;
	КонецЕсли;
	
	//Элементы.МаршрутПодписания.СписокВыбора.Добавить(БизнесПроцессОбъект.МаршрутПодписания);
	ЭтаФорма.Модифицированность = Ложь;
	
	УстВидимость();	
КонецПроцедуры

&НаКлиенте
Процедура УстВидимость()
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Ссылка) Тогда 
		Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.МаршрутПодписания) Тогда 
			ФлПолеКартинкиПодписьДоступность 	= Ложь;
		Иначе
			ФлПолеКартинкиПодписьДоступность 	= Истина;
		КонецЕсли;
		
		ФлПолеКартинкиОтклонитьДоступность 	= Ложь;
		ФлПолеКартинкиОтозватьДоступность 	= Ложь;
	Иначе
		ФлПолеКартинкиПодписьДоступность 	= Истина;
		ФлПолеКартинкиОтклонитьДоступность 	= Истина;
		ФлПолеКартинкиОтозватьДоступность 	= Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Состояние) ИЛИ (БизнесПроцессОбъект.Состояние = _Отозван()) Тогда 
		СписокДоступныхСостояний = Новый СписокЗначений();
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
		
		Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
			Элементы.ПолеКартинкиПодпись.Подсказка = "Инициировать";
			Элементы.НадписьПодпись.Заголовок 		= "Инициировать";
		Иначе
			Элементы.ПолеКартинкиПодпись.Подсказка = "Ознакомиться";
			Элементы.НадписьПодпись.Заголовок 		= "Ознакомиться";
		КонецЕсли;		
		
		ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("инициировать" + ?(ФлПолеКартинкиПодписьДоступность, "активно", ""));
		
		Если НЕ (ТекКнопка = Неопределено) Тогда 
			Элементы.ПолеКартинкиПодпись.Картинка = ТекКнопка.Картинка;									
		КонецЕсли;
		
		ФлПолеКартинкиОтклонитьДоступность 	= Ложь;
		ФлПолеКартинкиОтозватьДоступность 	= Ложь;
	ИначеЕсли (БизнесПроцессОбъект.Состояние = _Отклонен()) Тогда	
		СписокДоступныхСостояний = Новый СписокЗначений();
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
		
		Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
			Элементы.ПолеКартинкиПодпись.Подсказка = "Инициировать";
			Элементы.НадписьПодпись.Заголовок 		= "Инициировать";
		Иначе
			Элементы.ПолеКартинкиПодпись.Подсказка = "Ознакомиться";
			Элементы.НадписьПодпись.Заголовок 		= "Ознакомиться";
		КонецЕсли;		
		
		ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("инициировать" + ?(ФлПолеКартинкиПодписьДоступность, "активно", ""));
		
		Если НЕ (ТекКнопка = Неопределено) Тогда 
			Элементы.ПолеКартинкиПодпись.Картинка = ТекКнопка.Картинка;									
		КонецЕсли;
		
		ФлПолеКартинкиОтклонитьДоступность = Ложь;
		ФлПолеКартинкиОтозватьДоступность = ДоступноОтозвать();
	ИначеЕсли (БизнесПроцессОбъект.Состояние = _НаПодписании()) Тогда	
		Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, , , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
			Элементы.ПолеКартинкиПодпись.Подсказка = "Нет прав подписи";
			Элементы.НадписьПодпись.Заголовок 		= "Визирование";
			ФлПолеКартинкиПодписьДоступность 	= Ложь;
		Иначе
			Элементы.ПолеКартинкиПодпись.Подсказка = "Подписать";
			Элементы.НадписьПодпись.Заголовок 		= "Подписать";
		КонецЕсли;		
		
		ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("подписать" + ?(ФлПолеКартинкиПодписьДоступность, "активно", ""));
		
		Если НЕ (ТекКнопка = Неопределено) Тогда 
			Элементы.ПолеКартинкиПодпись.Картинка = ТекКнопка.Картинка;									
		КонецЕсли;
		
		// Проверка доступности кнопок "Отозвать" и "Отклонить"
		ФлПолеКартинкиОтклонитьДоступность = ДоступноОтклонить();
		ФлПолеКартинкиОтозватьДоступность  = ДоступноОтозвать();
	ИначеЕсли (БизнесПроцессОбъект.Состояние = _Подписан()) Тогда	
		СписокДоступныхСостояний = Новый СписокЗначений();
		СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
		
		Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
			Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, , , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
				Элементы.ПолеКартинкиПодпись.Подсказка = "Нет прав подписи";
				Элементы.НадписьПодпись.Заголовок 		= "Визирование";
				ФлПолеКартинкиПодписьДоступность 	= Ложь;
			Иначе
				Элементы.ПолеКартинкиПодпись.Подсказка = "Подписать";
				Элементы.НадписьПодпись.Заголовок 		= "Подписать";
			КонецЕсли;
		Иначе
			Элементы.ПолеКартинкиПодпись.Подсказка = "Ознакомиться";
			Элементы.НадписьПодпись.Заголовок 		= "Ознакомиться";
		КонецЕсли;
		
		ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("подписать" + ?(ФлПолеКартинкиПодписьДоступность, "активно", ""));
		
		Если НЕ (ТекКнопка = Неопределено) Тогда 
			Элементы.ПолеКартинкиПодпись.Картинка = ТекКнопка.Картинка;									
		КонецЕсли;
		
		ФлПолеКартинкиОтклонитьДоступность = Ложь;
		
		//Если НЕ РольДоступна("но_ПравоАдминистрирования") Тогда
		//	ФлПолеКартинкиОтозватьДоступность = ДоступноОтозвать();
		//КонецЕсли;
	КонецЕсли;
	
	ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("отклонить" + ?(ФлПолеКартинкиОтклонитьДоступность, "активно", ""));
	
	Если НЕ (ТекКнопка = Неопределено) Тогда 
		Элементы.ПолеКартинкиОтклонить.Картинка = ТекКнопка.Картинка;									
	КонецЕсли;
	
	ТекКнопка = СписокКнопокСостоянийПодписи.НайтиПоЗначению("отозвать" + ?(ФлПолеКартинкиОтозватьДоступность, "активно", ""));
	
	Если НЕ (ТекКнопка = Неопределено) Тогда 
		Элементы.ПолеКартинкиОтозвать.Картинка = ТекКнопка.Картинка;									
	КонецЕсли;	
	
	ВывестиМаршрутПодписания(СписокКартинокСостоянийПодписи, ФлПолеКартинкиПодписьДоступность);
КонецПроцедуры

&НаСервере
Функция ДоступноОтклонить()
	_Ссылка = БизнесПроцессОбъект.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(_Ссылка) Тогда
		Возврат Ложь;
	Конецесли;
	
	СписокДоступныхСостояний = Новый СписокЗначений;
	СписокДоступныхСостояний.Добавить(_НаПодписании());
	СписокДоступныхСостояний.Добавить(_Приостановлен());
	СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
		
	Если НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, , БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");	
	СледующийПриоритет = БП.ВернутьСледующийПриоритет(БизнесПроцессОбъект.ТекущийПриориет);
	//ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПодписаниеТаблицаПодписания.Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
	                      |ГДЕ
	                      |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
	                      |	И ПодписаниеТаблицаПодписания.Приоритет = &Приоритет
	                      |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача.Выполнена = ИСТИНА
	                      |	И (НЕ ПодписаниеТаблицаПодписания.СостояниеПодписи В (&Ознакомление))");
						  
	Запрос.УстановитьПараметр("Ссылка", _Ссылка);
	Запрос.УстановитьПараметр("Приоритет", СледующийПриоритет);	
	
	СписокОзнакомления = Новый СписокЗначений();
	СписокОзнакомления.Добавить(_НаОзнакомлении());
	СписокОзнакомления.Добавить(_Ознакомлен());
	
	Запрос.УстановитьПараметр("Ознакомление", СписокОзнакомления);
	ВыборкаКонтроля = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаКонтроля.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ДоступноОтозвать()
	_Ссылка = БизнесПроцессОбъект.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(_Ссылка) Тогда
		Возврат Ложь;
	Конецесли;
	
	СписокДоступныхСостояний = Новый СписокЗначений();
	СписокДоступныхСостояний.Добавить(_Подписан());

	МетаданныеОбъекта =  БизнесПроцессОбъект.ПодписываемыйОбъект.Метаданные();
	
	Если СогласованиеДокументов.ЕстьРеквизитДокумента("Ответственный", МетаданныеОбъекта) 
		ИЛИ НЕ (БизнесПроцессОбъект.ТаблицаПодписания.Найти(ПараметрыСеансаТекущийПользователь(), "Сотрудник") = Неопределено
	 		И (ОтветственныйИзОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект) = ПараметрыСеансаТекущийПользователь()
	 		ИЛИ ОтветственныйИзОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект) = ПараметрыСеансаТекущийПользовательФизЛицо())) Тогда
	 
		Если (БизнесПроцессОбъект.ИнициаторПодписания = ПараметрыСеансаТекущийПользователь()) И НЕ (БизнесПроцессОбъект.ПодписываемыйОбъект.СостояниеДокумента = Перечисления.но_СтатусыДокумента.Утвержден) Тогда
			Возврат Истина;
		КонецЕсли;
	 
		СписокДоступныхСостояний = Новый СписокЗначений();
		СписокДоступныхСостояний.Добавить(_Подписан());
		
		СписокСтадий = СогласованиеДокументов.ВернутьПолныйСписокРолей(ПараметрыСеансаТекущийПользователь(), Истина);
		
		ПодразделениеИДолжностьРаботника = СогласованиеДокументов.ВернутьПодразделениеИДолжность(ПараметрыСеансаТекущийПользователь());
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПодписаниеТаблицаПодписания.СозданнаяЗадача,
		                      |	ПодписаниеТаблицаПодписания.НомерСтроки,
		                      |	ПодписаниеТаблицаПодписания.Приоритет КАК Приоритет
		                      |ИЗ
		                      |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
		                      |ГДЕ
		                      |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
		                      |	И НЕ ПодписаниеТаблицаПодписания.Стадия = &СтадияПустая
		                      |	И (ПодписаниеТаблицаПодписания.Стадия В (&СписокСтадий)
		                      |			ИЛИ ПодписаниеТаблицаПодписания.СозданнаяЗадача В
		                      |				(ВЫБРАТЬ
		                      |					СогласованиеДокументаАдресаты.Ссылка
		                      |				ИЗ
		                      |					Задача.СогласованиеДокумента.Адресаты КАК СогласованиеДокументаАдресаты
		                      |				ГДЕ
		                      |					(СогласованиеДокументаАдресаты.Ссылка.БизнесПроцесс = &Ссылка
		                      |							И (СогласованиеДокументаАдресаты.Подразделение <> &ПодразделениеПустое
		                      |								И СогласованиеДокументаАдресаты.Подразделение В (&Подразделение)
		                      |								И СогласованиеДокументаАдресаты.Должность В (&Должность))
		                      |						ИЛИ СогласованиеДокументаАдресаты.Сотрудник <> &СотрудникПустое
		                      |							И СогласованиеДокументаАдресаты.Сотрудник = &Сотрудник
		                      |						ИЛИ СогласованиеДокументаАдресаты.РольДокументооборота В (&СписокСтадий)))
		                      |			ИЛИ ПодписаниеТаблицаПодписания.Сотрудник = &СотрудникП)
		                      |	И ПодписаниеТаблицаПодписания.СостояниеПодписи В(&СписокДоступныхСостояний)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Приоритет УБЫВ");

		Запрос.УстановитьПараметр("СписокДоступныхСостояний", СписокДоступныхСостояний);
		Запрос.УстановитьПараметр("СписокСтадий", СписокСтадий);
		Запрос.УстановитьПараметр("СтадияПустая", Неопределено);			
		Запрос.УстановитьПараметр("Ссылка", _Ссылка);
		Запрос.УстановитьПараметр("ПодразделениеПустое", Справочники.ур_ПодразделенияОрганизации.ПустаяСсылка());	
		Запрос.УстановитьПараметр("СотрудникПустое", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеансаТекущийПользовательФизЛицо());
		Запрос.УстановитьПараметр("СотрудникП", ПараметрыСеансаТекущийПользователь());
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеИДолжностьРаботника.Подразделение);
		Запрос.УстановитьПараметр("Должность", ПодразделениеИДолжностьРаботника.Должность);	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");	
		СледующийПриоритет = БП.ВернутьСледующийПриоритет(Выборка.Приоритет);
		//ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	ПодписаниеТаблицаПодписания.Ссылка
							  |ИЗ
							  |	БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
							  |ГДЕ
							  |	ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
							  |	И ПодписаниеТаблицаПодписания.Приоритет = &Приоритет
							  |	И ПодписаниеТаблицаПодписания.СозданнаяЗадача.Выполнена = ИСТИНА
							  |	И ПодписаниеТаблицаПодписания.СостояниеПодписи <> &СостНаОзнакомлении
							  |	И ПодписаниеТаблицаПодписания.СостояниеПодписи <> &СостОзнакомлен");
							  
		Запрос.УстановитьПараметр("Ссылка", _Ссылка);
		Запрос.УстановитьПараметр("Приоритет", СледующийПриоритет);
		Запрос.УстановитьПараметр("СостНаОзнакомлении", _НаОзнакомлении());
		Запрос.УстановитьПараметр("СостОзнакомлен", _Ознакомлен());

		ВыборкаКонтроля = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаКонтроля.Следующий() Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ВернутьТЗИзТЧ()
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	//Адрес = ПоместитьВоВременноеХранилище(БП.ТаблицаПодписания.Выгрузить(), Новый УникальныйИдентификатор);
	Адрес = БП.ТаблицаПодписания.Выгрузить();
    Возврат Адрес;
КонецФункции

&НаСервере
Процедура ВывестиМаршрутПодписания(_СписокКартинокСостоянийПодписи, _ФлПолеКартинкиПодписьДоступность)
	ТаблБП = ВернутьТЗИзТЧ();
	
	Если ТаблБП.Количество() = 0 Тогда
		//Элементы.РамкаГруппыМаршрут.Видимость 	= Ложь;
		Элементы.ПанельМаршрут.Видимость 		= Ложь;
		Возврат;
	КонецЕсли;
	
	Пока НЕ Элементы.ПанельМаршрут.ПодчиненныеЭлементы.Количество() = 0 Цикл
		Элементы.Удалить(Элементы.ПанельМаршрут.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;	
	
	// Создаем группу в _Эл
	_ГрРГМ = Элементы.Добавить("РамкаГруппыМаршрут", Тип("ГруппаФормы"), Элементы.ПанельМаршрут);
	_ГрРГМ.Вид = ВидГруппыФормы.Страница;
	//_ГрРГМ.Отображение = ОтображениеОбычнойГруппы.Линия;
	_ГрРГМ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	_ГрРГМ.ОтображатьЗаголовок = Истина;
	_ГрРГМ.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
	_ГрРГМ.РастягиватьПоВертикали = Истина;
	
	_Эл = _ГрРГМ;
	
	ТаблБП.Колонки.Добавить("Имя");
		
	//начальные установки
	Для Каждого СтрБП Из ТаблБП Цикл
		СтрБП.Имя = СтрЗаменить("БП" + Строка(СтрБП.НомерСтроки)," ","");
		
		// Создаем группу в _Эл
		_Гр = Элементы.Добавить("Группа" + СтрБП.Имя, Тип("ГруппаФормы"), _Эл);
		_Гр.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		_Гр.Отображение = ОтображениеОбычнойГруппы.Линия;
		_Гр.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		_Гр.ОтображатьЗаголовок = Ложь;
		_Гр.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
		
		// Создаем Картинку в группе
		_Картинка = Элементы.Добавить("К" + СтрБП.Имя, Тип("ДекорацияФормы"), _Гр);
		_Картинка.Вид = ВидДекорацииФормы.Картинка;
		_Картинка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		_Картинка.Видимость = Истина;
		_Картинка.Доступность = Истина;
		_Картинка.РастягиватьПоВертикали = Истина;
		//_Картинка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		ТекСостояниеПодписи = _СписокКартинокСостоянийПодписи.НайтиПоЗначению(СтрБП.СостояниеПодписи);
		
		Если НЕ (ТекСостояниеПодписи = Неопределено) Тогда 
			_Картинка.Картинка = ТекСостояниеПодписи.Картинка;									
		КонецЕсли;
		
		флЖирныйТекст = Ложь;
		
		Если (БизнесПроцессОбъект.ТекущийПриориет > 0) Тогда 
			Если (БизнесПроцессОбъект.ТекущийПриориет = СтрБП.Приоритет) Тогда
				флЖирныйТекст = Истина;
				
				Если _ФлПолеКартинкиПодписьДоступность Тогда 
					_Картинка.Гиперссылка = Истина;
					//_Картинка.УстановитьДействие("Нажатие", Новый Действие("ПолеКартинкиПодписьНажатие"));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (БизнесПроцессОбъект.ТекущийПриориет = -1) И (БизнесПроцессОбъект.Завершен) Тогда
			Если (СтрБП.Приоритет = 0) И (СтрБП.СостояниеПодписи = _НаОзнакомлении()) Тогда 
				Если _ФлПолеКартинкиПодписьДоступность Тогда 
					СписокДоступныхСостояний = Новый СписокЗначений;
					СписокДоступныхСостояний.Добавить(_НаОзнакомлении());
					
					Выборка = НетПраваПодписи(БизнесПроцессОбъект.Ссылка, СписокДоступныхСостояний, Истина, БизнесПроцессОбъект.ПодписываемыйОбъект);
					
					Если НЕ (Выборка.Количество() = 0) Тогда
						Для Каждого _С Из Выборка Цикл
							Если (_С.НомерСтроки = СтрБП.НомерСтроки) И (_С.СозданнаяЗадача = СтрБП.СозданнаяЗадача) Тогда 						
								флЖирныйТекст = Истина;
								_Картинка.Гиперссылка = Истина;
								//_Картинка.УстановитьДействие("Нажатие", Новый Действие("ПолеКартинкиПодписьНажатие"));
								Прервать;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;										
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Создаем Надпись в группе
		// Если есть комментарий то добавляем вертикальную группу и в нее две надписи
		Если НЕ ПустаяСтрока(СтрБП.Комментарии) Тогда
			// Создаем группу в _Эл
			_Гр2 = Элементы.Добавить("Группа2" + СтрБП.Имя, Тип("ГруппаФормы"), _Гр);
			_Гр2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			_Гр2.Отображение = ОтображениеОбычнойГруппы.Нет;
			_Гр2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			_Гр2.ОтображатьЗаголовок = Ложь;
			_Гр2.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
		Иначе
			_Гр2 = _Гр;
		КонецЕсли;
		
		_Надпись = Элементы.Добавить("Н" + СтрБП.Имя, Тип("ДекорацияФормы"), _Гр2);
		_Надпись.Вид = ВидДекорацииФормы.Надпись;
		_Надпись.Видимость = Истина;
		_Надпись.Доступность = Истина;
		_Надпись.РастягиватьПоГоризонтали = Истина;
		_Надпись.РастягиватьПоВертикали = Истина;
		_Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		_Надпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		Если НЕ ПустаяСтрока(СтрБП.Комментарии) Тогда
			_Надпись2 = Элементы.Добавить("Н2" + СтрБП.Имя, Тип("ДекорацияФормы"), _Гр2);
			_Надпись2.Вид = ВидДекорацииФормы.Надпись;
			_Надпись2.Видимость = Истина;
			_Надпись2.Доступность = Истина;
			_Надпись2.РастягиватьПоГоризонтали = Истина;
			_Надпись2.РастягиватьПоВертикали = Истина;
			_Надпись2.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			_Надпись2.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		
		//p.lukashov(03.06.2019) --->	
		СтадияЗаполнение = ?(СтрБП.Стадия <> Справочники.но_РолиДокументооборота.ОтветственныйЗаЦФОЗаявкаНаАВМ, СтрБП.Стадия, БизнесПроцессОбъект.ПодписываемыйОбъект.ОтветственныйЗаЦФО);
		_Надпись.Заголовок = ?(НЕ ЗначениеЗаполнено(СтрБП.Сотрудник), ?(НЕ ЗначениеЗаполнено(СтрБП.Стадия), Строка(СтрБП.Подразделение) + " " + Строка(СтрБП.Должность), СтадияЗаполнение), СтрБП.Сотрудник);
		//p.lukashov(03.06.2019) <---
		
		Если (СтрБП.СостояниеПодписи = _Подписан()) ИЛИ (СтрБП.СостояниеПодписи = _Ознакомлен()) Тогда
			_Надпись.Заголовок = _Надпись.Заголовок + ". Подписан " + Строка(СтрБП.ДатаПодписания);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрБП.Комментарии) Тогда
			_Надпись2.Заголовок = " (" + СокрЛП(СтрБП.Комментарии) + ")";
			_Надпись2.Шрифт = ШрифтКомментария;
			_Надпись2.ЦветТекста = ЦветКомментария;
		КонецЕсли;
		
		_Надпись.Шрифт = ШрифтНадписи;
		
		Если флЖирныйТекст Тогда 
			_Надпись.Шрифт = ШрифтНадписиЖирный;
		Иначе
			_Надпись.Шрифт = ШрифтНадписи;
		КонецЕсли;

		Если ((СтрБП.СостояниеПодписи = _НаПодписании()) ИЛИ (СтрБП.СостояниеПодписи = _НаОзнакомлении())) Тогда
			Если НЕ ЗначениеЗаполнено(СтрБП.СозданнаяЗадача) Тогда
				_Надпись.ЦветТекста = ЦветОтсутствуетБП;
			Иначе
				Если НЕ СозданаЗадача(СтрБП.СозданнаяЗадача) Тогда
					_Надпись.ЦветТекста = ЦветОтсутствуетБП;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СозданаЗадача(_Задача)
	_Знч = Истина;
	
	Попытка
		_О = _Задача.ПолучитьОбъект();
		
		Если _О = Неопределено Тогда
			_Знч = Ложь;
		КонецЕсли;
	Исключение
		_Знч = Ложь;
	КонецПопытки;
	
	Возврат _Знч;
КонецФункции
	
&НаСервере
Процедура ЗаполнитьМаршрутПодписания(ТипМаршрутаСсылка, ОбъектВладелецСсылка) Экспорт
	БП = РеквизитФормыВЗначение("БизнесПроцессОбъект");
	
	БП.МаршрутПодписания = ТипМаршрутаСсылка;
	БП.ТаблицаПодписания.Очистить();
	
	_РуководительРавенИнициатору = Ложь;
	_РуководительРавенИнициаторуСтарый = Ложь;
	
	Для Каждого Строка Из ТипМаршрутаСсылка.ТаблицаПодписей Цикл
		Если ТипЗнч(Строка.УсловиеВхожденияВМаршрут) = Тип("Строка") Тогда
			Если НЕ ПустаяСтрока(Строка.УсловиеВхожденияВМаршрут) Тогда
				Если НЕ БизнесПроцессы.Подписание.ПроверитьСсылку(ОбъектВладелецСсылка, Строка.УсловиеВхожденияВМаршрут) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Конецесли;
			
		Если (Строка(Строка.Подразделение) <> "") И (Строка(Строка.Должность) <> "") Тогда
			НайдСтроки = БП.ТаблицаПодписания.НайтиСтроки(Новый Структура("Подразделение, Должность",Строка.Подразделение, Строка.Должность));
			
			Если НайдСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка(Строка.Сотрудник) <> "" Тогда
			Если БП.ТаблицаПодписания.Найти(Строка.Сотрудник,"Стадия") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		Если Строка(Строка.РольДокументооборота) <> "" Тогда
			Если БП.ТаблицаПодписания.Найти(Строка.РольДокументооборота,"Стадия") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если (Строка(Строка.Подразделение) <> "") И (Строка(Строка.Должность) <> "") Тогда
			стр = БП.ТаблицаПодписания.Добавить();
			стр.Подразделение 	= Строка.Подразделение;
			стр.Должность 		= Строка.Должность;
			стр.Приоритет 	 	= Строка.Приоритет;
			стр.Email 		 	= Строка.Email;
			стр.SMS 			= Строка.SMS;				
			стр.Редактирование 	= Строка.Редактирование;
		ИначеЕсли Строка(Строка.Сотрудник) <> "" Тогда
			стр = БП.ТаблицаПодписания.Добавить();
			стр.Стадия 			= Строка.Сотрудник;	
			стр.Приоритет 	 	= Строка.Приоритет;
			стр.Email 		 	= Строка.Email;
			стр.SMS 			= Строка.SMS;				
			стр.Редактирование 	= Строка.Редактирование;
		
		ИначеЕсли Строка(Строка.РольДокументооборота) <> "" Тогда 
	
			//p.lukashov(04.06.2019) --->	    
				Если Строка.РольДокументооборота = Справочники.но_РолиДокументооборота.ОтветственныйЗаЦФОЗаявкаНаАВМ 
						И НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.ПодписываемыйОбъект.ОтветственныйЗаЦФО) Тогда
					Продолжить;	
				КонецЕсли;
		    //p.lukashov(04.06.2019) <---
			
			стр = БП.ТаблицаПодписания.Добавить();
            стр.Стадия = Строка.РольДокументооборота;

			_Стадия = Неопределено;
			
			Если Строка.РольДокументооборота.Предопределенный Тогда
				_Стадия = БизнесПроцессы.Подписание.ВернутьПредопределенныйЭлементНаОснованииДокумента(Строка.РольДокументооборота, ОбъектВладелецСсылка, Неопределено); //Строка.РольДокументооборота.ТипОтбора);
				
				Если НЕ ЗначениеЗаполнено(_Стадия) ИЛИ (ТипЗнч(_Стадия) = Тип("СписокЗначений") И _Стадия.Количество() = 0) Тогда
					БП.ТаблицаПодписания.Удалить(стр);
					Продолжить;
				КонецЕсли;
			Конецесли;
			
			Если НЕ ЗначениеЗаполнено(стр.Стадия) И НЕ ЗначениеЗаполнено(_Стадия) Тогда
				БП.ТаблицаПодписания.Удалить(стр);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(_Стадия) И ТипЗнч(_Стадия) = Тип("СписокЗначений") Тогда
				_Инд = 1;
				
				Для Каждого _С Из _Стадия Цикл
					//Если _ДокументДоступаКПомещениям Тогда
					//	_Приоритет = 500 + _Инд;
					//Иначе
						_Приоритет = Строка.Приоритет;
					//КонецЕсли;
					
					Если (_Инд > 1) Тогда
						стр = БП.ТаблицаПодписания.Добавить();
					КонецЕсли;
					
					стр.Стадия = _С.Значение;
					стр.Приоритет 	 	= _Приоритет;
					стр.Email 		 	= Строка.Email;
					стр.SMS 			= Строка.SMS;				
					стр.Редактирование 	= Строка.Редактирование;
					
					_Инд = _Инд + 1;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(_Стадия) Тогда
					стр.Стадия = _Стадия;
				КонецЕсли;
				
				стр.Приоритет 	 	= Строка.Приоритет;
				стр.Email 		 	= Строка.Email;
				стр.SMS 			= Строка.SMS;				
				стр.Редактирование 	= Строка.Редактирование;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	//-----------------Очиска
	МассивУдаляемыхСтрок = Новый Массив();
	НомерСтроки = 0;
	
	Пока НомерСтроки < БП.ТаблицаПодписания.Количество() Цикл
		СтрокаМаршрута = БП.ТаблицаПодписания[НомерСтроки];
		НомерСтроки = НомерСтроки + 1;
		
		Если ТипЗНЧ(СтрокаМаршрута.Стадия) = Тип("СправочникСсылка.но_РолиДокументооборота") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь КАК ОчищаемаяСтадия
			                      |ИЗ
			                      |	Справочник.но_РолиДокументооборота.УчастникиСогласования КАК но_РолиДокументооборотаУчастникиСогласования
			                      |ГДЕ
			                      |	но_РолиДокументооборотаУчастникиСогласования.Ссылка = &РольДокументооборота
			                      |	И но_РолиДокументооборотаУчастникиСогласования.Дата1 <= &ТекДата
			                      |	И (но_РолиДокументооборотаУчастникиСогласования.Дата2 >= &ТекДата
			                      |	ИЛИ но_РолиДокументооборотаУчастникиСогласования.Дата2 = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь");
								  
			Запрос.УстановитьПараметр("ТекДата", НачалоДня(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере()));
			Запрос.УстановитьПараметр("РольДокументооборота", СтрокаМаршрута.Стадия);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				УдаляемыеСтроки = БП.ТаблицаПодписания.НайтиСтроки(Новый Структура("Стадия", Выборка.ОчищаемаяСтадия));
				
				Если (УдаляемыеСтроки.Количество() = 0) Тогда
					Если ТипЗНЧ(Выборка.ОчищаемаяСтадия) = Тип("СправочникСсылка.Пользователи") Тогда
						Если ЗначениеЗаполнено(Выборка.ОчищаемаяСтадия.ур_ФизЛицо) Тогда
							УдаляемыеСтроки = БП.ТаблицаПодписания.НайтиСтроки(Новый Структура("Стадия",Выборка.ОчищаемаяСтадия.ур_ФизЛицо));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					УдаляемаяСтрока.Стадия = СтрокаМаршрута.Стадия;		
				КонецЦикла;
				
				Если УдаляемыеСтроки.Количество() > 0 Тогда
					БП.ТаблицаПодписания.Удалить(СтрокаМаршрута);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	СтрокаСвертки = "";
	
	Для Каждого РеквизитТЧ Из Метаданные.БизнесПроцессы.Подписание.ТабличныеЧасти.ТаблицаПодписания.Реквизиты Цикл
		СтрокаСвертки = СтрокаСвертки + РеквизитТЧ.Имя+",";
	КонецЦикла;
	
	СтрокаСвертки = Лев(СтрокаСвертки,СтрДлина(СтрокаСвертки)-1);
	БП.ТаблицаПодписания.Свернуть(СтрокаСвертки,"");
	БП.ТаблицаПодписания.Сортировать("Приоритет Убыв");		 
	
	//Заполнение таблицы уведомлений
	БП.ТаблицаУведомлений.Очистить();
	
	Для Каждого Строка Из БП.МаршрутПодписания.ТаблицаУведомлений Цикл
		Если ТипЗнч(Строка.УсловиеВхожденияВМаршрут) = Тип("Строка") Тогда
			Если НЕ ПустаяСтрока(Строка.УсловиеВхожденияВМаршрут) Тогда
				Если НЕ БизнесПроцессы.Подписание.ПроверитьСсылку(ОбъектВладелецСсылка, Строка.УсловиеВхожденияВМаршрут) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Конецесли;
		
		Если (Строка(Строка.Подразделение) <> "") И (Строка(Строка.Должность) <> "") Тогда
			Стр 				= БП.ТаблицаУведомлений.Добавить();
			Стр.Подразделение 	= Строка.Подразделение;
			Стр.Должность 		= Строка.Должность; 
			Стр.Email 			= Строка.Email;
			Стр.SMS 			= Строка.SMS;
		ИначеЕсли Строка(Строка.Сотрудник) <> "" Тогда
			Стр 			= БП.ТаблицаУведомлений.Добавить();
			Стр.Получатель 	= Строка.Сотрудник;
			Стр.Email 		= Строка.Email;
			Стр.SMS 		= Строка.SMS;
		ИначеЕсли Строка(Строка.РольДокументооборота) <> "" Тогда 
			Отв = Строка.РольДокументооборота;
			
			Если Строка.РольДокументооборота.Предопределенный Тогда
				Отв = БизнесПроцессы.Подписание.ВернутьПредопределенныйЭлементНаОснованииДокумента(Строка.РольДокументооборота, ОбъектВладелецСсылка);
			КонецЕсли;
			
			Стр 			= БП.ТаблицаУведомлений.Добавить();
			Стр.Получатель 	= Отв;
			Стр.Email 		= Строка.Email;
			Стр.SMS 		= Строка.SMS;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(БП, "БизнесПроцессОбъект");
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияПриИзменении(Элемент)
	Если НЕ (БизнесПроцессОбъект.ТаблицаПодписания.Количество() = 0) Тогда
		Если Вопрос("Перезаполнить маршрут подписания?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМаршрутПодписания(БизнесПроцессОбъект.МаршрутПодписания, БизнесПроцессОбъект.ПодписываемыйОбъект);
	УстВидимость();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектПомеченНаУдаление(_Объект)
	Возврат _Объект.ПометкаУдаления;
КонецФункции

&НаКлиенте
Процедура МаршрутПодписанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
		//ЭтотОбъект.ТаблицаПодписания.Очистить();
		Возврат;
	Конецесли;
	
	Если ОбъектПомеченНаУдаление(БизнесПроцессОбъект.ПодписываемыйОбъект) Тогда
		//ЭтотОбъект.ТаблицаПодписания.Очистить();
		Возврат;
	КонецЕсли;
	
	Элементы.МаршрутПодписания.СписокВыбора.Очистить();
	_СП = БизнесПроцессыВернутьСписокМаршрутовДляОбъекта(БизнесПроцессОбъект.ПодписываемыйОбъект);
	
	Для Каждого _З Из _СП Цикл
		Элементы.МаршрутПодписания.СписокВыбора.Добавить(_З.Значение, _З.Представление);
	КонецЦикла;	
		
	//ЗаполнитьСписокВыбораМаршрута();
КонецПроцедуры 

&НаСервереБезКонтекста
Функция БизнесПроцессыВернутьСписокМаршрутовДляОбъекта(_ПодписываемыйОбъект)
	Возврат БизнесПроцессы.Подписание.ВернутьСписокМаршрутовДляОбъекта(_ПодписываемыйОбъект);
КонецФункции

&НаКлиенте
Процедура СписокПодписания(Команда)
	
	Если БизнесПроцессОбъект.ПодписываемыйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТД = ВернутьТДСписокПодписания();
	ТД.Показать();
	
КонецПроцедуры

//p.lukashov(19.07.2019) --->
&НаСервере
Функция ПроверитьВозможностьПодписанияЗаявкаНаБронированиеАВМ()

	МожноПодписывать = Истина;
	КолвоПодписантов = БизнесПроцессОбъект.ТаблицаПодписания.Количество();
	НайдСтрокиПодписавшие = БизнесПроцессОбъект.ТаблицаПодписания.НайтиСтроки(Новый Структура("СостояниеПодписи", 
																				Перечисления.но_СостояниеПодписи.Подписан));
																																						
	СтруктураПоиска = Новый Структура("Ресурс", Справочники.ур_Ресурсы.ПустаяСсылка());
																				
	Если КолвоПодписантов - 1 = НайдСтрокиПодписавшие.Количество() 
		И БизнесПроцессОбъект.ПодписываемыйОбъект.ЗанятостьАВМ.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		МожноПодписывать = Ложь;
	КонецЕсли; 
	
	Возврат МожноПодписывать;

КонецФункции
//p.lukashov(19.07.2019) <---

СписокКнопокСостоянийПодписи = Новый СписокЗначений;
СписокКнопокСостоянийПодписи.Добавить("инициировать","",,БиблиотекаКартинок.КнопкаИнициировать);
СписокКнопокСостоянийПодписи.Добавить("инициироватьактивно","",,БиблиотекаКартинок.КнопкаИнициироватьАктивно);
СписокКнопокСостоянийПодписи.Добавить("отклонить","",,БиблиотекаКартинок.КнопкаОтклонить);
СписокКнопокСостоянийПодписи.Добавить("отклонитьактивно","",,БиблиотекаКартинок.КнопкаОтклонитьАктивно);
СписокКнопокСостоянийПодписи.Добавить("подписать","",,БиблиотекаКартинок.КнопкаПодписать);
СписокКнопокСостоянийПодписи.Добавить("подписатьактивно","",,БиблиотекаКартинок.КнопкаПодписатьАктивно);
СписокКнопокСостоянийПодписи.Добавить("ознакомиться","",,БиблиотекаКартинок.КнопкаПодписать);
СписокКнопокСостоянийПодписи.Добавить("ознакомитьсяактивно","",,БиблиотекаКартинок.КнопкаПодписатьАктивно);
СписокКнопокСостоянийПодписи.Добавить("отозвать","",,БиблиотекаКартинок.КнопкаОтклонить);
СписокКнопокСостоянийПодписи.Добавить("отозватьактивно","",,БиблиотекаКартинок.КнопкаОтклонитьАктивно);

СписокКартинокСостоянийПодписи = Новый СписокЗначений();
СписокКартинокСостоянийПодписи.Добавить(_НаОзнакомлении(),"",,БиблиотекаКартинок.КнопкаОзнакомлен);
СписокКартинокСостоянийПодписи.Добавить(_НаПодписании(),"",,БиблиотекаКартинок.КнопкаПодписано);
СписокКартинокСостоянийПодписи.Добавить(_Ожидает(),"",,БиблиотекаКартинок.КнопкаПодписано);
СписокКартинокСостоянийПодписи.Добавить(_Ознакомлен(),"",,БиблиотекаКартинок.КнопкаОзнакомленАктивно);
СписокКартинокСостоянийПодписи.Добавить(_Отклонен(),"",,БиблиотекаКартинок.КнопкаОтклоненоАктивно);
СписокКартинокСостоянийПодписи.Добавить(_Отозван(),"",,БиблиотекаКартинок.КнопкаОтозваноАктивно);
СписокКартинокСостоянийПодписи.Добавить(_Подписан(),"",,БиблиотекаКартинок.КнопкаПодписаноАктивно);

ШрифтНадписи = Новый Шрифт("Courier New", 8, , Истина, , ); 
ШрифтНадписиЖирный = Новый Шрифт("Courier New", 8, Истина, Истина, , );
ШрифтКомментария = Новый Шрифт("Courier New", 8, Истина, , , );

ЦветКомментария = Новый Цвет(60, 165, 60);
ЦветОтсутствуетБП = Новый Цвет(255, 200, 200);

ОставитьФормуОткрытой = Ложь;