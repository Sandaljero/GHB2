
Функция ВернутьИмяДокументаПоТипу(_ТипДокумента) Экспорт 
	Возврат ?(ЗначениеЗаполнено(_ТипДокумента) И ТипЗнч(_ТипДокумента) = Тип("СправочникСсылка.но_ТипыДокументов"), СокрЛП(_ТипДокумента.ТипДокумента), "");
КонецФункции

Функция АнализДоступныхДействий(ПодписываемыйОбъект, ДатаЗаписи, Пользователь) Экспорт 
	ТекущийБизнесПроцесс = СогласованиеДокументов.ПолучитьТекущийБизнесПроцессДляОбъекта(ПодписываемыйОбъект);
	СписокСтадий = СогласованиеДокументов.ВернутьПолныйСписокРолей(ПараметрыСеанса.ТекущийПользователь,Истина);
	
	ПодразделениеИДолжностьРаботника = СогласованиеДокументов.ВернутьПодразделениеИДолжность(Пользователь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВложенныйЗапрос.Редактирование
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ПодписаниеТаблицаПодписания.Редактирование) КАК Редактирование
			|	ИЗ
			|		БизнесПроцесс.Подписание.ТаблицаПодписания КАК ПодписаниеТаблицаПодписания
			|	ГДЕ
			|		ПодписаниеТаблицаПодписания.Ссылка = &Ссылка
			|	И ((НЕ ПодписаниеТаблицаПодписания.Стадия = &СтадияПустая)
			|				И ПодписаниеТаблицаПодписания.Стадия В (&СписокСтадий)
			|			ИЛИ ПодписаниеТаблицаПодписания.СозданнаяЗадача В
			|				(ВЫБРАТЬ
			|					СогласованиеДокументаАдресаты.Ссылка
			|				ИЗ
			|					Задача.СогласованиеДокумента.Адресаты КАК СогласованиеДокументаАдресаты
			|				ГДЕ
			|	                СогласованиеДокументаАдресаты.Ссылка.БизнесПроцесс = &Ссылка
			|					И СогласованиеДокументаАдресаты.Подразделение <> &ПодразделениеПустое						  						  
			|					И СогласованиеДокументаАдресаты.Подразделение В (&Подразделение)
			|					И СогласованиеДокументаАдресаты.Должность В (&Должность)
		    |						ИЛИ (СогласованиеДокументаАдресаты.Сотрудник <> &СотрудникПустое
            |							И СогласованиеДокументаАдресаты.Сотрудник = &Сотрудник)
            |						ИЛИ СогласованиеДокументаАдресаты.РольДокументооборота В (&СписокСтадий)))
			|		И ((НЕ(ПодписаниеТаблицаПодписания.Ссылка.Состояние = &Подписан
			|						И ПодписаниеТаблицаПодписания.Ссылка.Завершен))
			|				ИЛИ ПодписаниеТаблицаПодписания.Ссылка.Завершен)
			|		И ПодписаниеТаблицаПодписания.СостояниеПодписи = &Состояние) КАК ВложенныйЗапрос
			|ГДЕ
			|	(НЕ ВложенныйЗапрос.Редактирование ЕСТЬ NULL )");
	
	Запрос.УстановитьПараметр("Подписан", Перечисления.но_СостояниеПодписи.Подписан);					  
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийБизнесПроцесс);
	Запрос.УстановитьПараметр("СписокСтадий", СписокСтадий);
	Запрос.УстановитьПараметр("Состояние", Перечисления.но_СостояниеПодписи.НаПодписании);
	Запрос.УстановитьПараметр("СтадияПустая",Неопределено);	
	Запрос.УстановитьПараметр("ПодразделениеПустое",Справочники.ур_ПодразделенияОрганизации.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Подразделение",ПодразделениеИДолжностьРаботника.Подразделение);
	Запрос.УстановитьПараметр("Должность",ПодразделениеИДолжностьРаботника.Должность);
	Запрос.УстановитьПараметр("СотрудникПустое",Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь.ур_ФизЛицо);
	
	ТаблицыВозможностей = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицыВозможностей.Количество() = 1 Тогда
		Если ТаблицыВозможностей[0].Редактирование = Null Тогда
			Знч = Ложь;
		Иначе
			Знч = Булево(Не ТаблицыВозможностей[0].Редактирование);	
		Конецесли;
	Иначе
		Знч = Истина;
	КонецЕсли;
	
	Возврат Знч; 
КонецФункции

Функция ПеречислениеСтатусыДокументаЧерновик() Экспорт 
	Возврат Перечисления.но_СтатусыДокумента.Черновик;
КонецФункции

Функция ВернутьПустоеЗначениеСправочника(_ИмяСправочника) Экспорт 
	Возврат Справочники[_ИмяСправочника].ПустаяСсылка();
КонецФункции

Функция ВернутьПустоеЗначениеПеречисления(_ИмяПеречисления) Экспорт 
	Возврат Перечисления[_ИмяПеречисления].ПустаяСсылка();
КонецФункции

Функция ПараметрыСеансаТекущийПользователь() Экспорт 
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

Функция УпаковатьМассивВСтроку(_Массив) Экспорт 
	Возврат ЗначениеВСтрокуВнутр(_Массив);
КонецФункции

Функция ИзвлечьМассивИзСтроки(_Массив) Экспорт 
	Возврат ЗначениеИзСтрокиВнутр(_Массив);
КонецФункции

Функция ВернутьСписокИспользуемыхВПодписанииТЧ(_Имя, _Синоним) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТипыДокументов.ИмяТЧ КАК ИмяТЧ
	                      |ИЗ
	                      |	Справочник.но_ТипыДокументов.ИспользуемыеТЧ КАК ТипыДокументов
	                      |ГДЕ
	                      |	(ТипыДокументов.Ссылка.ТипДокумента = &Код1
	                      |			ИЛИ ТипыДокументов.Ссылка.ТипДокумента = &Код2)
	                      |	И ТипыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ");
						  
	Запрос.УстановитьПараметр("Код1", _Имя);
	Запрос.УстановитьПараметр("Код2", _Синоним);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяТЧ");
КонецФункции

Функция ВернутьЗапросДляОбъектаМетаданных(_МетаданныеОбъекта)
	СписокРеквизитовОбъекта = Новый СписокЗначений();
	
	ЕстьОтвественныйВРеквизитах = СогласованиеДокументов.ЕстьРеквизитДокумента("Ответственный", _МетаданныеОбъекта);
	
	Для Каждого ОР Из Метаданные.ОбщиеРеквизиты Цикл
		Если НЕ (СписокРеквизитовОбъекта.НайтиПоЗначению(ОР.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;		
		
		Если СогласованиеДокументов.ЕстьРеквизитДокумента(ОР.Имя, _МетаданныеОбъекта) Тогда
			СписокРеквизитовОбъекта.Добавить(ОР.Имя, ОР.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбрРеквизит Из _МетаданныеОбъекта.Реквизиты Цикл
		СписокРеквизитовОбъекта.Добавить(ОбрРеквизит.Имя, ОбрРеквизит.Синоним);
	КонецЦикла;
	
	СписокТЧ = ВернутьСписокИспользуемыхВПодписанииТЧ(_МетаданныеОбъекта.Имя, _МетаданныеОбъекта.Синоним);
	
	СписокТЧОбъекта = Новый СписокЗначений();
	
	Для Каждого ТаблОбъекта Из _МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если (СписокТЧ.Найти(ТаблОбъекта.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРеквизитовТЧ = Новый СписокЗначений();
		
		Для Каждого РеквизитТЧ Из ТаблОбъекта.Реквизиты Цикл
			ТипЗНЧРеквизита = РеквизитТЧ.Тип.Типы();
			
			Если ТипЗНЧРеквизита.Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗНЧРеквизита[0] <> Тип("Число") Тогда 
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитовТЧ.Добавить(РеквизитТЧ.Имя,РеквизитТЧ.Синоним);
		КонецЦикла;
		
		Если СписокРеквизитовТЧ.Количество() > 0 Тогда
			СписокТЧОбъекта.Добавить(СписокРеквизитовТЧ,ТаблОбъекта.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	СписокТЧОбъекта_НеЧисла = Новый СписокЗначений();
	МассивСтроки = Новый Массив();
	
	Для Каждого ТаблОбъекта Из _МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если (СписокТЧ.Найти(ТаблОбъекта.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРеквизитовТЧ = Новый СписокЗначений();
		
		Для Каждого РеквизитТЧ Из ТаблОбъекта.Реквизиты Цикл
			ТипЗНЧРеквизита = РеквизитТЧ.Тип.Типы();
			
			Если ТипЗНЧРеквизита.Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗНЧРеквизита[0] = Тип("Число") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ТипЗНЧРеквизита[0] = Тип("Строка") Тогда
				МассивСтроки.Добавить(ТаблОбъекта.Имя + "_" + РеквизитТЧ.Имя);
			КонецЕсли;
			
			СписокРеквизитовТЧ.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
		КонецЦикла;
		
		Если СписокРеквизитовТЧ.Количество() > 0 Тогда
			СписокТЧОбъекта_НеЧисла.Добавить(СписокРеквизитовТЧ, ТаблОбъекта.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
		|ПроверяемыйОбъект.Ссылка";
		
	// ХЗ	
	//Для Каждого Стр Из СписокРеквизитовОбъекта Цикл
	//	ТекстЗапроса = ТекстЗапроса + ",
	//		|ПроверяемыйОбъект." + Стр.Значение;
	//КонецЦикла;
		
	МассивИменДопРеквизитов = Новый Массив;
	
	Для Каждого ТаблОбъекта из СписокТЧОбъекта Цикл
		Для Каждого РеквизитТЧ из ТаблОбъекта.Значение Цикл
			ТекстЗапроса = ТекстЗапроса+",
				|Сумма(ПроверяемыйОбъект"+ТаблОбъекта.Представление+"."+РеквизитТЧ.Значение+") КАК Сумма_"+ТаблОбъекта.Представление+"_"+РеквизитТЧ.Значение;	
					
			МассивИменДопРеквизитов.Добавить("ПроверяемыйОбъект"+ТаблОбъекта.Представление+"."+РеквизитТЧ.Значение);
		КонецЦикла;
	КонецЦикла;
	
	// Комментирую суммы по документу
	//Для Каждого ТаблОбъекта Из СписокТЧОбъекта Цикл
	//	Для Каждого РеквизитТЧ Из ТаблОбъекта.Значение Цикл
	//		ТекстЗапроса = ТекстЗапроса + ",
	//			|ПроверяемыйОбъект" + ТаблОбъекта.Представление + "_ВЗ." + "Сумма_" + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение + " КАК Сумма_" + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение + "_Док";	
	//			
	//		МассивИменДопРеквизитов.Добавить("ПроверяемыйОбъект" + ТаблОбъекта.Представление + "_ВЗ." + "Сумма_" + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение);
	//	КонецЦикла;
	//КонецЦикла;
	
	Для Каждого ТаблОбъекта Из СписокТЧОбъекта_НеЧисла Цикл
		Для Каждого РеквизитТЧ Из ТаблОбъекта.Значение Цикл
			Если МассивСтроки.Найти(ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение) = Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + ",
					|ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение + " КАК " + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение;	
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
					|Выразить(ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение + " КАК Строка(100)) КАК " + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение;	
			КонецЕсли;
				
			МассивИменДопРеквизитов.Добавить(?(МассивСтроки.Найти(ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение) = Неопределено, "ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение, "Выразить(ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение + " КАК Строка(100))"));
		КонецЦикла;
	КонецЦикла;
	
	ПолноеИмяОбъекта = _МетаданныеОбъекта.ПолноеИмя();
	ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		| " + ПолноеИмяОбъекта + " КАК ПроверяемыйОбъект";
		
	Для Каждого ТаблОбъекта Из СписокТЧОбъекта Цикл
		ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + " КАК ПроверяемыйОбъект" + ТаблОбъекта.Представление + "
			|ПО ПроверяемыйОбъект.Ссылка = ПроверяемыйОбъект" + ТаблОбъекта.Представление + ".Ссылка"; 	
	КонецЦикла;
	
	// Комментирую суммы по документу
	//Для Каждого ТаблОбъекта Из СписокТЧОбъекта Цикл
	//	ТекстЗапроса = ТекстЗапроса + "
	//		|ЛЕВОЕ СОЕДИНЕНИЕ  (ВЫБРАТЬ Ссылка";
	//		
	//	Для Каждого РеквизитТЧ Из ТаблОбъекта.Значение Цикл
	//		ТекстЗапроса = ТекстЗапроса + ",
	//			|Сумма(" + ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение + ") КАК Сумма_" + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение;	
	//	КонецЦикла;	
	//		
	//	ТекстЗапроса = ТекстЗапроса + "	
	//		|ИЗ "+ ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + " ГДЕ " + ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + ".Ссылка = &ССылка 
	//		|СГРУППИРОВАТЬ по " + ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + ".ССылка)
	//		|КАК ПроверяемыйОбъект"+ТаблОбъекта.Представление + "_ВЗ
	//		|ПО ПроверяемыйОбъект.Ссылка = ПроверяемыйОбъект" + ТаблОбъекта.Представление + "_ВЗ.Ссылка"; 	
	//КонецЦикла;
	
	Для Каждого ТаблОбъекта Из СписокТЧОбъекта_НеЧисла Цикл
		_НайденаТЧ = Ложь;
		
		Для Каждого _Стр Из СписокТЧОбъекта Цикл
			Если _Стр.Представление = ТаблОбъекта.Представление Тогда
				_НайденаТЧ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ _НайденаТЧ Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ПолноеИмяОбъекта + "." + ТаблОбъекта.Представление + " КАК ПроверяемыйОбъект"+ТаблОбъекта.Представление + "
				|ПО ПроверяемыйОбъект.Ссылка = ПроверяемыйОбъект" + ТаблОбъекта.Представление + ".Ссылка"; 	
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтвественныйВРеквизитах ТОгда
		ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|	НазначенияРаботниковСрезПоследних.Подразделение КАК Подразделение_s,
			|	НазначенияРаботниковСрезПоследних.Должность КАК Должность_s,
			|	Пользователи.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Назначения КАК НазначенияРаботниковСрезПоследних
			|		ПО Пользователи.ур_ФизЛицо = НазначенияРаботниковСрезПоследних.Ссылка
			|ГДЕ
			|	Пользователи.Ссылка = &ОтветственныйЗаОбъект
			|		И НазначенияРаботниковСрезПоследних.Ссылка.Неактуален = ДАТАВРЕМЯ(1,1,1)
			|					) КАК ДанныеДолжностей
			|ПО ПроверяемыйОбъект.Ответственный = ДанныеДолжностей.Пользователь";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		| ГДЕ ПроверяемыйОбъект.Ссылка = &Ссылка";
		
	Если СписокРеквизитовОбъекта.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|";
			
		Для Каждого ЭлементСписка Из СписокРеквизитовОбъекта Цикл
			ТекстЗапроса = ТекстЗапроса + "ПроверяемыйОбъект." + ЭлементСписка.Значение + ",
				|";
		КонецЦикла;
		
		Для Каждого ЭлементМасива Из МассивИменДопРеквизитов Цикл
			ТекстЗапроса = ТекстЗапроса + ЭлементМасива + ",
			|";
		КонецЦикла;
		
		Если ЕстьОтвественныйВРеквизитах ТОгда
			ТекстЗапроса = ТекстЗапроса + "ДанныеДолжностей.Подразделение_s, ДанныеДолжностей.Должность_s,
				|";	
		КонецЕсли;
			
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);
		ТекстЗапроса = ТекстЗапроса + "}";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|СГРУППИРОВАТЬ ПО ПроверяемыйОбъект.Ссылка
		|";
		
	Для Каждого ТаблОбъекта Из СписокТЧОбъекта_НеЧисла Цикл
		Для Каждого РеквизитТЧ Из ТаблОбъекта.Значение Цикл
			Если МассивСтроки.Найти(ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение) = Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + ",
					|ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение;	
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
					|Выразить(ПроверяемыйОбъект" + ТаблОбъекта.Представление + "." + РеквизитТЧ.Значение + " КАК Строка(100))";	
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
		
	// Комментирую суммы по документу
	//Для Каждого ТаблОбъекта Из СписокТЧОбъекта Цикл
	//	Для Каждого РеквизитТЧ Из ТаблОбъекта.Значение Цикл
	//		ТекстЗапроса = ТекстЗапроса + ",
	//			|ПроверяемыйОбъект" + ТаблОбъекта.Представление + "_ВЗ." + "Сумма_" + ТаблОбъекта.Представление + "_" + РеквизитТЧ.Значение;	
	//	КонецЦикла;
	//КонецЦикла;	
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьПостроительДляОбъекта(_МетаданныеОбъекта) Экспорт
 	СКД = Справочники.но_МаршрутыСогласования.ПолучитьМакет("СКД");
	
	ИД = СКД.ИсточникиДанных.Добавить();
    ИД.Имя = "ОсновнойИсточникДанных";
    ИД.ТипИсточникаДанных = "Local";
	
    ТекстЗапроса = ВернутьЗапросДляОбъектаМетаданных(_МетаданныеОбъекта);
    
    НаборДанных = СКД.НаборыДанных.Найти("ОсновнойНаборДанных");
    НаборДанных.Запрос = ТекстЗапроса;
    
    НаборДанных.ИсточникДанных = "ОсновнойИсточникДанных";
    
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    
	//a.romanchuk(31.07.2012) --->
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	//a.romanchuk(31.07.2012) <---
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));	
	
	//добавить группировку
	ГруппировкаПоСсылка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаПоСсылка.Имя = "Ссылка";
	ГруппировкаПоСсылка.Использование = Истина;

	//созданная группировка по полю "Склад"
	ПолеГруппировкиСклад = ГруппировкаПоСсылка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
	ПолеГруппировкиСклад.Использование      = Истина;
	ПолеГруппировкиСклад.Поле               = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировкиСклад.ТипГруппировки 	= ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировкиСклад.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

	//добавить выводимые поля в группировке: склад и количество остаток для данной группировки
	ВыбранноеПоле = ГруппировкаПоСсылка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));     
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	Возврат КомпоновщикНастроек;
	
	//НастраиваемыйПостроитель = Новый ПостроительОтчета();
	//НастраиваемыйПостроитель.Текст = ВернутьЗапросДляОбъектаМетаданных(_МетаданныеОбъекта);
	//НастраиваемыйПостроитель.ЗаполнитьНастройки();
	//
	//Возврат НастраиваемыйПостроитель;
КонецФункции

Функция ПолучитьОтчетДляОбъекта(_МетаданныеОбъекта) Экспорт
 	СКД = Справочники.но_МаршрутыСогласования.ПолучитьМакет("СКД");
	
	ИД = СКД.ИсточникиДанных.Добавить();
    ИД.Имя = "ОсновнойИсточникДанных";
    ИД.ТипИсточникаДанных = "Local";
	
    ТекстЗапроса = ВернутьЗапросДляОбъектаМетаданных(_МетаданныеОбъекта);
    
    НаборДанных = СКД.НаборыДанных.Найти("ОсновнойНаборДанных");
    НаборДанных.Запрос = ТекстЗапроса;
    
    НаборДанных.ИсточникДанных = "ОсновнойИсточникДанных";
    
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));	
	
	//добавить группировку
	ГруппировкаПоСсылка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаПоСсылка.Имя = "Ссылка";
	ГруппировкаПоСсылка.Использование = Истина;

	//созданная группировка по полю "Склад"
	ПолеГруппировкиСклад = ГруппировкаПоСсылка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
	ПолеГруппировкиСклад.Использование      = Истина;
	ПолеГруппировкиСклад.Поле               = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировкиСклад.ТипГруппировки 	= ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировкиСклад.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

	//добавить выводимые поля в группировке: склад и количество остаток для данной группировки
	ВыбранноеПоле = ГруппировкаПоСсылка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));     
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");

	////добавим детальные записи как подгруппу в "Склад". Все отличие только в том, что нет группировки
	//ДетальныеЗаписи = ГруппировкаПоСсылка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	//ДетальныеЗаписи.Имя = "Детальные";
	//ДетальныеЗаписи.Использование = Истина;
	//
	////добавить выводимые поля в детальных записях: Номенклатуру и количество остаток 
	//ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));   
	//ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	//ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));   
	//ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоОстаток");
	
	_Структура = Новый Структура();
	_Структура.Вставить("СКД", СКД);
	_Структура.Вставить("КН", КомпоновщикНастроек);
	
	Возврат _Структура;
	
	//НастраиваемыйПостроитель = Новый ПостроительОтчета();
	//НастраиваемыйПостроитель.Текст = ВернутьЗапросДляОбъектаМетаданных(_МетаданныеОбъекта);
	//НастраиваемыйПостроитель.ЗаполнитьНастройки();
	//
	//Возврат НастраиваемыйПостроитель;
КонецФункции

Процедура ВосстановитьХранилищеОтборовВПостроитель(НастраиваемыйПостроитель, ХранилищеОтборов) Экспорт;
	Если ПустаяСтрока(ХранилищеОтборов) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтборов = ИзвлечьМассивИзСтроки(ХранилищеОтборов);
	
	Если ТипЗнч(МассивОтборов) <> Тип("Массив") Тогда
		Возврат;
	Конецесли;
	
	Пока НастраиваемыйПостроитель.Настройки.Отбор.Элементы.Количество() > 0 Цикл
		НастраиваемыйПостроитель.Настройки.Отбор.Элементы.Удалить(0);
	КонецЦикла;
	
	МассивДоступныхПолей = НастраиваемыйПостроитель.Настройки.Отбор.ДоступныеПоляОтбора;
	
	ВосстановитьОтборы(НастраиваемыйПостроитель.Настройки.Отбор, МассивОтборов, МассивДоступныхПолей);
КонецПроцедуры

Процедура ВосстановитьОтборы(_Отбор, _МассивОтборов, _МассивДоступныхПолей)
	Для Каждого ЭлементМассива Из _МассивОтборов Цикл
		Если ТипЗнч(ЭлементМассива) <> Тип("Структура") Тогда
			Возврат;
		Конецесли;
		
		Если ЭлементМассива.ТипДанных = 1 Тогда
			_ЭлементОтбора = _Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			_ЭлементОтбора.Использование = Истина;
			_ЭлементОтбора.ТипГруппы = ЭлементМассива.ТипГруппы;
			_ЭлементОтбора.Представление = ЭлементМассива.Представление;
			
			ВосстановитьОтборы(_ЭлементОтбора, ЭлементМассива.ПодчиненныеЭлементы, _МассивДоступныхПолей)
		Иначе
			НайденноеДоступноеПоле = _МассивДоступныхПолей.НайтиПоле(ЭлементМассива.ЛевоеЗначение);
			
			Если (НайденноеДоступноеПоле <> Неопределено) Тогда
				_ЭлементОтбора = _Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				_ЭлементОтбора.Использование = Истина;
				_ЭлементОтбора.ЛевоеЗначение = ЭлементМассива.ЛевоеЗначение;
				_ЭлементОтбора.ВидСравнения = ЭлементМассива.ВидСравнения;
				_ЭлементОтбора.ПравоеЗначение = ЭлементМассива.ПравоеЗначение;
				_ЭлементОтбора.Представление = ЭлементМассива.Представление;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Функция ВернутьПродюсеровДляОбъекта(_Объект) Экспорт 
	
	_Метаданные = _Объект.Метаданные();
	_Знч = Неопределено;	
	
	Если ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ЦФО", _Метаданные) И ТипЗнч(_Объект.ЦФО) = Тип("СправочникСсылка.ур_ЦФО") Тогда
		
		_Знч = _Объект.ЦФО;
		
	ИначеЕсли ур_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", _Метаданные) И ТипЗнч(_Объект.Проект) = Тип("СправочникСсылка.ур_Проекты") Тогда
		
		_Знч = _Объект.Проект.ЦФО;
		
	КонецЕсли;
	
	Возврат ВернутьПродюсеров(_Знч);
	
КонецФункции

Функция ВернутьПродюсеров(Знач _Аналитика, _Дата = Неопределено) Экспорт 
	
	Возврат ВернутьСотрудниковПоРолиРуководителя(Справочники.но_РолиДокументооборота.Продюсер, _Аналитика, _Дата);
	
КонецФункции

//p.lukashov(26.03.2019) --->
Функция ВернутьДиректоровСтудии(Знач _Аналитика, _Дата = Неопределено) Экспорт 
	
	Возврат ВернутьСотрудниковПоРолиРуководителя(Справочники.но_РолиДокументооборота.ДиректорСтудии, _Аналитика, _Дата);
	
КонецФункции

Функция ВернутьИсполнительныхПродюсеровСтудии(Знач _Аналитика, _Дата = Неопределено) Экспорт 
	
	Возврат ВернутьСотрудниковПоРолиРуководителя(Справочники.но_РолиДокументооборота.ИсполнительныйПродюсерСтудии, _Аналитика, _Дата);
	
КонецФункции
//p.lukashov(26.03.2019) <---

Функция ВернутьГлавныхРежиссеров(Знач _Аналитика, _Дата = Неопределено) Экспорт 
	
	Возврат ВернутьСотрудниковПоРолиРуководителя(Справочники.но_РолиДокументооборота.ГлавныйРежиссер, _Аналитика, _Дата);
	
КонецФункции

Функция ВернутьСотрудниковПоРолиРуководителя(Роль, Знач _Аналитика, _Дата = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(_Аналитика) ИЛИ НЕ (ТипЗнч(_Аналитика) = Тип("СправочникСсылка.ур_ЦФО") ИЛИ ТипЗнч(_Аналитика) = Тип("СправочникСсылка.ур_Проекты")) Тогда
		
		Возврат Новый Массив();
		
	КонецЕсли;
	
	Если ТипЗнч(_Аналитика) = Тип("СправочникСсылка.ур_Проекты") Тогда
		
		_Аналитика = _Аналитика.ЦФО;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо КАК ФизЛицо
	               |ИЗ
	               |	РегистрСведений.ур_НазначениеПродюсеровПоЦФО.СрезПоследних(
	               |			&Период,
	               |			ЦФО = &ЦФО
	               |				И РольРуководителя = &Роль) КАК но_НазначениеПродюсеровПоЦФОСрезПоследних
	               |ГДЕ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФизЛицо
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("Период", ?(_Дата = Неопределено, ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере(), _Дата));
	Запрос.УстановитьПараметр("ЦФО", _Аналитика);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
КонецФункции

Функция ВернутьЦФОПродюсера(Знач _Продюсер) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО КАК ЦФО
	               |ИЗ
	               |	РегистрСведений.ур_НазначениеПродюсеровПоЦФО.СрезПоследних(&Период, РольРуководителя = ЗНАЧЕНИЕ(Справочник.но_РолиДокументооборота.Продюсер)) КАК но_НазначениеПродюсеровПоЦФОСрезПоследних
	               |ГДЕ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо = &ФизЛицо
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЦФО
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("Период", ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере());
	Запрос.УстановитьПараметр("ФизЛицо", _Продюсер);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЦФО");
	
КонецФункции

Функция ВернутьТаблицуГлавныхРежиссеров(_Дата = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО КАК ЦФО,
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо КАК ФизЛицо
	               |ИЗ
	               |	РегистрСведений.ур_НазначениеПродюсеровПоЦФО.СрезПоследних(&Период, РольРуководителя = ЗНАЧЕНИЕ(Справочник.но_РолиДокументооборота.ГлавныйРежиссер)) КАК но_НазначениеПродюсеровПоЦФОСрезПоследних
	               |ГДЕ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО,
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЦФО,
	               |	ФизЛицо
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("Период", ?(_Дата = Неопределено, ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере(), _Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВернутьТаблицуПродюсеров(_Дата = Неопределено) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО КАК ЦФО,
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо КАК ФизЛицо
	               |ИЗ
	               |	РегистрСведений.ур_НазначениеПродюсеровПоЦФО.СрезПоследних(&Период, РольРуководителя = ЗНАЧЕНИЕ(Справочник.но_РолиДокументооборота.Продюсер)) КАК но_НазначениеПродюсеровПоЦФОСрезПоследних
	               |ГДЕ
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ЦФО,
	               |	но_НазначениеПродюсеровПоЦФОСрезПоследних.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЦФО,
	               |	ФизЛицо
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("Период", ?(_Дата = Неопределено, ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере(), _Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьЗапросПоДокументамЛистыВизирования(_ТолькоАктуальные = Ложь) Экспорт 
	
	Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	но_ЛистыВизирования.Ссылка КАК Ссылка,
	//			   |	но_ЛистыВизирования.ЦФО КАК ЦФО
	//			   |ИЗ
	//			   |	Документ.ур_ЛистыВизирования КАК но_ЛистыВизирования
	//			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |			но_ЛистыВизирования.ЦФО КАК ЦФО,
	//			   |			МАКСИМУМ(но_ЛистыВизирования.Дата) КАК Дата
	//			   |		ИЗ
	//			   |			Документ.ур_ЛистыВизирования КАК но_ЛистыВизирования
	//			   |		ГДЕ
	//			   |			но_ЛистыВизирования.Проведен
	//			   |			И но_ЛистыВизирования.СостояниеДокумента = &СостояниеДокумента
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			но_ЛистыВизирования.ЦФО) КАК МаксДата
	//			   |		ПО но_ЛистыВизирования.Дата = МаксДата.Дата
	//			   |			И но_ЛистыВизирования.ЦФО = МаксДата.ЦФО
	//			   |ГДЕ
	//			   |	НЕ но_ЛистыВизирования.Закрытие " + ?(_ТолькоАктуальные, " И но_ЛистыВизирования.ДатаС <= &Дата И но_ЛистыВизирования.ДатаПо >= &Дата ", "") + "
	//			   |	" + ?(_ТолькоАктуальные, " но_ЛистыВизирования.ДатаС <= &Дата И но_ЛистыВизирования.ДатаПо >= &Дата ", "") + "
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	но_ЛистыВизирования.Ссылка";
				   
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ур_НазначениеПродюсеровПоЦФО.Регистратор КАК Ссылка,
	|	ур_НазначениеПродюсеровПоЦФО.ЦФО
	|ИЗ
	|	РегистрСведений.ур_НазначениеПродюсеровПоЦФО.СрезПоследних(, РольРуководителя = ЗНАЧЕНИЕ(Справочник.но_РолиДокументооборота.Продюсер)) КАК ур_НазначениеПродюсеровПоЦФО";
				   
	//Запрос.УстановитьПараметр("СостояниеДокумента", Перечисления.но_СтатусыДокумента.Утвержден);
	//Запрос.УстановитьПараметр("Дата", НачалоДня(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере()));
	
	Возврат Запрос;

КонецФункции