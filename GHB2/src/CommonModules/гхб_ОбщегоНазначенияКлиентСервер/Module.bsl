
#Область ПрограммныйИнтерфейс

Функция КоличествоСекундВСутках() Экспорт 
	
	Возврат 86400; // 24*60*60
	
КонецФункции

// Добавляет к переданной дате указанное количество дней и возвращает полученное значение
Функция ДобавитьДеньКДате(_Дата, _КоличествоДней = 1) Экспорт 
	
	Возврат _Дата + КоличествоСекундВСутках() * _КоличествоДней;
	
КонецФункции

// Возвращает дату из строки форматов 2020-11-10 23:59:59 И 11-10-2020 23:59:59
Функция ВернутьДатуИзСтроки(Знач _Дата, _ГодИдетПервым = Истина, _ВключаетВремя = Истина) Экспорт 
	
	Если _ГодИдетПервым Тогда
		_Стр = Сред(_Дата, 1, 4) + Сред(_Дата, 6, 2) + Сред(_Дата, 9, 2);
	Иначе
		_Стр = Сред(_Дата, 7, 4) + Сред(_Дата, 4, 2) + Сред(_Дата, 1, 2);
	КонецЕсли;
	
	Если _ВключаетВремя Тогда
		_Стр = _Стр + Сред(_Дата, 12, 2) + Сред(_Дата, 15, 2) + Сред(_Дата, 18, 2);
	КонецЕсли;
	
	Возврат Дата(_Стр);
	
КонецФункции

Функция СимволРазделительДоменногоИмени() Экспорт 
	
	Возврат "\";
	
КонецФункции

Функция ДобавитьСлешВПуть(Знач _Путь) Экспорт 
	
	_Знч = СокрЛП(_Путь);
	_Знч = _Знч + ?(Прав(_Знч, 1) = "\", "", "\");
	Возврат _Знч;
	
КонецФункции

// Разбивает строку на составляющие по символу разделителю
Функция ВернутьМассивСтрокИзСтроки(Знач Стр, Разделитель, _СрезатьСимволыПоКраям = Ложь) Экспорт
	
	Массив = Новый Массив();
	ЧислоВхождений = СтрЧислоВхождений(Стр, Разделитель);
	
	Для Ном = 0 По ЧислоВхождений Цикл
		Если СокрЛП(Стр) = "" Тогда
			Прервать;
		КонецЕсли;
		
		ТекСимвол = Найти(Стр,Разделитель);
		ДлинаСтроки = СтрДлина(Стр);
		
		Если (ТекСимвол = 0) Тогда
			//значит не нашли, возвращаем эту же строку
			Подстрока = Стр;
		Иначе
			Попытка
				Подстрока = Сред(Стр,1,ТекСимвол-1);
			Исключение
				Подстрока = "";
			КонецПопытки;
			
			Попытка
				Стр = Сред(Стр,ТекСимвол + СтрДлина(Разделитель));
			Исключение
				Стр = "";
			КонецПопытки;
		КонецЕсли;
		
		Если (СокрЛП(Подстрока) <> "") Тогда
			//пустые строки не добавляем
			Массив.Добавить(?(_СрезатьСимволыПоКраям, СокрЛП(Подстрока), Подстрока));
		КонецЕсли; 
	КонецЦикла;
	
    Возврат Массив;
	
КонецФункции

Функция ВернутьСоответствиеДляТранслитерации() Экспорт 
	
	Соот = Новый Соответствие();
	Соот.Вставить("А", "A");
	Соот.Вставить("Б", "B");
	Соот.Вставить("В", "V");
	//Соот.Вставить("Г", "G");
	Соот.Вставить("Г", "H");
	Соот.Вставить("Ґ", "G");
	Соот.Вставить("Д", "D");
	Соот.Вставить("Е", "E");
	Соот.Вставить("Ё", "E");
	Соот.Вставить("Є", "Ie");
	Соот.Вставить("Ж", "Zh");
	Соот.Вставить("З", "Z");
	Соот.Вставить("И", "Y"); // I
	Соот.Вставить("Й", "I");
	Соот.Вставить("І", "I");
	Соот.Вставить("Ї", "I");
	Соот.Вставить("К", "K");
	Соот.Вставить("Л", "L");
	Соот.Вставить("М", "M");
	Соот.Вставить("Н", "N");
	Соот.Вставить("О", "O");
	Соот.Вставить("П", "P");
	Соот.Вставить("Р", "R");
	Соот.Вставить("С", "S");
	Соот.Вставить("Т", "T");
	Соот.Вставить("У", "U");
	Соот.Вставить("Ф", "F");
	Соот.Вставить("Х", "Kh");
	Соот.Вставить("Ц", "Ts");
	Соот.Вставить("Ч", "Ch");
	Соот.Вставить("Ш", "Sh");
	Соот.Вставить("Щ", "Shch");
	//Соот.Вставить("Ь", "'");
	Соот.Вставить("Ь", "");
	Соот.Вставить("Ы", "Y");
	Соот.Вставить("Ъ", "");
	Соот.Вставить("Э", "E");
	Соот.Вставить("Ю", "Iu");
	Соот.Вставить("Я", "Ia");
	Соот.Вставить("'", "");
	Соот.Вставить("«", """");
	Соот.Вставить("»", """");
	
	Для Каждого Стр Из Соот Цикл
		Соот.Вставить(Стр.Ключ + "_", Стр.Значение);
	КонецЦикла;
	
	Соот["Є_"] = "Ye";
	Соот["Ї_"] = "Yi";
	Соот["Й_"] = "Y";
	Соот["Ю_"] = "Yu";
	Соот["Я_"] = "Ya";
	
	Возврат Соот;
	
КонецФункции

// Соответствие используем только для формирования низвания страницы перехода справочной системы DokuWiki.
// Его мы не меняем и исправляем с изменениями правил транслитерации.
Функция ВернутьСоответствиеДляТранслитерацииDokuWiki() Экспорт 
	
	Соот = Новый Соответствие();
	Соот.Вставить("А", "A");
	Соот.Вставить("Б", "B");
	Соот.Вставить("В", "V");
	//Соот.Вставить("Г", "G");
	Соот.Вставить("Г", "H");
	Соот.Вставить("Ґ", "G");
	Соот.Вставить("Д", "D");
	Соот.Вставить("Е", "E");
	Соот.Вставить("Ё", "E");
	Соот.Вставить("Є", "Ie");
	Соот.Вставить("Ж", "Zh");
	Соот.Вставить("З", "Z");
	Соот.Вставить("И", "Y"); // I
	Соот.Вставить("Й", "I");
	Соот.Вставить("І", "I");
	Соот.Вставить("Ї", "I");
	Соот.Вставить("К", "K");
	Соот.Вставить("Л", "L");
	Соот.Вставить("М", "M");
	Соот.Вставить("Н", "N");
	Соот.Вставить("О", "O");
	Соот.Вставить("П", "P");
	Соот.Вставить("Р", "R");
	Соот.Вставить("С", "S");
	Соот.Вставить("Т", "T");
	Соот.Вставить("У", "U");
	Соот.Вставить("Ф", "F");
	Соот.Вставить("Х", "Kh");
	Соот.Вставить("Ц", "Ts");
	Соот.Вставить("Ч", "Ch");
	Соот.Вставить("Ш", "Sh");
	Соот.Вставить("Щ", "Shch");
	//Соот.Вставить("Ь", "'");
	Соот.Вставить("Ь", "");
	Соот.Вставить("Ы", "Y");
	Соот.Вставить("Ъ", "");
	Соот.Вставить("Э", "E");
	Соот.Вставить("Ю", "Iu");
	Соот.Вставить("Я", "Ia");
	Соот.Вставить("'", "");
	Соот.Вставить("«", """");
	Соот.Вставить("»", """");
	
	Для Каждого Стр Из Соот Цикл
		Соот.Вставить(Стр.Ключ + "_", Стр.Значение);
	КонецЦикла;
	
	Соот["Є_"] = "Ye";
	Соот["Ї_"] = "Yi";
	Соот["Й_"] = "Y";
	Соот["Ю_"] = "Yu";
	Соот["Я_"] = "Ya";
	
	Возврат Соот;
	
КонецФункции

// Перекодирует кирилическую строку в латиницу по правилам транслитерации
Функция ПерекодироватьПоПравилуТранслитерации(Знач _Строка, _Соот = Неопределено, _УбиратьПробелы = Ложь, _ПреобразовыватьЗГ = Истина) Экспорт 
	
	Если (_Соот = Неопределено) Тогда
		_Соот = ВернутьСоответствиеДляТранслитерации();
	КонецЕсли;
	
	Если _ПреобразовыватьЗГ Тогда
		_Строка = СтрЗаменить(_Строка, "зг", "зґг");
		_Строка = СтрЗаменить(_Строка, "Зг", "Зґг");
		_Строка = СтрЗаменить(_Строка, "зГ", "зґГ");
		_Строка = СтрЗаменить(_Строка, "ЗГ", "ЗҐГ");
	КонецЕсли;
	
	ЗнчВозвр = "";
	
	_Приставка = "_";
	
	Для ф = 1 По СтрДлина(_Строка) Цикл
		_Символ = Сред(_Строка, ф, 1);
		
		Если (СокрЛП(_Символ) = _Символ) Тогда
			_СимволЗамены = _Соот[_Символ + _Приставка];
			
			Если (_СимволЗамены = Неопределено) Тогда
				_СимволЗамены = _Соот[ВРег(_Символ + _Приставка)];
				_СимволЗамены = ?(_СимволЗамены = Неопределено, _Символ, НРег(_СимволЗамены));
			КонецЕсли;
			
			_Приставка = "";
		Иначе 
			_Приставка = "_"; // если ищем первую букву
			_СимволЗамены = ?(_УбиратьПробелы, "", _Символ);
		КонецЕсли;
		
		ЗнчВозвр = ЗнчВозвр + _СимволЗамены;
	КонецЦикла;
	
	Возврат ЗнчВозвр;
	
КонецФункции

// Оставляет в переданном номере только цифры и добавляет префикс
Функция НормализоватьТелефонДляСМС(_Телефон, _Префикс = "") Экспорт 
	
	_Тел = "";
	
	Для ф = 1 По СтрДлина(_Телефон) Цикл
		_Символ = Сред(_Телефон, ф, 1);
		_КодСимвола = КодСимвола(_Символ);
		
		Если _КодСимвола >= 48 И _КодСимвола <= 57 Тогда
			_Тел = _Тел + _Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(_Тел) < 9 Тогда
		Возврат "";
	Иначе
		Возврат _Префикс + Прав(_Тел, 9);
	КонецЕсли;
	
КонецФункции

// Проверяет на заполненность всех полей структуры
Функция ЕстьНезаполненныеДанныеВСтруктуре(_Структура) Экспорт 
	
	_Результат = Ложь;
	
	Для Каждого _Элемент Из _Структура Цикл
		Если НЕ ТипЗнч(_Элемент.Значение) = Тип("Булево") И НЕ ЗначениеЗаполнено(_Элемент.Значение) Тогда
			_Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат _Результат;
	
КонецФункции

#КонецОбласти