
#Область ПрограммныйИнтерфейс

// Выполняется миграция данного справочника в базу РИБ
// Сопоставление свойств для всех справочников через УИД
//
// Параметры:
//  СтрБазаХолдинга - Внешний источник по которому производится соединение и база холдинга
//  ИмяФункции - Строка. Название выполняемой функции в базе приемнике
//  СтруктураСвойств - Структура. Список свойств для обмена. Всегда присутствует УИДИзБазыГХБ2 и Ссылка
//
// Возвращаемое значение:
//   ОбменПрошел  - Булево. Признак, что обмен прошел удачно
//
Функция ОтправитьСправочникВБазуРИБ(СтрБазаХолдинга, ИмяФункции, СтруктураСвойств) Экспорт
	
	ОбменПрошел = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УИДИзБазыГХБ2", Строка(СтруктураСвойств.Ссылка.УникальныйИдентификатор()));
	
	Для каждого СтрСвойства Из СтруктураСвойств.СтруктураСвойствКЗаполнению Цикл
		СтруктураПараметров.Вставить(СтрСвойства.Ключ, СтрСвойства.Значение);
	КонецЦикла; 
			
	ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(СтрБазаХолдинга.ВнешнийИсточник, ИмяФункции, СтруктураПараметров);
														
	ТекстНеудачногоОбмена = НСтр("ru = 'Не удалось создать элемент справочника по причине: '; 
								 |uk = 'Не вдалося створити елемент довідника через: '");
	Если НЕ ОтветСервиса.ОбменПрошел Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстНеудачногоОбмена + ОтветСервиса.ТекстОшибки + ". База - " 
												+ СтрБазаХолдинга.БазаХолдинга);
	Иначе			
		
		Попытка
	
			УстановитьПривилегированныйРежим(Истина);
			
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Период", гхб_ОбщегоНазначенияСервер.ВернутьВремяНаСервере());
			СтруктураЗаписи.Вставить("БазаХолдинга", СтрБазаХолдинга.БазаХолдинга);
			СтруктураЗаписи.Вставить("Объект", СтруктураСвойств.Ссылка);
			СтруктураЗаписи.Вставить("Тип", Перечисления.гхб_ТипыОбменовДляБазХолдинга.МиграцияОбъекта);
			СтруктураЗаписи.Вставить("Значение", СтруктураСвойств.Ссылка);           
			СтруктураЗаписи.Вставить("Пользователь", Пользователи.ТекущийПользователь());
			
			РегистрыСведений.гхб_ИсторияОбменовСБазамиХолдинга.ЗаписатьСтрокуВРегистр(СтруктураЗаписи);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ТекстСообщения = НСтр("ru = 'Обмен прошел удачно!'; uk = 'Обмін пройшов вдало!'")
								+ " База - " + СтрБазаХолдинга.БазаХолдинга;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ОбменПрошел = Истина;
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр миграции данных!'; 
			         		  	  |uk = 'Не вдалося записати дані в регістр міграції даних!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;	
				
	КонецЕсли;	
	
	Возврат ОбменПрошел;

КонецФункции

// Выполняется миграция данного справочника во все базы РИБ, где идет учет по мобильной связи
// Если обмен не прошел по хотя бы одной из баз, то считатся, что весь обмен не прошел
// Процедура отката изменений для баз у которых прошел обмен, но в целом обмен не прошел пока не придусмотрена
//
// Параметры:
//  ИмяФункции - Строка. Название выполняемой функции в базе приемнике
//  СтруктураСвойств - Структура. Список свойств для обмена. Всегда присутствует УИДИзБазыГХБ2 и Ссылка
//
// Возвращаемое значение:
//   ОбменПрошел  - Булево. Признак, что обмен прошел удачно
//
Функция ОтправитьСправочникВБазыРИБ(ИмяФункции, СтруктураСвойств) Экспорт
	
	ОбменПрошел = Истина;
	
	ТЗВнешнихИсточников = ВернутьСписокВнешнихИсточниковПоМобильнойСвязи();
	Для каждого СтрБазаХолдинга Из ТЗВнешнихИсточников Цикл
	
		Если НЕ ОтправитьСправочникВБазуРИБ(СтрБазаХолдинга, ИмяФункции, СтруктураСвойств) Тогда
			ОбменПрошел = Ложь;	
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ОбменПрошел;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьСписокВнешнихИсточниковПоМобильнойСвязи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гхб_БазыХолдинга.Ссылка КАК БазаХолдинга,
		|	гхб_БазыХолдинга.ВнешнийИсточникПоУмолчанию КАК ВнешнийИсточник
		|ИЗ
		|	Справочник.гхб_БазыХолдинга КАК гхб_БазыХолдинга
		|ГДЕ
		|	гхб_БазыХолдинга.ОбменПоМобильнойСвязи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	

КонецФункции

#КонецОбласти
