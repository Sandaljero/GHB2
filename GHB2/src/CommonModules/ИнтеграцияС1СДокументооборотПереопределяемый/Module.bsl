////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотПереопределяемый: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - имя вызывающей формы в виде ""Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента"
//   КомандыПечати - ТаблицаЗначений - таблица команд к дополнению. Колонки см. в УправлениеПечатью.
//   СтандартнаяОбработка - Булево - Истина, если необходимо стандартное наполнение таблицы команд.
//
// Пример реализации:
//	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
//		Если ИмяФормы = "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента" Тогда
//			КомандаПечати = КомандыПечати.Добавить();
//			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
//			КомандаПечати.Идентификатор = "ЛистСогласования";
//			КомандаПечати.Представление = НСтр("ru = 'Документооборот: лист согласования'");
//			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//			КомандаПечати.Порядок = 2;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - описание полей, см.
//     ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример реализации:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия              = "1.1.0.0";
//	Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//	Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ОписаниеОбработчиковОбновленияПравилИнтеграции(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Регистрирует элементы справочника ПравилаИнтеграцииС1СДокументооборотом, которые необходимо обновить.
//
// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Обработчик обновления справочника ПравилаИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Параметры - Структура - параметры.
//
Процедура ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Конец ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если ВладелецПрисоединенныхФайлов = Неопределено
			Или Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = ИнтеграцияС1СДокументооборот.КоличествоФайловСвязанногоОбъекта(ID, Тип);
	
	Если КоличествоФайлов = Неопределено Или КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = "0000000000";
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС, МассивФайлов);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим запись.
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(ВладелецФайлов);
	Если ДанныеОбъектаДО <> Неопределено Тогда
		ID = ДанныеОбъектаДО.id;
		Тип = ДанныеОбъектаДО.type;
	Иначе
		ID = "";
		Тип = "";
	КонецЕсли;
	
	Если ID = "" Или Тип = "" Тогда
		КоличествоФайловВДО = Неопределено;
	Иначе
		КоличествоФайловВДО = ИнтеграцияС1СДокументооборот.КоличествоФайловСвязанногоОбъекта(ID, Тип);
	КонецЕсли;
	
	Если КоличествоФайловВДО = Неопределено Или КоличествоФайловВДО = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НаличиеФайлов.ЕстьФайлы
			|ИЗ
			|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|ГДЕ
			|	НаличиеФайлов.ОбъектСФайлами = &ВладелецФайлов
			|	И НаличиеФайлов.ЕстьФайлы
			|");
		Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЕстьФайлы = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив - неявно возвращаемое значение, массив структур, содержащих данные файлов,
//     свойства см. РаботаСФайлами.ДанныеФайла().
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, Неопределено, Истина, Ложь);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//Вызывается при создании форм документов Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыДокумента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

//Вызывается при создании форм бизнес-процессов 1С:Документооборота. Позволяет выполнить дополнительные действия.
//
//Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыБизнесПроцесса(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

//Вызывается при создании формы задачи Документооборота. Позволяет выполнить дополнительные действия.
//
//Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыЗадачи(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Заполняет свойства объекта XDTO из реквизитов объекта конфигурации-потребителя. По умолчанию заполняется
// только наименование и идентификатор. При необходимости обеспечить заполнение других реквизитов объектов
// ДО, создаваемых по ссылкам, следует заполнить соответствующие свойства объекта XDTO. Эти же значения будут
// использованы при поиске соответствий для справочников, имеющих внешние ключи (ИНН, КПП).
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   СсылкаНаПотребитель - ЛюбаяСсылка - ссылка на исходный объект конфигурации-потребителя.
//
// Пример реализации:
//	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//		ОбъектXDTO.legalPrivatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
//		ОбъектXDTO.legalPrivatePerson.name = Строка(Реквизиты.ЮрФизЛицо);
//		ОбъектXDTO.legalPrivatePerson.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
//		ОбъектXDTO.legalPrivatePerson.objectId.id =
//			ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Реквизиты.ЮрФизЛицо);
//		ОбъектXDTO.legalPrivatePerson.objectId.type = "DMLegalPrivatePerson";
//	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоБанковскиеСчета") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, НомерСчета");
//		ОбъектXDTO.number = Реквизиты.НомерСчета;
//		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
//		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOrganization");
//		КонецЕсли;
//		ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.owner, Реквизиты.Владелец);
//	Иначе //...
//	КонецЕсли;
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО. При установке
// в параметр Результат значения, отличного от Неопределено, стандартное заполнение не выполняется.
//
// Параметры:
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие - параметры выбора, где ключ - имя параметра вида "Отбор.Владелец",
//     а значение - значение параметра (отбора).
//
// Пример реализации:
//	Если ОбъектXDTO.Установлено("objectId")
//			И ОбъектXDTO.objectId.type = "DMDocumentStatus"
//			И ТипРеквизита = Тип("Булево")
//			И ИмяРеквизита = "Согласован" Тогда
//		Результат = (ОбъектXDTO.objectId.id = "Согласован");
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоЕдиницыИзмерения")
//			И ПараметрыВыбора <> Неопределено Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоЕдиницыИзмерения
//			|ГДЕ
//			|	Владелец = &Владелец
//			|	И Наименование = &Наименование
//			|");
//		Запрос.УстановитьПараметр("Наименование", ОбъектXDTO.name);
//		Запрос.УстановитьПараметр("Владелец", ПараметрыВыбора["Отбор.Владелец"]);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоБанковскиеСчета")
//			И ОбъектXDTO.Свойства().Получить("number") <> Неопределено
//			И ОбъектXDTO.Установлено("number") Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоБанковскиеСчета
//			|ГДЕ
//			|	НомерСчета = &НомерСчета
//			|");
//		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ОбъектXDTO, ТипРеквизита, ИмяРеквизита, ТипОбъекта,
		Объект, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено, ПараметрыВыбора = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Вызвается при заполнении свойства объекта XDTO по значению в ИС (например, по значению реквизита объекта ИС).
//
// Параметры:
//   Значение - Произвольный - значение, которым заполняются свойства объекта XDTO для передачи в ДО.
//   Свойства - УправляемаяФорма, Структура - заполняемый набор данных, которым будет заполнен объект XDTO для
//     передачи в ДО. См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоОбъектаДО().
//   ТипОбъекта - Строка - тип заполняемого объекта, например, "DMInternalObject".
//   ИмяСвойства - Строка - имя заполняемого свойства, например, "Контрагент", "СостояниеСогласование".
//   ТипСвойства - Строка - тип заполняемого свойства, например, "DMCorrespondent", "DMDocumentStatus".
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартное заполнение
//     свойства по значению Значение производиться не будет.
//
// Пример реализации:
//	Если ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование" Тогда
//		Если Значение = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован Тогда
//			Свойства[ИмяСвойства] = НСтр("ru = 'Согласовано'");
//			Свойства[ИмяСвойства + "ID"] = "Согласовано";
//			Свойства[ИмяСвойства + "Тип"] = ТипСвойства;
//			СтандартнаяОбработка = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение, Свойства, ТипОбъекта, ИмяСвойства, ТипСвойства,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО. Может использоваться для
// дозаполнения реквизитов нового объекта ИС, например, если стандартный обработчик заполнения не
// заполняет обязательные реквизиты по умолчанию.
//
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//   ЗаполняемыйОбъектИС - Произвольный - объект ИС, в ходе заполнения которого вызывается создание
//     ОбъектИС по ссылке. Обеспечивает контекст, необходимый для заполнения ОбъектИС.
//
// Пример реализации:
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоОрганизации") Тогда
//		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//		Если ОбъектXDTO.objectId.type = "DMOrganization"
//				И ОбъектXDTO.objectId.id = "ИндивидуальныйПредприниматель" Тогда
//			ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоБанковскиеСчета")
//			И ОбъектXDTO.objectId.type = "DMBankAccount" Тогда
//		ОбъектИС.НомерСчета = ОбъектXDTO.number;
//	КонецЕсли;
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений с колонками:
//     * МенеджерПечати
//     * ИмяКоманды
//     * ПредставлениеКоманды
//
Процедура ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы) Экспорт
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	
	Для Каждого Команда Из КомандыПечати Цикл
		Строка = ПечатныеФормы.Добавить();
		Строка.МенеджерПечати = Команда.МенеджерПечати;
		Строка.ИмяКоманды = Команда.Идентификатор;
		Строка.ПредставлениеКоманды = Команда.Представление;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//
Процедура ЗаполнитьПечатныеФормы(ВнешнийОбъект, ИмяКоманды, КоллекцияПечатныхФорм) Экспорт
	
	НомерКомандыСтрокой = Сред(ИмяКоманды, СтрДлина("КомандаПечати") + 1);
	Если НомерКомандыСтрокой = "0" Тогда
		НомерКоманды = 0;
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		НомерКоманды = ОписаниеТипов.ПривестиЗначение(НомерКомандыСтрокой);
		НомерКоманды = ?(НомерКоманды = 0, -1, НомерКоманды);
	КонецЕсли;
	
	МенеджерОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	Если КомандыПечати.Количество() = 0 Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
		
	Если НомерКоманды = -1 Тогда
		КомандаПечати = КомандыПечати.Найти(ИмяКоманды, "Идентификатор");
	Иначе
		КомандаПечати = КомандыПечати[НомерКоманды];
	КонецЕсли;
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	
	ОбъектыПечатиСписок = новый СписокЗначений;
	ОбъектыПечатиСписок.Добавить(ВнешнийОбъект);
	
	ОбъектыПечати = новый Массив;
	ОбъектыПечати.Добавить(ВнешнийОбъект);
	
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ПараметрыПечати = ОписаниеКоманды.ДополнительныеПараметры;
	ПараметрыВывода = Неопределено;
	
	Если ОписаниеКоманды.ДополнительныеПараметры.Свойство("Ссылка") 
		И ЗначениеЗаполнено(ОписаниеКоманды.ДополнительныеПараметры.Ссылка) Тогда
		Попытка
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			ПараметрыПечати.Вставить("ОбъектыНазначения", ОбъектыПечати);
			
			ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ОписаниеКоманды.ДополнительныеПараметры.Ссылка,
					ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		Исключение
			КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось сформировать печатную форму по причине: %2'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецПопытки;
	Иначе
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(
			ОписаниеКоманды.МенеджерПечати,
			ОписаниеКоманды.Идентификатор,
			ОбъектыПечати,
			ПараметрыПечати);
		КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает кнопки печати на форме объекта по доступным командам печати.
//
Процедура ЗаполнитьКомандыПечати(Форма, ВнешнийОбъект, МестоРазмещенияКоманд) Экспорт
	
	ИмяФормы = ВнешнийОбъект.Метаданные().ПолноеИмя() + ".Форма.ФормаСписка";
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(ИмяФормы);
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	Для НомерКоманды = 0 По КомандыПечати.Количество() - 1 Цикл
		
		ОписаниеКомандыПечати = КомандыПечати[НомерКоманды];
		
		ИмяКоманды = "КомандаПечати" + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуПечати";
		КомандаФормы.Заголовок = ОписаниеКомандыПечати.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыПечати.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыПечати.Картинка;
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить("ПодменюПечать" + ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает индекс картинки элемента справочника.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиЭлемента() Экспорт
	
	Возврат 3;
	
КонецФункции

// Заполняет правила заполнения при выгрузке по умолчанию.
//
Процедура УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Источник);
	Если МетаданныеИсточника = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Новый Соответствие;
	ВариантыЗаполнения.Вставить("Организация", "organization");
	ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
	ВариантыЗаполнения.Вставить("Комментарий", "comment");
	ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
	ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
	ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
	ВариантыЗаполнения.Вставить("Сумма", "sum");
	ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
	ВариантыЗаполнения.Вставить("Валюта", "currency");
	ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
	ВариантыЗаполнения.Вставить("Содержание", "summary");
	ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
	ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
	ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
	ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
	ВариантыЗаполнения.Вставить("Утвердил", "signer");
	ВариантыЗаполнения.Вставить("Подготовил", "author");
	ВариантыЗаполнения.Вставить("Автор", "author");
	ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
	ВариантыЗаполнения.Вставить("Ответственный", "responsible");
	ВариантыЗаполнения.Вставить("Наименование", "name");
	ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
	ВариантыЗаполнения.Вставить("ИНН", "inn");
	ВариантыЗаполнения.Вставить("КПП", "kpp");
	ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
	ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
	ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
	ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("Ответственный", "author");
	ВариантыЗаполнения.Вставить("Проект", "project");
	
	ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
	ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Значение =  ВариантыЗаполнения.Получить(Реквизит.Имя);
		Если Значение <> Неопределено Тогда
			ПравилаЗаполнения.Вставить(Значение, Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//
Процедура УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	ВариантыЗаполнения = Новый Соответствие;
	
	МетаданныеПриемника = Метаданные.НайтиПоПолномуИмени(Приемник);
	Если МетаданныеПриемника = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Найти(Источник, "Document") <> 0 Тогда
		ВариантыЗаполнения.Вставить("Организация", "organization");
		ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
		ВариантыЗаполнения.Вставить("Комментарий", "comment");
		ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
		ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
		ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
		ВариантыЗаполнения.Вставить("Сумма", "sum");
		ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
		ВариантыЗаполнения.Вставить("Валюта", "currency");
		ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
		ВариантыЗаполнения.Вставить("Содержание", "summary");
		ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
		ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
		ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
		ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
		ВариантыЗаполнения.Вставить("Утвердил", "signer");
		ВариантыЗаполнения.Вставить("Подготовил", "author");
		ВариантыЗаполнения.Вставить("Автор", "author");
		ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("Наименование", "title");
		ВариантыЗаполнения.Вставить("Статус", "statusApproval");
		ВариантыЗаполнения.Вставить("Согласован", "statusApproval");
		
		ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
		ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
		
	ИначеЕсли Источник = "DMCorrespondent" Тогда
		ВариантыЗаполнения.Вставить("Наименование", "name");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
		ВариантыЗаполнения.Вставить("ИНН", "inn");
		ВариантыЗаполнения.Вставить("КПП", "kpp");
		ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
		ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
		ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
		ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
		ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеПриемника.Реквизиты Цикл
		Если ВариантыЗаполнения[Реквизит.Имя] <> Неопределено Тогда
			ПравилаЗаполнения[Реквизит.Имя] = ВариантыЗаполнения[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доступные для выбора режимы изменения реквизита в проведенном документе.
//
// Параметры:
//   ТипОбъектаИС - Строка - представление типа объекта интегрированной системы.
//   РеквизитИС - Строка - представление реквизита интегрированной системы.
//   СписокВыбора - СписокЗначений - доступные значения режимов изменения реквизита.
//
// Пример реализации:
//	Если ТипОбъектаИС = "Документ.ЗаказКлиента" И РеквизитИС = "Статус" Тогда
//		СписокВыбора.Очистить();
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
//	КонецЕсли;
//
Процедура УстановитьРежимыИзмененияВПроведенномДокументе(ТипОбъектаИС, РеквизитИС, СписокВыбора) Экспорт
	
	
	
КонецПроцедуры

// Заполняет таблицу реквизитов объекта по типу объекта.
//
// Параметры:
//   ИмяОбъектаИС - Строка - имя типа объекта потребителя.
//   Реквизиты - ТаблицаЗначений - Таблица описания реквизитов.
//
Процедура ПолучитьРеквизитыОбъектаИС(ИмяОбъектаИС, Реквизиты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКонстанты = Источник.ЭтотОбъект.Метаданные().Имя;
	ЗначениеКонстанты = Источник.Значение;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТипКонстанты = ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты)
		Или ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
					Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает подходящий тип потребителя для объекта XDTO.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта XDTO, соответствие которому следует выбрать
//   ТипыКандидаты - Массив - массив типов, из которых требуется выбрать подходящий
//
// Возвращаемое значение:
//   Тип - один из элементов массива ТипыКандидаты, подходящий для типа объекта XDTO
//
// Пример реализации:
//	Если ТипОбъектаXDTO = "DMUser" И ТипыКандидаты.Найти(Тип("СправочникСсылка.Пользователи")) <> Неопределено Тогда
//		Возврат Тип("СправочникСсылка.Пользователи");
//	Иначе // другие варианты
//	КонецЕсли;
//
Функция ПодходящийТип(ТипОбъектаXDTO, ТипыКандидаты) Экспорт
	
	Возврат ТипыКандидаты[0];
	
КонецФункции

// Возвращает штрихкод документа для присвоения связанному документу ДО.
//
// Параметры
//   Документ - ДокументСсылка, на основании которого создается документ ДО
//
// Возвращаемое значение:
//   Строка - штрихкод для присвоения связанному документу ДО
//
// Пример реализации:
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
//		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
//		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
//		Результат = 0;
//		Для НомерСимвола = 1 По ДлинаСтроки Цикл
//			Результат = Результат * 16 + Найти("0123456789abcdef",
//				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
//		КонецЦикла;
//		Возврат Формат(Результат, "ЧГ=0");
//	Иначе
//		Возврат "";
//	КонецЕсли;
//
Функция ШтрихкодДокумента(Документ) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Число - предельное количество элементов, выбираемых за раз
//
Функция ПредельноеКоличествоВыбираемыхОбъектов(Тип) Экспорт
	
	Возврат 20; // Если Тип = "DMCorrespondent" Тогда Возврат 50 ИначеЕсли <...>
	
КонецФункции

// Уточняет сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Параметры:
//   СокращенноеНаименование - Строка - неявно возвращаемое значение, краткое название конфигурации.
//
// Пример реализации:
//   СокращенноеНаименование = НСтр("ru = '1С:ERP УП'");
//
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	
	
КонецПроцедуры

// Определяет доступность интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Возвращаемое значение:
//   Булево - Истина, если использование интеграции разрешено.
//
Функция ПользователюРазрешеноИспользованиеИнтеграции() Экспорт
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.ИнтеграцияС1СДокументооборот);
	
КонецФункции

// Проверяет возможность запуска согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//
// Возвращаемое значение:
//   Булево - Истина, если запуск согласования разрешен, Ложь - запрещен, Неопределено - согласно ролям.
//
// Пример реализации:
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//		Если ПредметСогласования.Состояние <> Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании Тогда
//			ТекстПредупреждения = НСтр("ru = 'Создание процесса согласования разрешено только на основании
//			|документов в состоянии ""На согласовании"".'");
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Функция ПользователюРазрешенЗапускСогласования(ПредметСогласования, ТекстПредупреждения) Экспорт
	
	
	
КонецФункции

// Проверяет возможность прерывания согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ПредметДО - Структура - описание связанного объекта ДО:
//      name - Строка - представление связанного объекта.
//      id - Строка - идентификатор связанного объекта.
//      type - Строка - имя типа XDTO.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//
// Возвращаемое значение:
//   Булево - Истина, если прерывание согласования разрешено, Ложь - запрещено, Неопределено - согласно ролям.
//
Функция ПользователюРазрешеноПрерываниеСогласования(ПредметСогласования, ПредметДО, ТекстПредупреждения) Экспорт
	
	
	
КонецФункции

// Вызывается при изменении состояния согласования в ДО. Предназначена для изменения согласуемого объекта.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//
// Пример реализации:
//	Если ВызовИзФормыОбъекта Тогда
//		Возврат;
//	КонецЕсли;
//
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//	
//		Объект = ПредметСогласования.ПолучитьОбъект();
//		Если Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НеСогласован;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован;
//		Иначе
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Подготовлен;
//		КонецЕсли;
//		Объект.Записать(РежимЗаписиДокумента.Запись);
//	
//	КонецЕсли;
//
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта) Экспорт
	
	
	
КонецПроцедуры

// Получает пояснение к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//
// Возвращаемое значение:
//   Строка - пояснение к состоянию согласования.
//
Функция ПояснениеСостоянияСогласования(Установил, ДатаУстановки) Экспорт
	
	Если ЗначениеЗаполнено(ДатаУстановки) Тогда
		Результат = Формат(ДатаУстановки, "ДЛФ=DT");
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Результат + " (" + СокрЛП(Установил) + ")";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Установил;
		Иначе
			Результат = "";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Вызывается при определении таймаута веб-сервиса. При необходимости таймаут может быть вынесен в
// настройки администратора интеграции и переопределен в этой процедуре.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, время в секундах, по истечении которого вызов
//     веб-сервиса Документооборота считается неудачным.
//
Процедура ПриОпределенииТаймаутаСервиса(Таймаут) Экспорт
	
	Таймаут = 20;
	
КонецПроцедуры

// Заполняет реквизиты формы по данным объекта интегрированной системы.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект-основание.
//   Форма - УправляемаяФорма - форма обработки ИнтеграцияС1СДокументооборот, соответствующая заполняемому
//    объекту Документооборота.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при построении списка интегрируемых объектов. В переданную таблицу следует добавить
// типы объектов, поддерживающих автоматическую настройку бесшовной интеграции с созданием правил
// интеграции и заполнением связанных данных.
//
// Параметры:
//   Объекты - ТаблицаЗначений - заполняемая таблица с колонками:
//     ИмяТипаОбъекта - Строка - полное имя типа, как задано в метаданных.
//     ОписаниеВыполняемыхДействий - Строка - необязательна, краткое описание действий, выполняемых
//        при автоматической настройке.
//
// Пример реализации:
//	Строка = Объекты.Добавить();
//	Строка.ИмяТипаОбъекта = "Справочник._ДемоДоговорыКонтрагентов";
//	Строка.ОписаниеВыполняемыхДействий =
//		НСтр("ru = 'Будут созданы правила интеграции и виды внутренних документов для всех видов договоров.'");
//
Процедура ПриОпределенииОбъектовПоддерживающихАвтонастройку(Объекты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении подсистемы в дерево интегрируемых объектов, с помощью которого настраивается
// интеграция. По умолчанию выводятся подсистемы первого уровня, включаемые в командный интерфейс, и
// подчиненные им.
//
// Параметры:
//   Подсистема - ОбъектМетаданных.Подсистема - добавляемая подсистема, содержащая интегрируемые объекты.
//   Отказ - Булево - при установке в Ложь подсистема будет пропущена вместе со всеми подчиненными.
//
Процедура ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(Подсистема, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет типы объектов ИС, поддерживающие бесшовную интеграцию. По умолчанию заполняется всеми
// типами, входящими в состав типов параметров общих команд подсистемы ИнтеграцияС1СДокументооборотом.
//
// Параметры:
//   Типы - Массив - массив объектов типа Тип.
//
Процедура ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление объекта интегрируемой конфигурации. Используется, если стандартное
// представление из синонима и ключевых реквизитов через запятую оказывается недостаточно читабельным.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом - правило, для которого
//             определяется представление.
//   ПредставлениеОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             объекта. По умолчанию собирается из синонима объекта и значений ключевых реквизитов правила.
//
// Пример реализации:
//
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда 
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление товаров'");
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияОбъектаПотребителя(Правило, ПредставлениеОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление вида объекта интегрируемой конфигурации.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом - правило, для которого
//             определяется представление.
//   ПредставлениеВидаОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             вида объекта. По умолчанию определяется как представление объекта с ключевыми реквизитами.
//
// Пример реализации:
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары (накладная)'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияВидаОбъектаПотребителя(Правило, ПредставлениеВидаОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление формы выбора правила интеграции. Используется при неоднозначности правил и
// позволяет предложить пользователю менее техногенную форму выбора.
//
// Параметры:
//   Форма - УправляемаяФорма - форма ВыборПравила обработки ИнтеграцияС1СДокументооборот.
//
// Пример реализации:
//	Форма.Заголовок = НСтр("ru = 'Форма документа'");
//	Форма.Автозаголовок = Ложь;
//	Форма.Пояснение = НСтр("ru = 'Выберите вид документа:'");
//	Форма.Элементы.Пояснение.Видимость = Истина;
//
Процедура ПриСозданииНаСервереФормыВыбораПравила(Форма) Экспорт
	
	
	
КонецПроцедуры

// Проверяет соответствие правила интеграции функциональным опциям. Вызвыается при выборе подходящего правила
// и позволяет отказаться от правил, связанных с объектами, выключенными по ФО.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - проверяемое правило.
//   ТипОбъектаДО - Строка - Тип объекта ДО.
//   ТипОбъектаИС - Строка - Тип объекта ИС (полное имя в метаданных).
//   Отказ - Булево - при установке в Истина правило не будет использоваться.
//   ИмяКлючевогоРеквизита - Строка - имя ключевого реквизита правила.
//   ЗначениеКлючевогоРеквизита - Произвольный - значение ключевого реквизита правила.
//
// Пример реализации:
//	Если ТипОбъектаИС = "Документ.ПоступлениеНМА"
//		И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//
Процедура ПриПроверкеСоответствияПравилаФункциональнымОпциям(Правило, ТипОбъектаДО, ТипОбъектаИС, Отказ,
		ИмяКлючевогоРеквизита = "", ЗначениеКлючевогоРеквизита = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Определяет реквизиты проведенного документа, подлежащие обновлению при их изменении в ДО.
//
// Параметры:
//   ПолноеИмя - Строка - полное имя объекта, как оно задано в метаданных, напр., Документ.ЗаказКлиента.
//   ОбновляемыеРеквизиты - Массив - неявно возвращаемое значение, имена реквизитов, обновление которых возможно.
//
// Пример реализации:
//	ОбновляемыеРеквизиты.Добавить("Комментарий");
//	Если ПолноеИмя = "Документ.ЗаказКлиента" Тогда
//   	ОбновляемыеРеквизиты.Добавить("Состояние");
//	КонецЕсли;
//
Процедура ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(ПолноеИмя, ОбновляемыеРеквизиты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении формы объекта ДО при его создании на основании объекта ИС. Позволяет дозаполнить объект
// ДО способом, не поддерживаемым правилами интеграции.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   Форма - УправляемаяФорма - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применяемое правило.
//
Процедура ПриЗаполненииФормыОбъектаДОПоОбъектуИС(ОбъектИС, Форма, Правило) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении связи к объекту ИС, связанному с объектом ДО.
// Позволяет дополнить список подходящих объектов, предъявляемый пользователю,
// теми объектами, которые не могут быть определены автоматически по ссылкам
// из шапки или из табличных частей объекта ИС.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   ПодходящиеОбъекты - Массив - дополняемый массив объектов ИС, подходящих для добавления связи.
//
Процедура ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(ОбъектИС, ПодходящиеОбъекты) Экспорт
	
	
	
КонецПроцедуры

// Возвращает признак состояния "Согласован" по данным документооборота.
//
// Параметры:
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево - состояние согласования в ДО.
//
// Пример реализации:
//	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
//	ExternalObject.id = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
//	ExternalObject.type = СсылкаНаОбъект.Метаданные().ПолноеИмя();
//	ExternalObject.name = Строка(СсылкаНаОбъект);
//	
//	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
//	Запрос.externalObjects.Добавить(ExternalObject);
//	
//	Запрос.columnSet.Добавить("status");
//	
//	Результат = Прокси.execute(Запрос);
//	
//	Объект = Результат.documents[0];
//	Если Объект.status.name = "Согласован" Тогда
//		Согласован = Истина;
//	Иначе
//		Согласован = Ложь;
//	КонецЕсли;
//
Функция ПолучитьСостояниеСогласованияВ1СДокументооборот(СсылкаНаОбъект) Экспорт
	
	
	
КонецФункции

// Вызывается при получении WSПрокси. Переопределяется, если в конфигурации есть возможность настройки интернет-прокси.
//
// Параметры:
//   ИнтернетПрокси - может быть инициализировано значением типа ИнтернетПрокси.
//
Процедура ПриПолученииWSПрокси(ИнтернетПрокси) Экспорт
	
	
	
КонецПроцедуры

// Вызвается при обновлении БИД, и сверяет корректность состав определяемых типов между собой.
//
// Параметры:
//   Ошибки - Массив строк - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызвается при обновлении БИД, и сверяет корректность состав определяемых типов с планом обмена.
//
// Параметры:
//   Ошибки - Массив строк - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью входящих, исходящих, внутренних документов Документооборота.
// Позволяет выполнить дополнительные проверки перд записью, и отказаться от записи.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект. Тип DMInternalDocument, DMIncomingDocument, DMOutgoingDocument.
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от записи документа.
//
Процедура ПередЗаписьюДокумента(Прокси, ОбъектXDTO, Форма, Отказ) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//   ИмяРодительскойКонстанты - Строка - имя константы как оно задано в конфигураторе
//   ЗначениеРодительскойКонстанты - Произвольный - значение константы
//
// Возвращаемое значение:
//   Структура
//     * Ключ - имя подчиненной константы
//     * Значение - значение подчиненной константы, соответствующее значению родительской константы
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты) Экспорт
	
	Результат		= Новый Структура;
	ТаблицаКонстант	= ЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗависимостиКонстант() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	// Интеграция с 1С:Документооборот
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьЕжедневныеОтчеты1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьЭлектроннуюПочту1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьФайловоеХранилище1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьПроцессыИЗадачи1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьСвязанныеДокументы1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
		Ложь);
	
	// Инвертируемые константы
	ДобавитьСтрокуИнвертируемыхКонстант(
		Результат,
		"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
		"ИспользоватьПрисоединенныеФайлыИнтегрированнойСистемы");
	ДобавитьСтрокуИнвертируемыхКонстант(
		Результат,
		"ИспользоватьФайловоеХранилище1СДокументооборота",
		"ИспользоватьПрисоединенныеФайлыИнтегрированнойСистемы");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты)
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты = "")
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Ложь,
		ИмяПодчиненнойКонстанты,
		Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Истина,
		ИмяПодчиненнойКонстанты,
		Ложь);
	
КонецПроцедуры

#КонецОбласти
