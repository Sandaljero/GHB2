#Region Common

Function checkParams(params,required)
	
	requiredArray = StrSplit(required,",",false); 
	
	For Each param In requiredArray Do
		
		If params.Get(param) = Undefined Then
			Return getErrorMap("-32602","Invalid params");
		EndIf;
		
	EndDo;
	
	Return Undefined;
	
EndFunction

Function getErrorMap(code,message)
	
	Map = New Map;
	ErrorMap = New Map;
	ErrorMap.Insert("code",code);
	ErrorMap.Insert("message",message);
	Map.Insert("error",ErrorMap);
	
	Return Map;
	
EndFunction

#EndRegion

#Region ПРИМЕР_ФУНКЦИИ

Функция ТестСервиса(Параметры) Экспорт
	
	//Проверка параметров запроса
	//Нужно передать обязательные параметры
	Результат = checkParams(Параметры,"Номер, Дата");
	Если ЗначениеЗаполнено(Результат) Тогда Возврат Результат КонецЕсли;
	//************************************************************
	
	
	
	
	//Тут происходят некие действия с базой и формируется пакет ответа
	//Можно формировать ответ в виде структуры или соответствия
	//ВАЖНО!!! Все параметры результата должны быть примитивных типов. 
	//Ссылки использовать нельзя (пока я не допишу обработку их выгрузки)
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("НекийПараметр","ЗначениеПараметра");
	СтруктураОтвета.Вставить("Номер",Параметры["Номер"]);
	СтруктураОтвета.Вставить("Дата",Параметры["Дата"]);
	
	
	
	
	
	//************************************************************
	//Функция всегда возвращает соотвествие с 
	//элементом "result" в случае успешной обработки 
	//и "error" если произошли ошибки
	Результат = Новый Соответствие;
	Результат.Вставить("result",СтруктураОтвета);
	Возврат Результат;
	
КонецФункции

#EndRegion

#Region Api

Функция ВыполнитьПроцедуруJsonRPC(СерверJsonRPC, ИмяПроцедуры, ПараметрыПроцедуры, _Таймаут = 30) Экспорт
	
	Попытка
		
		стJSON = Новый Структура;
		стJSON.Вставить("jsonrpc", "2.0");
		стJSON.Вставить("method", ИмяПроцедуры);
		стJSON.Вставить("params", ПараметрыПроцедуры);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, стJSON);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		Соединение = Новый HTTPСоединение(
					СокрЛП(СерверJsonRPC.Сервер),,
					СокрЛП(СерверJsonRPC.Пользователь),
					СокрЛП(СерверJsonRPC.Пароль),
					,
					_Таймаут);
					
		ЗапросHTTP = Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса = СокрЛП(СерверJsonRPC.АдресРесурса);
		ЗапросHTTP.Заголовки.Вставить("content-type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = Соединение.POST(ЗапросHTTP);
		
		Если Результат.КодСостояния = 200 Тогда
			
			стрJSON = Результат.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(стрJSON);
			стОтвет = ПрочитатьJSON(ЧтениеJSON, Ложь);
			
			Если стОтвет.Свойство("result") Тогда
				Возврат Новый Структура("ОбменПрошел,Результат", Истина, стОтвет);
			ИначеЕсли стОтвет.Свойство("error") Тогда
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, стОтвет.error.message);
			Иначе// Это на всякий случай, если структура ответа будет переделываться.
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "Неизвестная структура ответа");
			КонецЕсли;
			
		Иначе
			Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "КодСостояния = " + Результат.КодСостояния);
		КонецЕсли;
		
	Исключение
		Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

#EndRegion

#Область ЗапросРуководителя

Функция ПолучитьСтруктуруРуководителейПоИНН(Параметры) Экспорт

	мДанные = Новый Массив;
	Запрос = Новый Запрос;
	мРольДокументооборота = Неопределено;
	мБаза = Неопределено;
	ИНН = Неопределено;
	
	Если Параметры <> Неопределено 
		И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
		
		Если Параметры.Получить("ИНН") <> Неопределено Тогда
			
			ИНН = Параметры.Получить("ИНН");
			Запрос.УстановитьПараметр("мИНН", ИНН);
			
		КонецЕсли;
		
		Если Параметры.Получить("Роль") <> Неопределено Тогда
			
			мРольДокументооборотаСтроки = Параметры.Получить("Роль");
			мРольДокументооборота = Новый Массив;
			
			Для каждого РольСтрока Из мРольДокументооборотаСтроки Цикл
				мРольДокументооборота.Добавить(Справочники.гхб_РолиДокументооборота.НайтиПоНаименованию(РольСтрока));
			КонецЦикла;
			
			Запрос.УстановитьПараметр("мРольДокументооборота", мРольДокументооборота);
			
		КонецЕсли;
		
		Если Параметры.Получить("База") <> Неопределено Тогда
			
			мБазаСтроки = Параметры.Получить("База");
			мБаза = Новый Массив;
			
			Для каждого БазаСтрока Из мБазаСтроки Цикл
				мБаза.Добавить(Справочники.гхб_БазыХолдинга.НайтиПоНаименованию(БазаСтрока));
			КонецЦикла;
			
			Запрос.УстановитьПараметр("мБазаХолдинга", мБаза);
			
		КонецЕсли;
		
	Иначе
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", Новый Массив));
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Сотрудник,
	|	гхб_ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоБазХолдинга,
	|	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	гхб_РуководителиПодразделенийБазХолдинга.ФизЛицо КАК Руководитель,
	|	гхб_РуководителиПодразделенийБазХолдинга.РольДокументооборота КАК РольДокументооборота,
	|	РаботникиОрганизацийБазХолдингаСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	гхб_ФизическиеЛицаБазХолдинга.ИНН КАК ИННСотрудник,
	|	ФизическиеЛицаБазХолдингаРуководители.ИНН КАК ИННРуководитель
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			" + ?(ИНН = Неопределено, "", " И (гхб_ФизическиеЛица.ИНН В (&мИНН)) ") + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК РаботникиОрганизацийБазХолдингаСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РуководителиПодразделенийБазХолдинга КАК гхб_РуководителиПодразделенийБазХолдинга
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК ФизическиеЛицаБазХолдингаРуководители
	|					ПО гхб_РуководителиПодразделенийБазХолдинга.ФизЛицо = ФизическиеЛицаБазХолдингаРуководители.Ссылка
	|				ПО (гхб_РуководителиПодразделенийБазХолдинга.ПодразделениеОрганизации = РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации)
	|					И (гхб_РуководителиПодразделенийБазХолдинга.БазаХолдинга = РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга)
	|			ПО (РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|ГДЕ
	|	НЕ гхб_ФизическиеЛица.ПометкаУдаления
	|	" + ?(мБаза <> Неопределено, " И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга В(&мБазаХолдинга) ", "") + "
	|	" + ?(мРольДокументооборота <> Неопределено, " И гхб_РуководителиПодразделенийБазХолдинга.РольДокументооборота В(&мРольДокументооборота) ", "") + "";
	
	резЗапрос = Запрос.Выполнить();
	Выборка = резЗапрос.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", Новый Массив));
		Возврат Результат;
		
	Иначе
		
		мДанные = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
		
			стСтрока = Новый Структура;
			
			Для каждого КолонкаВыборки Из резЗапрос.Колонки Цикл
				стСтрока.Вставить(КолонкаВыборки.Имя, Строка(Выборка[КолонкаВыборки.Имя]));
			КонецЦикла;
			
			мДанные.Добавить(стСтрока);
		
		КонецЦикла;
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", мДанные));
		Возврат Результат;
		
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруРуководителейПоИНН()

Функция ПолучитьРуководителейПоБюджетнымКодам(Параметры) Экспорт

	Если Параметры <> Неопределено И Параметры.Получить("МассивБюджетныхКодов") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("мБюджетныеКоды", Параметры.Получить("МассивБюджетныхКодов"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
		|	гхб_ФизическиеЛица.Ссылка КАК Ссылка,
		|	гхб_ФизическиеЛица.Наименование КАК Наименование,
		|	гхб_ФизическиеЛица.ИНН КАК ИНН,
		|	гхб_ФизическиеЛица.Пол КАК Пол,
		|	гхб_ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ЕСТЬNULL(гхб_ДолжностиОрганизацийБазХолдинга.Наименование, """") КАК Должность
		|ИЗ
		|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних(, БюджетныйКодПозиции В (&мБюджетныеКоды)) КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
		|				ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
		|			ПО гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка
		|		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
		|		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность = гхб_ДолжностиОрганизацийБазХолдинга.Ссылка
		|ГДЕ
		|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
		|	И гхб_ФизическиеЛица.ИНН <> """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		мДанные = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			стСтрока = Новый Структура;
			стСтрока.Вставить("БюджетныйКодПозиции", Выборка.БюджетныйКодПозиции);
			стСтрока.Вставить("НаименованиеФЛ", Выборка.Наименование);
			стСтрока.Вставить("ИНН", Выборка.ИНН);
			стСтрока.Вставить("Пол", XMLСтрока(Выборка.Пол));
			стСтрока.Вставить("ДатаРождения", Выборка.ДатаРождения);
			стСтрока.Вставить("Должность", Выборка.Должность);
			мДанные.Добавить(стСтрока);
		
		КонецЦикла;
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", мДанные));
		Возврат Результат;
		
	Иначе
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", Новый Массив));
		Возврат Результат;
		
	КонецЕсли;

КонецФункции // ПолучитьРуководителейПоБюджетнымКодам()

// ++ Тогушаков 05.11.2020 #17984 \\
Функция ПолучитьУволенныхРуководителейПоБюджетнымКодам(Параметры) Экспорт

	Если Параметры <> Неопределено И Параметры.Получить("МассивБюджетныхКодов") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("мБюджетныеКоды", Параметры.Получить("МассивБюджетныхКодов"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
		|	гхб_ФизическиеЛица.Ссылка КАК Ссылка,
		|	гхб_ФизическиеЛица.Наименование КАК Наименование,
		|	гхб_ФизическиеЛица.ИНН КАК ИНН,
		|	гхб_ФизическиеЛица.Пол КАК Пол,
		|	гхб_ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ЕСТЬNULL(гхб_ДолжностиОрганизацийБазХолдинга.Наименование, """") КАК Должность
		|ИЗ
		|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних(, БюджетныйКодПозиции В (&мБюджетныеКоды)) КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
		|				ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
		|			ПО гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка
		|		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
		|		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность = гхб_ДолжностиОрганизацийБазХолдинга.Ссылка
		|ГДЕ
		|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
		|	И гхб_ФизическиеЛица.ИНН <> """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		мДанные = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			стСтрока = Новый Структура;
			стСтрока.Вставить("БюджетныйКодПозиции", Выборка.БюджетныйКодПозиции);
			стСтрока.Вставить("НаименованиеФЛ", Выборка.Наименование);
			стСтрока.Вставить("ИНН", Выборка.ИНН);
			стСтрока.Вставить("Пол", XMLСтрока(Выборка.Пол));
			стСтрока.Вставить("ДатаРождения", Выборка.ДатаРождения);
			стСтрока.Вставить("Должность", Выборка.Должность);
			мДанные.Добавить(стСтрока);
		
		КонецЦикла;
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", мДанные));
		Возврат Результат;
		
	Иначе
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", Новый Массив));
		Возврат Результат;
		
	КонецЕсли;

КонецФункции // ПолучитьУволенныхРуководителейПоБюджетнымКодам()
// -- Тогушаков 05.11.2020 #17984

#КонецОбласти

#Область ЗапросыДокументоооборота
	
Функция ПолучитьКадровыеДанныеГХБ2(Параметры) Экспорт 

	Запрос = Новый Запрос;
	
	Если Параметры <> Неопределено 
		И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
		
		Если Параметры.Получить("ИНН") <> Неопределено Тогда
			
			ИНН = Параметры.Получить("ИНН");
			Запрос.УстановитьПараметр("мИНН", ИНН);
			
		КонецЕсли;
		
	Иначе
		
		Результат = Новый Соответствие;
		Результат.Вставить("result", Новый Структура("Данные", Новый Массив));
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ФизическиеЛица.ИНН КАК ИНН,
	|	ЕСТЬNULL(гхб_РаботникиОрганизацийБазХолдингаСрезПервых.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоРаботы,
	|	ЕСТЬNULL(гхб_РаботникиОрганизацийБазХолдингаСрезПервых.Организация, """") КАК Организация,
	|	ЕСТЬNULL(гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ДатаОкончанияСрочногоТрудовогоДоговора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ДатаОкончанияСрочногоТрудовогоДоговора <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ""СТД""
	|		ИНАЧЕ ""БТД""
	|	КОНЕЦ КАК Формат
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПервых(, ) КАК гхб_РаботникиОрганизацийБазХолдингаСрезПервых
	|			ПО гхб_СотрудникиБазХолдинга.Ссылка = гхб_РаботникиОрганизацийБазХолдингаСрезПервых.Сотрудник
	|				И гхб_СотрудникиБазХолдинга.БазаХолдинга = гхб_РаботникиОрганизацийБазХолдингаСрезПервых.БазаХолдинга
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|			ПО гхб_СотрудникиБазХолдинга.Ссылка = гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник
	|				И гхб_СотрудникиБазХолдинга.БазаХолдинга = гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|			И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = гхб_СотрудникиБазХолдинга.БазаХолдинга
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	гхб_ФизическиеЛица.ИНН,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Организация,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	""ГПХ""
	|ИЗ
	|	Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|			ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|				И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|			ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|				И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = гхб_СотрудникиБазХолдинга.БазаХолдинга
	|		ПО (гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|			И (НЕ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ПометкаУдаления)
	|ГДЕ
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &текДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	гхб_ФизическиеЛица.ИНН,
	|	гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ДатаНачала,
	|	гхб_ДоговораКонтрагентовБазХолдинга.Организация,
	|	гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ДатаОкончания,
	|	""ФОП""
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга.РаботникиФОП КАК гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|			ПО (НЕ гхб_ДоговораКонтрагентовБазХолдинга.ПометкаУдаления)
	|		ПО гхб_ДоговораКонтрагентовБазХолдинга.Ссылка = гхб_ДоговораКонтрагентовБазХолдинга.Ссылка
	|			И гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ФизЛицо
	|ГДЕ
	|	гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ДатаОкончания >= &текДата";
	
	Запрос.УстановитьПараметр("текДата", ТекущаяДата());
	
	тзМестаРаботы = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мИНН", ИНН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид, """") КАК ДокументВид,
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия, """") КАК ДокументСерия,
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер, """") КАК ДокументНомер,
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи, """") КАК ДокументДатаВыдачи,
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан, """") КАК ДокументКемВыдан,
	|	ЕСТЬNULL(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументСрокДействия, """") КАК ДокументСрокДействия,
	|	гхб_ФизическиеЛица.ИНН КАК ИНН,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоБХ
	|ПОМЕСТИТЬ втВсеПаспортныеДанныеПоИНН
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ПаспортныеДанныеФизЛиц.СрезПоследних КАК гхб_ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (гхб_ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка)
	|ГДЕ
	|	(гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид <> ЗНАЧЕНИЕ(Справочник.гхб_ДокументыУдостоверяющиеЛичность.ПустаяСсылка)
	|			ИЛИ гхб_ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер <> """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицоБХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ФизическиеЛица.ИНН КАК ИНН,
	|	МАКСИМУМ(гхб_ФизическиеЛицаБазХолдинга.РасчетныйСчетДляВыплат) КАК РасчетныйСчетДляВыплат,
	|	МАКСИМУМ(гхб_ФизическиеЛицаБазХолдинга.СКР_ДляВыплатНаБанк) КАК СКР_ДляВыплатНаБанк
	|ПОМЕСТИТЬ втРасчетныйСчет
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_ФизическиеЛица.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеПоИНН.ИНН КАК ИНН,
	|	МАКСИМУМ(втВсеПаспортныеДанныеПоИНН.ФизЛицоБХ) КАК ФизЛицоБХ
	|ПОМЕСТИТЬ втИННФизЛица
	|ИЗ
	|	втВсеПаспортныеДанныеПоИНН КАК втВсеПаспортныеДанныеПоИНН
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПаспортныеДанныеПоИНН.ИНН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицоБХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПаспортныеДанныеПоИНН.ДокументВид КАК ДокументВид,
	|	втВсеПаспортныеДанныеПоИНН.ДокументСерия КАК ДокументСерия,
	|	втВсеПаспортныеДанныеПоИНН.ДокументНомер КАК ДокументНомер,
	|	втВсеПаспортныеДанныеПоИНН.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	втВсеПаспортныеДанныеПоИНН.ДокументКемВыдан КАК ДокументКемВыдан,
	|	втВсеПаспортныеДанныеПоИНН.ДокументСрокДействия КАК ДокументСрокДействия,
	|	втВсеПаспортныеДанныеПоИНН.ИНН КАК ИНН
	|ПОМЕСТИТЬ втПаспортныеДанные
	|ИЗ
	|	втИННФизЛица КАК втИННФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеПаспортныеДанныеПоИНН КАК втВсеПаспортныеДанныеПоИНН
	|		ПО втИННФизЛица.ФизЛицоБХ = втВсеПаспортныеДанныеПоИНН.ФизЛицоБХ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(гхб_КонтактнаяИнформацияБазХолдингаПрописка.Представление, """") КАК СТРОКА(500))) КАК Прописка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(гхб_КонтактнаяИнформацияБазХолдингаФактическийАдрес.Представление, """") КАК СТРОКА(500))) КАК ФактическийАдрес,
	|	МАКСИМУМ(гхб_НомераТелефонов.Наименование) КАК Телефон,
	|	гхб_ФизическиеЛица.ИНН КАК ИНН
	|ПОМЕСТИТЬ втКИ
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдингаПрописка
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_КонтактнаяИнформацияБазХолдингаПрописка.Объект
	|			И (гхб_КонтактнаяИнформацияБазХолдингаПрописка.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизЛица))
	|			И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = гхб_КонтактнаяИнформацияБазХолдингаПрописка.БазаХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдингаФактическийАдрес
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_КонтактнаяИнформацияБазХолдингаФактическийАдрес.Объект
	|			И (гхб_КонтактнаяИнформацияБазХолдингаФактическийАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПроживанияФизЛица))
	|			И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = гхб_КонтактнаяИнформацияБазХолдингаФактическийАдрес.БазаХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдингаТелефон
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_КонтактнаяИнформацияБазХолдингаТелефон.Объект
	|			И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = гхб_КонтактнаяИнформацияБазХолдингаТелефон.БазаХолдинга
	|			И (гхб_КонтактнаяИнформацияБазХолдингаТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СоответствиеНомеровТелефоновФизЛицам.СрезПоследних КАК гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_НомераТелефонов КАК гхб_НомераТелефонов
	|			ПО гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.НомерТелефона = гхб_НомераТелефонов.Ссылка
	|		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.ФизЛицоБазыХолдинга
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_ФизическиеЛица.ИНН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(гхб_ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(гхб_ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(гхб_ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
	|	гхб_ФизическиеЛица.ИНН КАК ИНН,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоБХ
	|ПОМЕСТИТЬ втФИОВсе
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			И (гхб_ФизическиеЛица.ИНН В (&мИНН))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ФИОФизЛиц.СрезПоследних КАК гхб_ФИОФизЛицСрезПоследних
	|		ПО (гхб_ФИОФизЛицСрезПоследних.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка)
	|ГДЕ
	|	гхб_ФИОФизЛицСрезПоследних.Фамилия <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втФИОВсе.ФизЛицоБХ) КАК ФизЛицоБХ,
	|	втФИОВсе.ИНН КАК ИНН
	|ПОМЕСТИТЬ втМахФИО
	|ИЗ
	|	втФИОВсе КАК втФИОВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	втФИОВсе.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФИОВсе.Фамилия КАК Фамилия,
	|	втФИОВсе.Имя КАК Имя,
	|	втФИОВсе.Отчество КАК Отчество,
	|	втФИОВсе.ИНН КАК ИНН
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втФИОВсе КАК втФИОВсе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМахФИО КАК втМахФИО
	|		ПО втФИОВсе.ФизЛицоБХ = втМахФИО.ФизЛицоБХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИО.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументВид, """") КАК ДокументВид,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументСерия, """") КАК ДокументСерия,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументНомер, """") КАК ДокументНомер,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументДатаВыдачи, """") КАК ДокументДатаВыдачи,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументКемВыдан, """") КАК ДокументКемВыдан,
	|	ЕСТЬNULL(втПаспортныеДанные.ДокументСрокДействия, """") КАК ДокументСрокДействия,
	|	гхб_ФизическиеЛица.Пол КАК Пол,
	|	гхб_ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втРасчетныйСчет.РасчетныйСчетДляВыплат, """") КАК IBAN,
	|	ЛОЖЬ КАК Нерезидент,
	|	ЕСТЬNULL(втРасчетныйСчет.СКР_ДляВыплатНаБанк, """") КАК СКР,
	|	втКИ.Прописка КАК Прописка,
	|	втКИ.ФактическийАдрес КАК ФактическийАдрес,
	|	втКИ.Телефон КАК Телефон,
	|	гхб_ФизическиеЛица.ИНН КАК ИНН
	|ИЗ
	|	Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИО КАК втФИО
	|		ПО гхб_ФизическиеЛица.ИНН = втФИО.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасчетныйСчет КАК втРасчетныйСчет
	|		ПО гхб_ФизическиеЛица.ИНН = втРасчетныйСчет.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПаспортныеДанные КАК втПаспортныеДанные
	|		ПО гхб_ФизическиеЛица.ИНН = втПаспортныеДанные.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИ КАК втКИ
	|		ПО гхб_ФизическиеЛица.ИНН = втКИ.ИНН
	|ГДЕ
	|	гхб_ФизическиеЛица.ИНН В(&мИНН)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	мДанные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДеталь = Выборка.Выбрать();
		мМестоРаботы = Новый Массив;
		стСтрока = Новый Структура();
		
		стСтрока.Вставить("ИНН", Выборка.ИНН);
		стСтрока.Вставить("Фамилия", Строка(Выборка.Фамилия));
		стСтрока.Вставить("Имя", Строка(Выборка.Имя));
		стСтрока.Вставить("Отчество", Строка(Выборка.Отчество));
		стСтрока.Вставить("ДатаРождения", Выборка.ДатаРождения);
		стСтрока.Вставить("Пол", Строка(Выборка.Пол));
		стСтрока.Вставить("Нерезидент", Строка(Выборка.Нерезидент));
		стСтрока.Вставить("ВидДокумента", Строка(Выборка.ДокументВид));
		стСтрока.Вставить("Номер", Строка(Выборка.ДокументНомер));
		стСтрока.Вставить("Серия", Строка(Выборка.ДокументСерия));
		стСтрока.Вставить("Прописка", Строка(Выборка.Прописка));
		стСтрока.Вставить("Адрес", Строка(Выборка.ФактическийАдрес));
		стСтрока.Вставить("Телефон", Строка(Выборка.Телефон));
		стСтрока.Вставить("ДатаВыдачи", Выборка.ДокументДатаВыдачи);
		стСтрока.Вставить("КемВыдан", Строка(Выборка.ДокументКемВыдан));
		стСтрока.Вставить("СрокДействия", Выборка.ДокументСрокДействия);
		стСтрока.Вставить("IBAN", Строка(Выборка.IBAN));
		стСтрока.Вставить("СКР", Строка(Выборка.СКР));
		
		мНайденное = тзМестаРаботы.НайтиСтроки(Новый Структура("ИНН", Выборка.ИНН));
		
		Для каждого СтрокаНайденное Из мНайденное Цикл
		
			стМестоРаботы = Новый Структура;
			стМестоРаботы.Вставить("Организация", Строка(СтрокаНайденное.Организация));
			стМестоРаботы.Вставить("Формат", СтрокаНайденное.Формат);
			стМестоРаботы.Вставить("НачалоРаботы", СтрокаНайденное.НачалоРаботы);
			стМестоРаботы.Вставить("ДатаОкончания", СтрокаНайденное.ДатаОкончания);
			мМестоРаботы.Добавить(стМестоРаботы);
		
		КонецЦикла;
		
		стСтрока.Вставить("МестаРаботы", мМестоРаботы);
		мДанные.Добавить(стСтрока);
	
	КонецЦикла;
	
	Результат = Новый Соответствие;
	Результат.Вставить("result", Новый Структура("Данные", мДанные));
	Возврат Результат;

КонецФункции // ПолучитьКадровыеДанныеГХБ2()
	
#КонецОбласти

#Область ОбменФотоФизЛиц

Функция ЗаписатьДанныеФотоФизЛиц(Параметры) Экспорт
	
	Результат = Новый Структура();
	
	Попытка
	
		Если Параметры <> Неопределено 
			И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
			
			_ИдентификаторБазы = Параметры.Получить("База");
			_База = Справочники.гхб_БазыХолдинга.НайтиПоРеквизиту("GUIDБазы", _ИдентификаторБазы);
			
			Если ЗначениеЗаполнено(_База) Тогда
				
				_МассивУзловДляРегистрации = гхб_ОбщегоНазначенияСервер.ВернутьМассивУзловДляРегистрацииОбменаДаннымиСБазамиХолдинга();
				
				_Каталог = ?(Параметры.Получить("ЗащищенныйКаталогДляВыгрузки"), 
					Справочники.гхб_СлужебныеЗначения.ПапкаХраненияФайловУчетнаяЗапись1С,
					Справочники.гхб_СлужебныеЗначения.ПапкаХраненияФайловУчетнаяЗапись1СНеЗащищенные);
					
				_МассивИдентификаторовФЛ = Новый Массив();
					
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					_МассивИдентификаторовФЛ.Добавить(Стр.Получить("ФизЛицо"));
				КонецЦикла;
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы КАК ФизЛицоТекущейБазы,
				               |	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга,
				               |	гхб_СписокФайлов.Идентификатор КАК Идентификатор,
				               |	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Ссылка
				               |ИЗ
				               |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СписокФайлов КАК гхб_СписокФайлов
				               |		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_СписокФайлов.ВладелецФайла
				               |			И (гхб_СписокФайлов.ТипДанных = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыДанныхФайлов.ФотоФизЛица))
				               |ГДЕ
				               |	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга
				               |	И гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга В(&GUIDБазыХолдинга)";
				
				Запрос.УстановитьПараметр("БазаХолдинга", _База);
				Запрос.УстановитьПараметр("GUIDБазыХолдинга", _МассивИдентификаторовФЛ);
				
				_ТЗ = Запрос.Выполнить().Выгрузить();
				_ТЗ.Индексы.Добавить("GUIDБазыХолдинга");
				
				_МассивИдентификаторовДляВозврата = Новый Массив();
				
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					НайденнаяСтрока = _ТЗ.Найти(Стр.Получить("ФизЛицо"), "GUIDБазыХолдинга");
					
					Если НЕ (НайденнаяСтрока = Неопределено) Тогда
						
						МЗ = РегистрыСведений.гхб_СписокФайлов.СоздатьМенеджерЗаписи();
						МЗ.ВладелецФайла = НайденнаяСтрока.ФизЛицоТекущейБазы;
						МЗ.Идентификатор = ?(НайденнаяСтрока.Идентификатор = NULL, Новый УникальныйИдентификатор(), НайденнаяСтрока.Идентификатор);
						МЗ.ДатаЗаписи = ТекущаяДатаСеанса();
						МЗ.КаталогСохранения = _Каталог;
						МЗ.Период = МЗ.ДатаЗаписи;
						МЗ.ПолноеИмяФайла = Стр.Получить("ПутьКДанным");
						МЗ.ТипДанных = Перечисления.гхб_ТипыДанныхФайлов.ФотоФизЛица;
						МЗ.Записать();
						
						_МассивИдентификаторовДляВозврата.Добавить(Стр.Получить("Идентификатор"));
					КонецЕсли;
				КонецЦикла;
				
				ЗапросРегистрацияДляОбратногоОбмена = Новый Запрос();
				ЗапросРегистрацияДляОбратногоОбмена.Текст = "ВЫБРАТЬ
				                                            |	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Ссылка,
				                                            |	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга КАК БазаХолдинга
				                                            |ИЗ
				                                            |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				                                            |ГДЕ
				                                            |	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы В(&ФизЛицаТекущейБазы)
				                                            |	И НЕ гхб_ФизическиеЛицаБазХолдинга.Ссылка В (&Ссылка)
				                                            |	И гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга.ТипБазы = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыБазХолдинга.РИБ)";
				
				ЗапросРегистрацияДляОбратногоОбмена.УстановитьПараметр("ФизЛицаТекущейБазы", _ТЗ.ВыгрузитьКолонку("ФизЛицоТекущейБазы"));
				ЗапросРегистрацияДляОбратногоОбмена.УстановитьПараметр("Ссылка", _ТЗ.ВыгрузитьКолонку("Ссылка"));
				
				ВыборкаРегистрация = ЗапросРегистрацияДляОбратногоОбмена.Выполнить().Выбрать();
				
				//_Текст = "База: " + СокрЛП(_База) + Символы.ПС;
				
				Пока ВыборкаРегистрация.Следующий() Цикл
										
					Для Каждого _Узел Из _МассивУзловДляРегистрации Цикл
						//_Текст = _Текст + "ФЛ: " + СокрЛП(ВыборкаРегистрация.Ссылка) + "; База холдинга: " + СокрЛП(ВыборкаРегистрация.БазаХолдинга) + Символы.ПС;
						ПланыОбмена.ЗарегистрироватьИзменения(_Узел, ВыборкаРегистрация.Ссылка);
					КонецЦикла;
					
				КонецЦикла;
				
				//гхб_ОбщегоНазначенияСервер.ЗаписатьОшибкуВФайл("\\stb\special\1c-dev\1C\Logs\Test\ЗаписатьДанныеФотоФизЛиц", _Текст);
				
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, _МассивИдентификаторовДляВозврата));
			Иначе
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Не найдена база по идентификатору: " + _ИдентификаторБазы));
			КонецЕсли;		
			
		Иначе
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Неправильный формат переданных параметров"));
		КонецЕсли;
		
	Исключение
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьПутьКФотоПоИНН(Параметры) Экспорт 
	
	Результат = Новый Структура();
	
	Попытка
	
		Если Параметры <> Неопределено 
			И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	гхб_СписокФайлов.КаталогСохранения КАК КаталогСохранения,
			               |	гхб_СписокФайлов.ПолноеИмяФайла КАК ПолноеИмяФайла
			               |ИЗ
			               |	Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СписокФайлов КАК гхб_СписокФайлов
			               |		ПО гхб_ФизическиеЛица.Ссылка = гхб_СписокФайлов.ВладелецФайла
			               |			И (гхб_СписокФайлов.ТипДанных = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыДанныхФайлов.ФотоФизЛица))
			               |ГДЕ
			               |	гхб_ФизическиеЛица.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("ИНН", Параметры.Получить("ИНН"));
		    Выборка = Запрос.Выполнить().Выбрать();
			
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, ?(Выборка.Следующий(), 
				гхб_ОбщегоНазначенияКлиентСервер.ДобавитьСлешВПуть(Выборка.КаталогСохранения.Значение) + Выборка.ПолноеИмяФайла, "")));
			
		Иначе
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, 
				"Неправильный формат переданных параметров"));
		КонецЕсли;
		
	Исключение
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БлокироватьПользователей

Функция БлокироватьУволенныхПользователей(Параметры) Экспорт 
	
	Результат = Новый Структура();
	
	Попытка
	
		Если Параметры <> Неопределено 
			И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
			
			_ИдентификаторБазы = Параметры.Получить("База");
			_База = Справочники.гхб_БазыХолдинга.НайтиПоРеквизиту("GUIDБазы", _ИдентификаторБазы);
			
			Если ЗначениеЗаполнено(_База) Тогда
				
				_МассивИдентификаторовФЛ = Новый Массив();
					
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					_МассивИдентификаторовФЛ.Добавить(Стр.Получить("ФЛ"));
				КонецЦикла;
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	гхб_ФизическиеЛица.Ссылка КАК Ссылка,
				               |	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга
				               |ПОМЕСТИТЬ _ФЛ
				               |ИЗ
				               |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
				               |		ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
				               |ГДЕ
				               |	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга
				               |	И гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга В(&GUIDБазыХолдинга)
				               |
				               |ИНДЕКСИРОВАТЬ ПО
				               |	Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	гхб_ПользователиБазХолдинга.Ссылка КАК Ссылка,
				               |	_ФЛ.GUIDБазыХолдинга КАК GUIDБазыХолдинга
				               |ИЗ
				               |	_ФЛ КАК _ФЛ
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
				               |			ПО (гхб_ПользователиБазХолдинга.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка)
				               |		ПО _ФЛ.Ссылка = гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |УНИЧТОЖИТЬ _ФЛ";
				                        
				Запрос.УстановитьПараметр("БазаХолдинга", _База);
				Запрос.УстановитьПараметр("GUIDБазыХолдинга", _МассивИдентификаторовФЛ);
				
				Рез = Запрос.Выполнить().Выгрузить();
				Рез.Индексы.Добавить("GUIDБазыХолдинга");
				
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					_НайденныеСтроки = Рез.НайтиСтроки(Новый Структура("GUIDБазыХолдинга", Стр.Получить("ФЛ")));
					
					Для Каждого _НайденнаяСтрока Из _НайденныеСтроки Цикл
						РегистрыСведений.гхб_СобытияОбъектовБД.ЗаписатьДанныеСобытияОбъекта(_НайденнаяСтрока.Ссылка, 
							Перечисления.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя, , , 
							гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(Стр.Получить("ДатаУвольнения"), Истина, Ложь)));
					КонецЦикла;
				КонецЦикла;
				
				ЗапросПользователи = Новый Запрос();
				ЗапросПользователи.Текст = "ВЫБРАТЬ
				                           |	Пользователи.Ссылка КАК Ссылка,
				                           |	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга
				                           |ИЗ
				                           |	Справочник.Пользователи КАК Пользователи
				                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				                           |		ПО Пользователи.ФизическоеЛицо = гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы
				                           |ГДЕ
				                           |	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга
				                           |	И гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга В(&GUIDБазыХолдинга)
				                           |
				                           |СГРУППИРОВАТЬ ПО
				                           |	Пользователи.Ссылка,
				                           |	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга";
				
				ЗапросПользователи.УстановитьПараметр("БазаХолдинга", _База);
				ЗапросПользователи.УстановитьПараметр("GUIDБазыХолдинга", _МассивИдентификаторовФЛ);
				
				РезПользователи = ЗапросПользователи.Выполнить().Выгрузить();
				РезПользователи.Индексы.Добавить("GUIDБазыХолдинга");
				
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					_НайденныеСтроки = РезПользователи.НайтиСтроки(Новый Структура("GUIDБазыХолдинга", Стр.Получить("ФЛ")));
					
					Для Каждого _НайденнаяСтрока Из _НайденныеСтроки Цикл
						РегистрыСведений.гхб_СобытияОбъектовБД.ЗаписатьДанныеСобытияОбъекта(_НайденнаяСтрока.Ссылка, 
							Перечисления.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя, , , 
							гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(Стр.Получить("ДатаУвольнения"), , Ложь)));
					КонецЦикла;
				КонецЦикла;
								
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, ""));
			Иначе
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Не найдена база по идентификатору: " + _ИдентификаторБазы));
			КонецЕсли;		
			
		Иначе
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Неправильный формат переданных параметров"));
		КонецЕсли;
		
	Исключение
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область РаботаСПропусками

// Записывает информацию по временным пропускам, которые были выданы в учетных базах
Функция ЗаписатьДанныеВременныхПропусков(Параметры) Экспорт
	
	Результат = Новый Структура();
	
	Попытка
	
		Если Параметры <> Неопределено 
			И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
			
			_ИдентификаторБазы = Параметры.Получить("База");
			_База = Справочники.гхб_БазыХолдинга.НайтиПоРеквизиту("GUIDБазы", _ИдентификаторБазы);
			
			Если ЗначениеЗаполнено(_База) Тогда
				
				_МассивИдентификаторовФЛ = Новый Массив();
				
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					
					Если ЗначениеЗаполнено(Стр.Получить("ФизЛицо")) И (_МассивИдентификаторовФЛ.Найти(Стр.Получить("ФизЛицо")) = Неопределено) Тогда
						_МассивИдентификаторовФЛ.Добавить(Стр.Получить("ФизЛицо"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Стр.Получить("Ответственный")) И (_МассивИдентификаторовФЛ.Найти(Стр.Получить("Ответственный")) = Неопределено) Тогда
						_МассивИдентификаторовФЛ.Добавить(Стр.Получить("Ответственный"));
					КонецЕсли;
					
				КонецЦикла;
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы КАК ФизЛицоТекущейБазы,
				               |	гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга
				               |ИЗ
				               |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
				               |ГДЕ
				               |	гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга
				               |	И гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга В(&GUIDБазыХолдинга)";
				
				Запрос.УстановитьПараметр("БазаХолдинга", _База);
				Запрос.УстановитьПараметр("GUIDБазыХолдинга", _МассивИдентификаторовФЛ);
				
				_ТЗ = Запрос.Выполнить().Выгрузить();
				_ТЗ.Индексы.Добавить("GUIDБазыХолдинга");
				
				Для Каждого Стр Из Параметры.Получить("Данные") Цикл
					НайденнаяСтрокаСотрудник = _ТЗ.Найти(Стр.Получить("ФизЛицо"), "GUIDБазыХолдинга");
					НайденнаяСтрокаОтветственный = _ТЗ.Найти(Стр.Получить("Ответственный"), "GUIDБазыХолдинга");
					
					_Дата = гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(Стр.Получить("ДатаЗаписи"));
					
					МЗ = РегистрыСведений.гхб_ИсторияВыдачиВременныхПропусков.СоздатьМенеджерЗаписи();
					МЗ.Период = _Дата;
					МЗ.НомерПропуска = Стр.Получить("НомерПропуска");
					МЗ.Сотрудник = ?(НайденнаяСтрокаСотрудник = Неопределено, Справочники.гхб_ФизическиеЛица.ПустаяСсылка(), НайденнаяСтрокаСотрудник.ФизЛицоТекущейБазы);
					МЗ.Ответственный = ?(НайденнаяСтрокаОтветственный = Неопределено, Справочники.гхб_ФизическиеЛица.ПустаяСсылка(), НайденнаяСтрокаОтветственный.ФизЛицоТекущейБазы);
					МЗ.БазаХолдинга = _База;
					МЗ.Состояние = Перечисления.гхб_ВидИзмененияСостоянияВременногоПропуска.Получить(Стр.Получить("Состояние"));
					МЗ.Комментарий = Стр.Получить("Комментарий");
					МЗ.Записать();
						
				КонецЦикла;
				
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, ""));
			Иначе
				Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Не найдена база по идентификатору: " + _ИдентификаторБазы));
			КонецЕсли;		
			
		Иначе
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Неправильный формат переданных параметров"));
		КонецЕсли;
		
	Исключение
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию об основном месте работы сотрудника для указанного пропуска
//
// Параметры:
//	Дата - дата, на которую проверяем пропуск
//	Данные: массив состоящий из значений типа структура
//		НомерПропуска - номер пропуска
//		ТипПропуска - 1: постоянный, 2: временный
//
Функция ПолучитьОсновныеКадровыеДанныеПоНомеруПропуска(Параметры) Экспорт 
	
	Результат = Новый Структура();
	
	Попытка
	
		Если Параметры <> Неопределено 
			И ТипЗнч(Параметры) = Тип("Соответствие") Тогда
			
			_Дата = гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(Параметры.Получить("Дата")); 
			
			_МассивПостоянныхПропусков = Новый Массив();
			_МассивВременныхПропусков = Новый Массив();
			
			_ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный));
			
			Для Каждого Стр Из Параметры.Получить("Данные") Цикл
				
				_НомерПропуска = _ОписаниеТипаЧисло.ПривестиЗначение(Стр.Получить("НомерПропуска"));
				
				Если _ОписаниеТипаЧисло.ПривестиЗначение(Стр.Получить("ТипПропуска")) = 1 Тогда
					_МассивПостоянныхПропусков.Добавить(_НомерПропуска);
				Иначе
					_МассивВременныхПропусков.Добавить(_НомерПропуска);
				КонецЕсли;
				
			КонецЦикла;
			
			_ТЗ = Новый ТаблицаЗначений();
			_ТЗ.Колонки.Добавить("НомерПропуска", _ОписаниеТипаЧисло);
			_ТЗ.Колонки.Добавить("ТипПропуска", _ОписаниеТипаЧисло);
			_ТЗ.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.гхб_ФизическиеЛица"));
			_ТЗ.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.гхб_ДолжностиОрганизацийБазХолдинга"));
			_ТЗ.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.гхб_ОрганизацииБазХолдинга"));
			
			// Запрос на временные пропуска
			Если НЕ (_МассивВременныхПропусков.Количество() = 0) Тогда
				ЗапросВременные = Новый Запрос();
				ЗапросВременные.Текст = "ВЫБРАТЬ
				                        |	гхб_ИсторияВыдачиВременныхПропусковСрезПоследних.НомерПропуска КАК НомерПропуска,
				                        |	гхб_ИсторияВыдачиВременныхПропусковСрезПоследних.Сотрудник КАК Сотрудник
				                        |ИЗ
				                        |	РегистрСведений.гхб_ИсторияВыдачиВременныхПропусков.СрезПоследних(&Период, НомерПропуска В (&НомераВременныхПропусков)) КАК гхб_ИсторияВыдачиВременныхПропусковСрезПоследних
				                        |ГДЕ
				                        |	гхб_ИсторияВыдачиВременныхПропусковСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.гхб_ВидИзмененияСостоянияВременногоПропуска.Выдача)";
				
				ЗапросВременные.УстановитьПараметр("Период", _Дата);
				ЗапросВременные.УстановитьПараметр("НомераВременныхПропусков", _МассивВременныхПропусков);
				
				ВыборкаВременные = ЗапросВременные.Выполнить().Выбрать();
				
				Пока ВыборкаВременные.Следующий() Цикл
					НС = _ТЗ.Добавить();
					НС.НомерПропуска = ВыборкаВременные.НомерПропуска;
					НС.ТипПропуска = 2;
					НС.Сотрудник = ВыборкаВременные.Сотрудник;
				КонецЦикла;
			КонецЕсли;
			
			// Запрос на постоянные пропуска
			Если НЕ (_МассивПостоянныхПропусков.Количество() = 0) Тогда
				ЗапросПостоянные = Новый Запрос();
				ЗапросПостоянные.Текст = "ВЫБРАТЬ
				                         |	гхб_ИсторияВыдачиПостоянныхПропусковСрезПоследних.НомерПропуска КАК НомерПропуска,
				                         |	гхб_ИсторияВыдачиПостоянныхПропусковСрезПоследних.Сотрудник КАК Сотрудник
				                         |ИЗ
				                         |	РегистрСведений.гхб_ИсторияВыдачиПостоянныхПропусков.СрезПоследних(&Период, ) КАК гхб_ИсторияВыдачиПостоянныхПропусковСрезПоследних
				                         |ГДЕ
				                         |	гхб_ИсторияВыдачиПостоянныхПропусковСрезПоследних.НомерПропуска В(&НомераПостоянныхПропусков)";
				
				ЗапросПостоянные.УстановитьПараметр("Период", _Дата);
				ЗапросПостоянные.УстановитьПараметр("НомераПостоянныхПропусков", _МассивПостоянныхПропусков);
				
				ВыборкаПостоянные = ЗапросПостоянные.Выполнить().Выбрать();
				
				Пока ВыборкаПостоянные.Следующий() Цикл
					НС = _ТЗ.Добавить();
					НС.НомерПропуска = ВыборкаПостоянные.НомерПропуска;
					НС.ТипПропуска = 1;
					НС.Сотрудник = ВыборкаПостоянные.Сотрудник;
				КонецЦикла;
			КонецЕсли;
			
			_ТЗ.Индексы.Добавить("Сотрудник");
			
			// Запрос на кадровые данные по ФЛ
			_КопияТЗ = _ТЗ.Скопировать(, "Сотрудник");
			_КопияТЗ.Свернуть("Сотрудник");
			
			ЗапросКадры = Новый Запрос();
			ЗапросКадры.Текст = "ВЫБРАТЬ
			                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация КАК Организация,
			                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность КАК Должность,
			                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
			                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник.ФизЛицоБазыХолдинга.ФизЛицоТекущейБазы КАК Сотрудник
			                    |ИЗ
			                    |	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
			                    |ГДЕ
			                    |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
			                    |	И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник.ВидЗанятости В(&ВидЗанятости)
			                    |	И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник.ФизЛицоБазыХолдинга.ФизЛицоТекущейБазы В(&ФизЛицоТекущейБазы)";
			
			_СписокВидовЗанятости = Новый СписокЗначений();
			_СписокВидовЗанятости.Добавить(Перечисления.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
			_СписокВидовЗанятости.Добавить(Перечисления.гхб_ВидыЗанятостиВОрганизации.Совместительство);

			ЗапросКадры.УстановитьПараметр("ВидЗанятости", _СписокВидовЗанятости);
			ЗапросКадры.УстановитьПараметр("ФизЛицоТекущейБазы", _КопияТЗ.ВыгрузитьКолонку("Сотрудник"));
			
			РезКадры = ЗапросКадры.Выполнить().Выгрузить();
			
			// Формируем ответ
			_Данные = Новый Массив();
			
			Для Каждого Стр Из РезКадры Цикл
				_НайденныеСтроки = _ТЗ.НайтиСтроки(Новый Структура("Сотрудник", Стр.Сотрудник));
				
				Для Каждого _Строка Из _НайденныеСтроки Цикл
					_Данные.Добавить(Новый Структура("НомерПропуска, ТипПропуска, Сотрудник, Должность, Подразделение, Организация", 
						_Строка.НомерПропуска, _Строка.ТипПропуска, СокрЛП(_Строка.Сотрудник), СокрЛП(Стр.Должность), 
						СокрЛП(Стр.Подразделение), СокрЛП(Стр.Организация)));
				КонецЦикла;				
			КонецЦикла;
			
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, _Данные));
			
		Иначе
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, 
				"Неправильный формат переданных параметров"));
		КонецЕсли;
		
	Исключение
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПропусками

Функция ВернутьИнформациюСотрудникаПоНомеруТелефона(Параметры) Экспорт 
	
	Результат = Новый Структура();
	
	Если Параметры <> Неопределено 
		И ТипЗнч(Параметры) = Тип("Соответствие")
		И Параметры.Получить("НомерТелефона") <> Неопределено Тогда
		
		_ФЛ = гхб_ВзаимодействияСервер.ВернутьФизЛицоПоНомеруТелефона(Параметры.Получить("НомерТелефона"));
		
		Если ЗначениеЗаполнено(_ФЛ) Тогда
			
			// ФИО, ФИО рус, ФИО англ, логин, домен, почта
			_Данные = Новый Структура("ФИО, ФИОРус, ФИОАнгл, Логин, Домен, Почта", "", "", "", "", "", "");
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	гхб_ФизическиеЛицаБазХолдинга.Наименование КАК Наименование,
			               |	гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя КАК ДоменноеИмя,
			               |	гхб_ФизическиеЛицаБазХолдинга.ФИОРусское КАК ФИОРусское,
			               |	гхб_ФизическиеЛицаБазХолдинга.ФИОАнглийское КАК ФИОАнглийское,
			               |	ЕСТЬNULL(гхб_КонтактнаяИнформацияБазХолдинга.Представление, """") КАК Почта
			               |ИЗ
			               |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
			               |		ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_КонтактнаяИнформацияБазХолдинга.Объект
			               |			И гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			               |			И гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя)
			               |ГДЕ
			               |	гхб_ФизическиеЛицаБазХолдинга.Ссылка В(&ФЛ)";
			
			Запрос.УстановитьПараметр("ФЛ", _ФЛ);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Выборка.Следующий();				
			
			_Данные.ФИО = Выборка.Наименование;
			_Данные.ФИОРус = Выборка.ФИОРусское;
			_Данные.ФИОАнгл = Выборка.ФИОАнглийское;
			
			Если ЗначениеЗаполнено(Выборка.ДоменноеИмя) Тогда
				_СтруктураДомен = гхб_ОбщегоНазначенияСервер.РазобратьДоменноеИмяНаСоставляющие(Выборка.ДоменноеИмя);

				_Данные.Логин = _СтруктураДомен.Логин;
				_Данные.Домен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_СтруктураДомен.Домен, "КраткоеНаименование");
			КонецЕсли;	
			
			_Данные.Почта = Выборка.Почта;
			
			Если гхб_ОбщегоНазначенияКлиентСервер.ЕстьНезаполненныеДанныеВСтруктуре(_Данные) Тогда
					
				Запрос.УстановитьПараметр("ФЛ", 
					гхб_ВзаимодействияСервер.ВернутьФизЛицБазХолдингаДляСотрудника(
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_ФЛ, "ФизЛицоТекущейБазы")));
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(_Данные.ФИОРус) И ЗначениеЗаполнено(Выборка.ФИОРусское) Тогда
						_Данные.ФИОРус = Выборка.ФИОРусское;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(_Данные.ФИОАнгл) И ЗначениеЗаполнено(Выборка.ФИОАнглийское) Тогда
						_Данные.ФИОАнгл = Выборка.ФИОАнглийское;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(_Данные.Домен) И ЗначениеЗаполнено(Выборка.ДоменноеИмя) Тогда
						_СтруктураДомен = гхб_ОбщегоНазначенияСервер.РазобратьДоменноеИмяНаСоставляющие(Выборка.ДоменноеИмя);

						_Данные.Логин = _СтруктураДомен.Логин;
						_Данные.Домен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_СтруктураДомен.Домен, "КраткоеНаименование");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(_Данные.Почта) И ЗначениеЗаполнено(Выборка.Почта) Тогда
						_Данные.Почта = Выборка.Почта;
					КонецЕсли;
					
					Если НЕ гхб_ОбщегоНазначенияКлиентСервер.ЕстьНезаполненныеДанныеВСтруктуре(_Данные) Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Истина, _Данные));
				
		Иначе 
			Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Сотрудник не найден"));
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("result", Новый Структура("УспешноеВыполнение, Данные", Ложь, "Неправильный формат запроса"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
