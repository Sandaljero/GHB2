
Функция СформироватьАдресПоТелефону(лТелефон)
	лАдрес = "";
	
	Если (Лев(СокрЛП(лТелефон),4) = "8067") Тогда
		лАдрес = "3" + СокрЛП(лТелефон) + "@sms.kyivstar.net";
	ИначеЕсли (Лев(СокрЛП(лТелефон),4) = "8097") ИЛИ (Лев(СокрЛП(лТелефон), 4) = "8096") ИЛИ (Лев(СокрЛП(лТелефон), 4) = "8098") Тогда
		лАдрес = "3" + СокрЛП(лТелефон) + "@2sms.kyivstar.net";
	ИначеЕсли ((Лев(СокрЛП(лТелефон),4) = "8050") ИЛИ (Лев(СокрЛП(лТелефон),4) = "8095")) Тогда
  		лАдрес = СокрЛП(лТелефон) + "@partner.mts.com.ua";
	ИначеЕсли ((Лев(СокрЛП(лТелефон),4) = "8066") ИЛИ (Лев(СокрЛП(лТелефон),4) = "8099")) Тогда
		лАдрес = СокрЛП(лТелефон) + "@partner.jeans.net.ua";
	ИначеЕсли (Лев(СокрЛП(лТелефон), 4) = "8068") Тогда
		лАдрес = СокрЛП(лТелефон) + "@sms.beeline.ua";
	ИначеЕсли (Лев(СокрЛП(лТелефон),4) = "8063") Тогда
		лАдрес = "3" + СокрЛП(лТелефон) + "@life.com.ua";
	ИначеЕсли (Лев(СокрЛП(лТелефон),4) = "8039") Тогда
		лАдрес = "+3" + СокрЛП(лТелефон) + "@sms.gt.kiev.ua";
	КонецЕсли;
	
	Возврат лАдрес;
КонецФункции

//Функция КонвертироватьИЧиститьТекст(пСтр) Экспорт
//	лСтр = СокрЛП(пСтр);
//	Рез = "";
//	Длина = СтрДлина(лСтр);
//	
//	Для Ном = 1 По Длина Цикл
//		КодСимвола = КодСимвола(лСтр,Ном);
//		
//		Если ПроверитьИнтервал(КодСимвола,65,90) Тогда
//			Рез = Рез + Символ(КодСимвола);
//		ИначеЕсли ПроверитьИнтервал(КодСимвола,97,122) Тогда
//			Рез = Рез + Символ(КодСимвола);
//		ИначеЕсли ПроверитьИнтервал(КодСимвола,48,58) Тогда
//			Рез = Рез + Символ(КодСимвола);
//		ИначеЕсли ПроверитьИнтервал(КодСимвола,1040,1071) Тогда
//			Рез = Рез + РаботаСоСтроками.ВернутьТранслит(Символ(КодСимвола));
//		ИначеЕсли ПроверитьИнтервал(КодСимвола,1072,1103) Тогда
//			Рез = Рез + РаботаСоСтроками.ВернутьТранслит(Символ(КодСимвола));
//		ИначеЕсли ПроверитьИнтервал(КодСимвола,40,46) Тогда
//			Рез = Рез + Символ(КодСимвола);
//		ИначеЕсли КодСимвола = 32 Тогда
//			Рез = Рез + Символ(КодСимвола);
//		Конецесли;
//	КонецЦикла;
//	
//	Возврат Рез;
//КонецФункции

Функция ПроверитьИнтервал(лПарам,лНиз,лВерх)
	Если (лПарам >= лНиз) И (лПарам <= лВерх) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

////Отправка СМС c использованием скрипта Перл для Киев Стара
Функция ОтправитьКиевстаруЧерезПерл(НомерТелефона,Сообщение,ФайлШаблона= "c:\perl\tsSh.pl",ФайлСообщения="c:\perl\t.pl", КаталогПерл="c:\perl\bin\perl.exe ") Экспорт
	ФШ = Новый Файл(ФайлШаблона);
	ФС = Новый Файл(ФайлСообщения);

	Если ФШ.Существует() тогда
		ЧтениеТ = Новый ЧтениеТекста(ФайлШаблона, КодировкаТекста.OEM);
	Иначе	
		Сообщить("Файл шаблона " + ФайлШаблона + "не обнаружен!");
		Возврат Ложь;
	КонецЕсли;

	ЗаписьТ = Новый ЗаписьТекста(ФайлСообщения, КодировкаТекста.OEM);

	Стр = ЧтениеТ.ПрочитатьСтроку();
	ЗаписьТ.ЗаписатьСтроку(Стр);
	
	Пока (Стр <> Неопределено) Цикл
		Стр = ЧтениеТ.ПрочитатьСтроку();
		Стр1 = СтрЗаменить(Стр, "&tel", НомерТелефона);
		Стр2 = СтрЗаменить(Стр1, "&sms", Сообщение);
		ЗаписьТ.ЗаписатьСтроку(Стр2);
	КонецЦикла;
	
	ЗаписьТ.Закрыть();
	//КомандаСистемы(КаталогПерл + ФайлСообщения);
	
	Если ФС.Существует() тогда
		УдалитьФайлы(ФайлСообщения);
	КонецЕсли;

	Возврат Истина;
КонецФункции	

Функция ОтправитьСМСИспользуяCPA2(_ТелефонСМС, _ТекстСМС, _ВнешнийИсточник) Экспорт
	_ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
	
	Запись = Новый ЗаписьXML; 
	Запись.ОткрытьФайл(_ИмяФайлаXML); 
	//Запись.ЗаписатьОбъявлениеXML(); 
	
	//<message mid="232" paid="2000">
	//  <sn>10951</sn>
	//  <sin>38097ХХХХХХХ</sin>
	//  <body content-type="text/plain">Текст сообщения</body>
	//</message>	
	
	Запись.ЗаписатьНачалоЭлемента("message");
	Запись.ЗаписатьАтрибут("mid", "232");
	Запись.ЗаписатьАтрибут("paid", "2000");
	
	Запись.ЗаписатьНачалоЭлемента("sn");
	Запись.ЗаписатьТекст("10951"); 
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("sin");
	Запись.ЗаписатьТекст(СокрЛП(_ТелефонСМС)); 
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("body");
	Запись.ЗаписатьАтрибут("content-type", "text/plain");
	Запись.ЗаписатьТекст(СокрЛП(_ТекстСМС)); 
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть();	
	
	DOC = Новый COMОбъект("MSXML2.DOMDocument");
    DOC.load(_ИмяФайлаXML);
	
	Если DOC.parseError.errorCode <> 0 Тогда
        Возврат "Ошибка разбора XML результата: " + DOC.parseError.reason;
    КонецЕсли;
	
    xmlHttp = Новый COMОбъект("MSXML2.xmlHttp");
	
	//xmlHttp.OPEN("POST", "http://sdp1.cpa.net.ua:8080/cpa2/receiver", Ложь, "user", "password");
	xmlHttp.OPEN("POST", СокрЛП(_ВнешнийИсточник.Дополнительно), Ложь, СокрЛП(_ВнешнийИсточник.Пользователь), СокрЛП(_ВнешнийИсточник.Пароль));
    // False - отвечает за то, что запррос асинхронный и ожидаем ответа
 
    xmlHttp.SEND(DOC);
	_ЗнчВозврата = _ТелефонСМС + ": " + xmlHttp.statusText;
	
	Попытка
		УдалитьФайлы(_ИмяФайлаXML);
	Исключение
		//Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание); 
	КонецПопытки;
	
	Возврат _ЗнчВозврата;
КонецФункции

Функция но_ПолучитьНомерМобильногоТелефона(тФЛ) Экспорт
	тСтрока = "";
	//тЗапрос = Новый Запрос("ВЫБРАТЬ
	//					   |	СоответствиеТелефоновФизЛицамСрезПоследних.Телефон.НомерТелефона КАК НомерТелефона,
	//					   |	СоответствиеТелефоновФизЛицамСрезПоследних.ТипУстройства
	//					   |ИЗ
	//					   |	РегистрСведений.СоответствиеТелефоновФизЛицам.СрезПоследних КАК СоответствиеТелефоновФизЛицамСрезПоследних
	//					   |ГДЕ
	//					   |	СоответствиеТелефоновФизЛицамСрезПоследних.ФизЛицо = &тФЛ
	//					   |	И СоответствиеТелефоновФизЛицамСрезПоследних.ТипУстройства = &ТипУстройства");
	//
	//тЗапрос.УстановитьПараметр("тФЛ", тФЛ);
	//тЗапрос.УстановитьПараметр("ТипУстройства", Перечисления.ТипыУстройствМобильнойСвязи.Телефон);
	//тВыборка = тЗапрос.Выполнить().Выбрать();
	//
	//Если тВыборка.Следующий() Тогда
	//	тСтрока = СокрЛП(тВыборка.НомерТелефона);
	//	тТипУстройства = тВыборка.ТипУстройства;
	//КонецЕсли;
	//
	//Если ПустоеЗначение(тСтрока) ИЛИ тТипУстройства = перечисления.ТипыУстройствМобильнойСвязи.МТСКоннект Тогда	
	//	тЗапрос = Новый Запрос("ВЫБРАТЬ
	//						   |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК НомерТелефона
	//						   |ИЗ
	//						   |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//						   |ГДЕ
	//						   |	КонтактнаяИнформация.Вид = &тВид
	//						   |	И КонтактнаяИнформация.Объект = &тФЛ
	//						   |	И КонтактнаяИнформация.Тип = &Тип");
	//	
	//	тЗапрос.УстановитьПараметр("тФЛ", тФЛ);
	//	тЗапрос.УстановитьПараметр("тВид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00027"));
	//	тЗапрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	//	
	//	тВыборка = тЗапрос.Выполнить().Выбрать();
	//	
	//	Если тВыборка.Следующий() Тогда
	//		тСтрока = СокрЛП(тВыборка.НомерТелефона);
	//	КонецЕсли;
	//	
	//	Если ПустоеЗначение(тСтрока) Тогда
	//		тЗапрос = Новый Запрос("ВЫБРАТЬ
	//				|	НастройкиПользователей.Значение КАК НомерТелефона
	//				|ИЗ
	//				|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	//				|ГДЕ
	//				|	НастройкиПользователей.Пользователь.ур_ФизЛицо = &тФЛ
	//				|	И НастройкиПользователей.Настройка = &тНастройка");
	//		
	//		тЗапрос.УстановитьПараметр("тФЛ", тФЛ);
	//		тЗапрос.УстановитьПараметр("тНастройка", ПланыВидовХарактеристик.НастройкиПользователей.ТелефонИнформированияДляСМС);
	//		
	//		тВыборка = тЗапрос.Выполнить().Выбрать();
	//		
	//		Если тВыборка.Следующий() Тогда
	//			тСтрока = СокрЛП(тВыборка.НомерТелефона);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Лев(тСтрока, 4) = "CDMA" Тогда	
	//	тСтрока = "";
	//ИначеЕсли НЕ ПустаяСтрока(тСтрока) Тогда
	//	тСтрока = СтрЗаменить(тСтрока, " ", "");	
	//	тСтрока = СтрЗаменить(тСтрока, "-", "");
	//	
	//	Если НЕ (Лев(тСтрока, 2) = "80") Тогда
	//	   	тСтрока = "80" + Прав(тСтрока, 9);
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат тСтрока;
КонецФункции

Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Если НЕ (Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита) = Неопределено) Тогда
		ОбщРек = Метаданные.ОбщиеРеквизиты[ИмяРеквизита].Состав.Найти(МетаданныеДокумента);
		
		Если (ОбщРек.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
КонецФункции

Функция ПолучитьМассивПользов(пПолучатель) Экспорт 
	лПолучатели = Новый Массив();
	
	Если (ТипЗнч(пПолучатель) = Тип("СправочникСсылка.Пользователи")) Тогда
		лПолучатели.Добавить(пПолучатель);
	ИначеЕсли (ТипЗнч(пПолучатель) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ур_ФизЛицо = &ФизЛицо");
				
		Запрос.УстановитьПараметр("ФизЛицо",пПолучатель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			лПолучатели.Добавить(Выборка.Ссылка);
		КонецЕсли;
	ИначеЕсли (ТипЗнч(пПолучатель) = Тип("СправочникСсылка.но_РолиДокументооборота")) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь
			                      |ИЗ
			                      |	Справочник.но_РолиДокументооборота.УчастникиСогласования КАК но_РолиДокументооборотаУчастникиСогласования
			                      |ГДЕ
			                      |	но_РолиДокументооборотаУчастникиСогласования.Ссылка = &РольДокументооборота
			                      |	И но_РолиДокументооборотаУчастникиСогласования.Дата1 <= &ТекущаяДата
			                      |	И (но_РолиДокументооборотаУчастникиСогласования.Дата2 >= &ТекущаяДата
			                      |	ИЛИ но_РолиДокументооборотаУчастникиСогласования.Дата2 = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	но_РолиДокументооборотаУчастникиСогласования.Пользователь");
				
		Запрос.УстановитьПараметр("РольДокументооборота", пПолучатель);
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере()));
		лПолучатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Иначе
		Возврат лПолучатели;
	Конецесли;
	
	Ном = 0;
	
	Пока Ном < лПолучатели.Количество() Цикл
		Если НЕ ЗначениеЗаполнено(лПолучатели[Ном]) Тогда
			лПолучатели.Удалить(Ном);
		Иначе
			Ном = Ном + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат лПолучатели;
КонецФункции

Функция ВернутьСотрудниковПоПодразделениюИДолжности(_Подразделение, _Должность) Экспорт 
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначенияРаботниковСрезПоследних.Ссылка КАК Работник
	               |ИЗ
	               |	Справочник.ФизическиеЛица.Назначения КАК НазначенияРаботниковСрезПоследних
	               |ГДЕ
	               |	НазначенияРаботниковСрезПоследних.Ссылка.Неактуален = ДАТАВРЕМЯ(1, 1, 1)
	               |	И НазначенияРаботниковСрезПоследних.Подразделение В ИЕРАРХИИ(&Подразделение)
	               |	И НазначенияРаботниковСрезПоследних.Должность В ИЕРАРХИИ(&Должность)";
	
	Запрос.УстановитьПараметр("Подразделение", _Подразделение); 
	Запрос.УстановитьПараметр("Должность", _Должность);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Рез.Сортировать("Работник Возр");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Работник");
КонецФункции

Функция ВернутьПодразделениеИДолжность(ОбъектАдресаци) Экспорт
	лПользователь = Справочники.Пользователи.ПустаяСсылка();
	лФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если (ТипЗнч(ОбъектАдресаци) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ур_ФизЛицо = &ФизЛицо
				|
				|УПОРЯДОЧИТЬ ПО
				|	Пользователи.ПометкаУдаления");
				
		Запрос.УстановитьПараметр("ФизЛицо",ОбъектАдресаци);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			лПользователь = Выборка.Ссылка;
		КонецЕсли;
		
		лФизЛицо = ОбъектАдресаци;
	ИначеЕсли (ТипЗнч(ОбъектАдресаци) = Тип("СправочникСсылка.Пользователи")) Тогда
		лПользователь = ОбъектАдресаци;
		лФизЛицо = лПользователь.ур_ФизЛицо;
	КонецЕсли;
	
	Рез = Новый Структура();
	Рез.Вставить("Подразделение",Справочники.ур_ПодразделенияОрганизации.ПустаяСсылка());
	Рез.Вставить("Должность",Справочники.ур_ДолжностиОрганизации.ПустаяСсылка());
	
	Если НЕ лФизЛицо.Пустая() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
				|	НазначенияРаботниковСрезПоследних.Подразделение КАК Подразделение,
				|	НазначенияРаботниковСрезПоследних.Должность КАК Должность
				|ИЗ
				|	Справочник.ФизическиеЛица.Назначения КАК НазначенияРаботниковСрезПоследних
				|ГДЕ
				|	НазначенияРаботниковСрезПоследних.Ссылка = &ТекущийРаботник");
				
		Запрос.УстановитьПараметр("ТекущийРаботник", лФизЛицо);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Если (ТЗ.Количество() > 0) Тогда 
			СписокПодразделений = Новый СписокЗначений();
			СписокДолжностей = Новый СписокЗначений();
			СписокПодразделений.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Подразделение"));
			СписокДолжностей.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Должность"));	
			Рез = Новый Структура();
			Рез.Вставить("Подразделение",СписокПодразделений.ВыгрузитьЗначения());
			Рез.Вставить("Должность",СписокДолжностей.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ЗаписатьЗаписьВИсторииСогласования(_Документ, _Стадия) Экспорт 
	Запись = РегистрыСведений.ИсторияСогласованияДокументов.СоздатьМенеджерЗаписи();		
	Запись.Период = ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере();
	Запись.Документ = _Документ;
	Запись.Стадия = _Стадия;
	Запись.Записать();
КонецПроцедуры

Процедура УдалитьЗаписьВИсторииСогласования(_Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ИсторияСогласованияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(_Документ);
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПрочитатьЗаписьВИсторииСогласования(_Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ИсторияСогласованияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(_Документ);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НаборЗаписей.Получить(0).Стадия;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьДокументПроведениеПриСогласовании(_Документ) Экспорт 
	Запись = РегистрыСведений.ПроведениеДокументаПриСогласовании.СоздатьМенеджерЗаписи();		
	Запись.Период = ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере();
	Запись.Документ = _Документ;
	Запись.Записать();
КонецПроцедуры

Процедура УдалитьДокументПроведениеПриСогласовании(_Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ПроведениеДокументаПриСогласовании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(_Документ);
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПрочитатьДокументПроведениеПриСогласовании(_Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ПроведениеДокументаПриСогласовании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(_Документ);
	НаборЗаписей.Прочитать();
	
	Возврат НЕ (НаборЗаписей.Количество() = 0);
КонецФункции

Функция ВернутьПолныйСписокРолей(ОбъектАдресаци,ВместеСДолжностьюПодразделением = Истина) Экспорт
	лПользователь = Справочники.Пользователи.ПустаяСсылка();
	лФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если (ТипЗнч(ОбъектАдресаци) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	Пользователи.Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ур_ФизЛицо = &ФизЛицо
				|
				|УПОРЯДОЧИТЬ ПО
				|	Пользователи.ПометкаУдаления");
				
		Запрос.УстановитьПараметр("ФизЛицо",ОбъектАдресаци);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			лПользователь = Выборка.Ссылка;
		КонецЕсли;
		
		лФизЛицо = ОбъектАдресаци;
	ИначеЕсли (ТипЗнч(ОбъектАдресаци) = Тип("СправочникСсылка.Пользователи")) Тогда
		лПользователь = ОбъектАдресаци;
		лФизЛицо = лПользователь.ур_ФизЛицо;
	КонецЕсли;
	
	ПолныйСписокМоихРолей = Новый СписокЗначений();
	
	Если НЕ ПустаяСтрока(Строка(лФизЛицо)) Тогда
		ПолныйСписокМоихРолей.Добавить(лФизЛицо);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка(лПользователь)) Тогда
		ПолныйСписокМоихРолей.Добавить(лПользователь);
	КонецЕсли;
	
	Если (ВместеСДолжностьюПодразделением) И (НЕ лФизЛицо.Пустая()) ТОгда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	НазначенияРаботниковСрезПоследних.Подразделение КАК Подразделение,
		                      |	НазначенияРаботниковСрезПоследних.Должность КАК Должность
		                      |ИЗ
		                      |	Справочник.ФизическиеЛица.Назначения КАК НазначенияРаботниковСрезПоследних
		                      |ГДЕ
		                      |	НазначенияРаботниковСрезПоследних.Ссылка = &ТекущийРаботник");
				
		Запрос.УстановитьПараметр("ТекущийРаботник", лФизЛицо);
		
		оТекущийДепартамент = Новый СписокЗначений();
		оТекущийДолжность = Новый СписокЗначений();
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		оТекущийДепартамент.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Подразделение"));
		оТекущийДолжность.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Должность"));
		
		Для Каждого СтрокаСписка Из оТекущийДепартамент Цикл
			Если НЕ ПустаяСтрока(Строка(СтрокаСписка.Значение)) Тогда
				ПолныйСписокМоихРолей.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаСписка Из оТекущийДолжность Цикл
			Если НЕ ПустаяСтрока(Строка(СтрокаСписка.Значение)) Тогда
				ПолныйСписокМоихРолей.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	но_РолиДокументооборотаУчастникиСогласования.Ссылка КАК РольДокументооборота
	                      |ИЗ
	                      |	Справочник.но_РолиДокументооборота.УчастникиСогласования КАК но_РолиДокументооборотаУчастникиСогласования
	                      |ГДЕ
	                      |	(но_РолиДокументооборотаУчастникиСогласования.Пользователь = &Пользователь
						  |	ИЛИ но_РолиДокументооборотаУчастникиСогласования.Пользователь.ур_ФизЛицо = &ФизЛицо)
	                      |	И но_РолиДокументооборотаУчастникиСогласования.Дата1 <= &ТекДата
	                      |	И (но_РолиДокументооборотаУчастникиСогласования.Дата2 >= &ТекДата
	                      |	ИЛИ но_РолиДокументооборотаУчастникиСогласования.Дата2 = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))");
	
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере()));
	
	Если НЕ лПользователь.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь",лПользователь);
	Иначе
		Запрос.УстановитьПараметр("Пользователь",Неопределено);
	КонецЕсли;
	
	Если НЕ лФизЛицо.Пустая() Тогда
		Запрос.УстановитьПараметр("ФизЛицо",лФизЛицо);
	Иначе
		Запрос.УстановитьПараметр("ФизЛицо",Неопределено);
	КонецЕсли;
	
	оТекущиеРолиДокументоОборота = Новый СписокЗначений();
	оТекущиеРолиДокументоОборота.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольДокументооборота"));
	
	Для Каждого СтрокаСписка Из оТекущиеРолиДокументоОборота Цикл
		Если НЕ ПустаяСтрока(Строка(СтрокаСписка.Значение)) Тогда
			ПолныйСписокМоихРолей.Добавить(СтрокаСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолныйСписокМоихРолей;
КОнецФункции

Функция ПолучитьТекущийБизнесПроцессДляОбъекта(_Объект) Экспорт
	Рез = БизнесПроцессы.Подписание.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	Подписание.Ссылка
			|ИЗ
			|	БизнесПроцесс.Подписание КАК Подписание
			|ГДЕ
			|	Подписание.ПодписываемыйОбъект = &ПодписываемыйОбъект
			|	И (Подписание.Стартован = ИСТИНА
			|			ИЛИ Подписание.Состояние = ЗНАЧЕНИЕ(Перечисление.но_СостояниеПодписи.Отозван)
			|			ИЛИ Подписание.Состояние = ЗНАЧЕНИЕ(Перечисление.но_СостояниеПодписи.Отклонен)
			|			ИЛИ Подписание.Состояние = ЗНАЧЕНИЕ(Перечисление.но_СостояниеПодписи.Подписан))
			|	И Подписание.Состояние <> ЗНАЧЕНИЕ(Перечисление.но_СостояниеПодписи.Заблокирован)
			|	И Подписание.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Подписание.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("ПодписываемыйОбъект", _Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Рез = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ПередЗаписьюЗаявкиДоступа(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли; 	
	
	ИнициированиеОбщейЗаявки = Источник.ДополнительныеСвойства.Свойство("ИнициированиеОбщейЗаявки") 
		И Источник.ДополнительныеСвойства.ИнициированиеОбщейЗаявки;
		
	Если ИнициированиеОбщейЗаявки Тогда
		Возврат;	
	КонецЕсли; 	
		
	НастройкиПоЗаявке = Документы.но_ОбщаяЗаявкаНаДоступ.ПолучитьНастройкиПоЗаявке(Источник);
	
	Если ПустаяСтрока(НастройкиПоЗаявке.ИмяРеквизитаЗаявки) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	но_ОбщаяЗаявкаНаДоступ.Ссылка
	|ИЗ
	|	Документ.но_ОбщаяЗаявкаНаДоступ КАК но_ОбщаяЗаявкаНаДоступ
	|ГДЕ
	|	но_ОбщаяЗаявкаНаДоступ." + НастройкиПоЗаявке.ИмяРеквизитаЗаявки + " = &Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Проверям сначала соответствие заявки общей заявке
		Источник.ПроверитьВозможностьИзменения(Выборка.Ссылка, Отказ);		
	
	КонецЦикла; 
		
КонецПроцедуры
 