
#Область РассылкаСМС

Функция ОтправитьСМСНаОдинНомер(Знач _Телефон, _Тема, Знач _ТекстСМС, _Транслитерировать = Истина, _Подключение = Неопределено, _СпециальныйТипОтправки = Ложь, _ИмяОтправки = "SLM") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		_Текст = НормализоватьТекстСМС(_ТекстСМС);
		_ЗнчВозврата = "";
		
		Если НЕ ПустаяСтрока(_Телефон) Тогда
			
			Если _Транслитерировать Тогда
				_Текст = гхб_ОбщегоНазначенияКлиентСервер.ПерекодироватьПоПравилуТранслитерации(_Текст);
			КонецЕсли;
			
			_Массив = Новый Массив();
			
			Если СтрДлина(_Текст) < 160 ИЛИ _СпециальныйТипОтправки Тогда
				_Массив.Добавить(_Текст);
			Иначе 
				
				_ТмпСтр = _Текст;
				Пока СтрДлина(_ТмпСтр) > 0 Цикл
					// 154 - Длина сообщения + символы скобок "(" и ")", и два числа по две цифры
					
					Если СтрДлина(_ТмпСтр) <= 154 Тогда
						
						_Массив.Добавить(_ТмпСтр);
						_ТмпСтр = "";
						
					Иначе
						
						_Массив.Добавить(Лев(_ТмпСтр, 154));
						_ТмпСтр = Прав(_ТмпСтр, СтрДлина(_ТмпСтр) - 154);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			_Тел = "";
			
			Для ф = 1 По СтрДлина(_Телефон) Цикл
				
				_Символ = Сред(_Телефон, ф, 1);
				_КодСимвола = КодСимвола(_Символ);
				
				Если _КодСимвола >= 48 И _КодСимвола <= 57 Тогда
					_Тел = _Тел + _Символ;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрДлина(_Тел) < 9 Тогда
				
				ЗаписьЖурналаРегистрации("СМС.ОшибкаОтправки", УровеньЖурналаРегистрации.Примечание,,, "Не отправлено:" + _Тел);
				Возврат "Не отправлено:" + _Тел;
				
			КонецЕсли;			
			
			_Телефон = Прав(_Тел, 9);
			
			_Кол = Строка(_Массив.Количество());
			ф = 1;
			
			Для Каждого Стр Из _Массив Цикл
				Если НЕ (_Массив.Количество() = 1) Тогда
					Стр = Строка(ф) + "/" + _Кол + " " + Стр;
				КонецЕсли;
				
				ф = ф + 1;
				
				Если (Лев(СокрЛП(_Телефон),2) = "67") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "97") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "94") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "98") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "96") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "68") ИЛИ
					(Лев(СокрЛП(_Телефон),2) = "63") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "93") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "39") ИЛИ
					(Лев(СокрЛП(_Телефон),2) = "50") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "95") ИЛИ
					(Лев(СокрЛП(_Телефон),2) = "66") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "73") ИЛИ 
					(Лев(СокрЛП(_Телефон),2) = "99")Тогда
					
					АдресСМС = "380" + СокрЛП(_Телефон);
					
					//++ a.romanchuk 25.11.2020 #
					//_ЗнчВозврата = _ЗнчВозврата + АдресСМС + " - " + ОтправитьСМСИспользуяХТМЛ_РПС(АдресСМС, Стр, _ИмяОтправки) + Символы.ПС;
					
					_РезультатОтправки = ОтправитьСМС_JSON_GMS_Worldwide(АдресСМС, Стр, _ИмяОтправки);
					
					Если _РезультатОтправки.УспешноОтправлено Тогда
						_ТекстОтвета = "ACCEPT";
					Иначе 
						_ТекстОтвета = _РезультатОтправки.Результат;
					КонецЕсли;
					
					_ЗнчВозврата = _ЗнчВозврата + АдресСМС + " - " + _ТекстОтвета + Символы.ПС;
					//-- a.romanchuk 25.11.2020 #
					
				Иначе
					
					ОбщегоНазначения.СообщитьПользователю("Оператор не опознан для номера " + _Телефон);
					Возврат "error";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("СМС.ОшибкаОтправки", УровеньЖурналаРегистрации.Примечание,,, "Не отправлено:" + _Телефон + " (" + ОписаниеОшибки() + ")");
		ОбщегоНазначения.СообщитьПользователю("СМС. Не отправлено:" + _Телефон + " (" + ОписаниеОшибки() + ")");
		Возврат "error";
		
	КонецПопытки;
	
	Возврат _ЗнчВозврата;
	
КонецФункции

//++ a.romanchuk 25.11.2020 #
Функция ОтправитьСМС_JSON_GMS_Worldwide(_ТелефонСМС, _ТекстСМС, _ИмяОтправки = "SLM") Экспорт
	
	//{
	//  "phone_number": 380961111111,
	//  "extra_id": "AD-6640-7006",
	//  "callback_url": "https://send-dr-here.com",
	//  "start_time": "2016-10-26 14:10:10+03:00",
	//  "tag": "Campaign name",
	//  "channels": [
	//    "sms"
	//  ],
	//  "channel_options": {
	//    "sms": {
	//      "text": "Text for SMS",
	//      "alpha_name": "GMSU",
	//      "ttl": 300
	//    }
	//  }
	//}

	_Структура = Новый Структура();
	_Структура.Вставить("phone_number", _ТелефонСМС);
	_Структура.Вставить("extra_id", Строка(Новый УникальныйИдентификатор()));
	//_Структура.Вставить("callback_url", "https://send-dr-here.com");
	//_Структура.Вставить("start_time", "2016-10-26 14:10:10+03:00");
	//_Структура.Вставить("tag", "Campaign name");
	
	_МассивКаналовСвязи = Новый Массив();
	_МассивКаналовСвязи.Добавить("sms");
	
	_Структура.Вставить("channels", _МассивКаналовСвязи);
	
	_СтруктураТекста = Новый Структура();
	_СтруктураТекста.Вставить("text", _ТекстСМС);
	_СтруктураТекста.Вставить("alpha_name", _ИмяОтправки);
	_СтруктураТекста.Вставить("ttl", 300);
	
	_СтруктураПараметровКаналовСвязи = Новый Структура();
	_СтруктураПараметровКаналовСвязи.Вставить("sms", _СтруктураТекста);
	
	_Структура.Вставить("channel_options", _СтруктураПараметровКаналовСвязи);
	
	_ЗаписьJSON = Новый ЗаписьJSON();
	_ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(_ЗаписьJSON, _Структура);
	
	СтрокаJSON = _ЗаписьJSON.Закрыть();
	
	СерверJsonRPC = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Справочники.гхб_ВнешниеИсточники.СерверРассылкиСМС_JSON_GMS_Worldwide, 
		"Сервер, Пользователь, Пароль, АдресРесурса");
		
	Если НЕ ЗначениеЗаполнено(СерверJsonRPC.Сервер) Тогда
		_Рез = Новый Структура("УспешноОтправлено, Результат", Ложь, "Не заполнены параметры отправки СМС");
	Иначе
	
		_ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		
		Соединение = Новый HTTPСоединение(
						СокрЛП(СерверJsonRPC.Сервер),,
						СокрЛП(СерверJsonRPC.Пользователь),
						СокрЛП(СерверJsonRPC.Пароль),
						,
						300,
						_ЗащищенноеСоединение);
						
		ЗапросHTTP = Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса = СокрЛП(СерверJsonRPC.АдресРесурса);
		ЗапросHTTP.Заголовки.Вставить("content-type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Результат = Соединение.POST(ЗапросHTTP);
		
		Если Результат.КодСостояния = 200 Тогда
			
			стрJSON = Результат.ПолучитьТелоКакСтроку();
			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(стрJSON);
			стОтвет = ПрочитатьJSON(ЧтениеJSON, Ложь);
			
			Если стОтвет.Свойство("message_id") Тогда
				_Рез = Новый Структура("УспешноОтправлено, Результат", Истина, стОтвет.message_id);
			ИначеЕсли стОтвет.Свойство("error_code") Тогда
				_Рез = Новый Структура("УспешноОтправлено, Результат", Ложь, стОтвет.error_text);
			Иначе// Это на всякий случай, если структура ответа будет переделываться.
				_Рез = Новый Структура("УспешноОтправлено, Результат", Ложь, "Неизвестная структура ответа");
			КонецЕсли;
			
		Иначе
			_Рез = Новый Структура("УспешноОтправлено, Результат", Ложь, "КодСостояния = " + Результат.КодСостояния);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Рез;
	
КонецФункции
//-- a.romanchuk 25.11.2020 #

Функция ОтправитьСМСИспользуяХТМЛ_РПС(_ТелефонСМС, _ТекстСМС, _ИмяОтправки = "SLM") Экспорт
	
	_Мас = Новый Массив();
	_Мас.Добавить(_ТелефонСМС);
	_Мас.Добавить(СокрЛП(_ТекстСМС));
	_Мас.Добавить("1С");
	_Мас.Добавить(_ИмяОтправки);
	_ВнИст = Справочники.гхб_ВнешниеИсточники.СерверРассылкиСМССообщений;
	
	Рез = xrExec(СокрЛП(_ВнИст.Сервер), СокрЛП(_ВнИст.Дополнительно), _Мас);
	
	Возврат Рез;
	
КонецФункции

Функция xrExec(URL, ИмяФункции, Параметры = Неопределено) Экспорт
	
	//Сервер = "10.111.0.62";
	//Порт = 82;
	//URL = "http://10.111.0.62:82/invent_rpc";
	
	Если НЕ ЗначениеЗаполнено(URL) Тогда 
		ВызватьИсключение "XMLRPC: URL не указан";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) и ТипЗнч(Параметры) <> Тип("Массив") Тогда 
		ВызватьИсключение "XMLRPC: Неверная передача параметров";
	КонецЕсли;
	
	ФайлСообщения = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлСообщения);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("methodCall");
	ЗаписьXML.ЗаписатьНачалоЭлемента("methodName");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(ИмяФункции));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("params");
	
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда 
		Для Каждого Параметр Из Параметры Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьНачалоЭлемента("value");
			ЗаписатьПараметр(ЗаписьXML, Параметр);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // value
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
		КонецЦикла; 
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // params
	ЗаписьXML.ЗаписатьКонецЭлемента(); // methodCall
	ЗаписьXML.Закрыть();
	
	Файл = Новый Файл(ФайлСообщения);
	ЗаголовокСообщения = "Content-Type: text/xml" + Символы.ВК + Символы.ПС + 
	"Content-length: " + Файл.Размер();
	
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	
	
	DOC = Новый COMОбъект("MSXML2.DOMDocument");
	DOC.load(ФайлСообщения);
	
	Если DOC.parseError.errorCode <> 0 Тогда
		ВызватьИсключение "Ошибка разбора XML результата: " + DOC.parseError.reason;
	КонецЕсли;
	
	xmlHttp = Новый COMОбъект("MSXML2.xmlHttp");
	
	xmlHttp.OPEN("POST", URL, Ложь);
	xmlHttp.SEND(DOC);
	
	ТекстовыйФ = Новый ТекстовыйДокумент;
	ТекстовыйФ.УстановитьТекст(xmlHttp.responseText);
	ТекстовыйФ.Записать(ФайлРезультата);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРезультата);
	
	Попытка
		Результат = РазобратьОтвет(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		ЧтениеXML.Закрыть();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УдалитьФайлы(ФайлСообщения);
	УдалитьФайлы(ФайлРезультата);
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьОтвет(ЧтениеXML)
	Результат = Неопределено;
	ЧтениеXML.Прочитать();
	ПроверитьРавенство(ЧтениеXML.Имя,"methodResponse");
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.Имя = "params" Тогда 
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"param");
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"value");
		Результат = РазобратьЗначение(ЧтениеXML);
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"value");
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"param");
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"params");
	ИначеЕсли ЧтениеXML.Имя = "fault" Тогда 
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"value");
		Результат = РазобратьЗначение(ЧтениеXML); // структура с описанием ошибки
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"value");
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"fault");
		ЧтениеXML.Прочитать();
		
		Попытка
			_Текст = "XMLRPC: Ошибка на сервере:
		                  	|	Код ошибки: " + Результат["faultCode"] + "
						  	|	Описание ошибки: " + Результат["faultString"];
		Исключение
			_Текст = "XMLRPC: Ошибка на сервере:
		                  |	Код ошибки: " + Результат["КfaultCode"] + "
						  |	Описание ошибки: " + Результат["КfaultString"];
		КонецПопытки;
		
		ВызватьИсключение _Текст;
	КонецЕсли;	
	
	ЧтениеXML.Прочитать();
	ПроверитьРавенство(ЧтениеXML.Имя,"methodResponse");
	
	Возврат Результат;
КонецФункции

Функция ПроверитьРавенство(Параметр, Значение)
	Если Параметр <> Значение Тогда 
		ВызватьИсключение "XMLRPC: Ошибка разбора ответа.
						  |	Ожидается: 	" + Значение + "
						  |	Получено:	" + Параметр;
	КонецЕсли;
					  
	Возврат Истина;
КонецФункции

Функция РазобратьЗначение(ЧтениеXML)
	Результат = Неопределено;
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.Имя = "struct" Тогда
		Результат = Новый Структура;
		Пока ЧтениеXML.Прочитать() Цикл  // <member>
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				ПроверитьРавенство(ЧтениеXML.Имя, "struct");
				Прервать;
			КонецЕсли;
			
			ПроверитьРавенство(ЧтениеXML.Имя,"member");
			ЧтениеXML.Прочитать(); // <name>
			ПроверитьРавенство(ЧтениеXML.Имя,"name");
			ЧтениеXML.Прочитать(); // ключ структуры
			ПроверитьРавенство(ЧтениеXML.ТипУзла,ТипУзлаXML.Текст);
			Ключ = "К" + ЧтениеXML.Значение;
			ЧтениеXML.Прочитать(); // </name>
			ПроверитьРавенство(ЧтениеXML.Имя,"name");
			ЧтениеXML.Прочитать(); // <value>
			ПроверитьРавенство(ЧтениеXML.Имя,"value");
			Значение = РазобратьЗначение(ЧтениеXML);
			ЧтениеXML.Прочитать(); // </value>
			ПроверитьРавенство(ЧтениеXML.Имя,"value");
			ЧтениеXML.Прочитать(); // </member>
			ПроверитьРавенство(ЧтениеXML.Имя,"member");
						
			Результат.Вставить(Ключ, Значение);
		КонецЦикла;
	ИначеЕсли ЧтениеXML.Имя = "array" Тогда 
		Результат = Новый Массив;
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"data");
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
				ПроверитьРавенство(ЧтениеXML.Имя, "data");
				Прервать;
			КонецЕсли;
			
			//ЧтениеXML.Прочитать(); // <value>
			ПроверитьРавенство(ЧтениеXML.Имя,"value");
			Значение = РазобратьЗначение(ЧтениеXML);
			ЧтениеXML.Прочитать(); // </value>
			ПроверитьРавенство(ЧтениеXML.Имя,"value");
			
			Результат.Добавить(Значение);
		КонецЦикла;
		
		ЧтениеXML.Прочитать();
		ПроверитьРавенство(ЧтениеXML.Имя,"array");
	ИначеЕсли ЧтениеXML.Имя = "string" Тогда 
		ЧтениеXML.Прочитать(); // значение строки
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Результат = XMLЗначение(Тип("Строка"), ЧтениеXML.Значение);
			ЧтениеXML.Прочитать(); // </string>
		Иначе 
			Результат = "";
		КонецЕсли;
		
		ПроверитьРавенство(ЧтениеXML.Имя,"string");
	ИначеЕсли ЧтениеXML.Имя = "double" ИЛИ ЧтениеXML.Имя = "int" ИЛИ ЧтениеXML.Имя = "i4" Тогда 
		ИмяУзла = ЧтениеXML.Имя;
		ЧтениеXML.Прочитать(); // значение 
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Результат = XMLЗначение(Тип("Число"), ЧтениеXML.Значение);
			ЧтениеXML.Прочитать(); //
		Иначе 
			Результат = 0;
		КонецЕсли;
		
		ПроверитьРавенство(ЧтениеXML.Имя,ИмяУзла);
	ИначеЕсли ЧтениеXML.Имя = "dateTime.iso8601" Тогда 
		ИмяУзла = ЧтениеXML.Имя;
		ЧтениеXML.Прочитать(); // значение 
		ПроверитьРавенство(ЧтениеXML.ТипУзла,ТипУзлаXML.Текст);
		Результат = XMLЗначение(Тип("Дата"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать(); // 
		ПроверитьРавенство(ЧтениеXML.Имя,ИмяУзла);
	ИначеЕсли ЧтениеXML.Имя = "boolean" Тогда 
		ЧтениеXML.Прочитать(); // значение 
		ПроверитьРавенство(ЧтениеXML.ТипУзла,ТипУзлаXML.Текст);
		Результат = (ЧтениеXML.Значение = "1");
		ЧтениеXML.Прочитать(); // 
		ПроверитьРавенство(ЧтениеXML.Имя,"boolean");
	ИначеЕсли ЧтениеXML.Имя = "base64" Тогда 
		ЧтениеXML.Прочитать(); // значение 
		ПроверитьРавенство(ЧтениеXML.ТипУзла,ТипУзлаXML.Текст);
		Результат = XMLЗначение(Тип("ДвоичныеДанные"), ЧтениеXML.Значение);
		ЧтениеXML.Прочитать(); // 
		ПроверитьРавенство(ЧтениеXML.Имя,"base64");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьПараметр(ЗаписьXML, Параметр) 
	ИмяТипа = "";
	ЗначениеПараметра = "";
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда 
		ИмяТипа = "string";
		ЗначениеПараметра = XMLСтрока(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Число") Тогда 
		Если Параметр - Окр(Параметр,0) <> 0 Тогда 
			ИмяТипа = "double";
		Иначе
			ИмяТипа = "int";
		КонецЕсли;
		
		ЗначениеПараметра = Формат(Параметр, "ЧРД=,; ЧГ=");
	ИначеЕсли ТипЗнч(Параметр) = Тип("Дата") Тогда 
		ИмяТипа = "dateTime.iso8601";
		ЗначениеПараметра = XMLСтрока(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Булево") Тогда 
		ИмяТипа = "boolean";
		ЗначениеПараметра = ?(Параметр,"1","0");
	ИначеЕсли ТипЗнч(Параметр) = Тип("ДвоичныеДанные") ИЛИ ТипЗнч(Параметр) = Тип("ХранилищеЗначения") Тогда 
		ИмяТипа = "base64";
		ЗначениеПараметра = XMLСтрока(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда 
		Возврат ЗаписатьМассив(ЗаписьXML, Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Структура") Тогда 
		Возврат ЗаписатьСтруктуру(ЗаписьXML, Параметр);
	Иначе
		ВызватьИсключение "XMLRPC: Передан неверный параметр";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипа);
	ЗаписьXML.ЗаписатьТекст(ЗначениеПараметра);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ИмяТипа
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьСтруктуру(ЗаписьXML, Структура)
	ЗаписьXML.ЗаписатьНачалоЭлемента("struct");
	
	Для Каждого КлючИЗначение Из Структура Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("member");
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст(КлючИЗначение.Ключ);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // name
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("value");
		ЗаписатьПараметр(ЗаписьXML, КлючИЗначение.Значение);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // value
		ЗаписьXML.ЗаписатьКонецЭлемента(); // member
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // array
	
	Возврат Истина;
КонецФункции

Функция ЗаписатьМассив(ЗаписьXML, Массив)
	ЗаписьXML.ЗаписатьНачалоЭлемента("array");
	ЗаписьXML.ЗаписатьНачалоЭлемента("data");
	
	Для Каждого Элемент Из Массив Цикл 
		ЗаписьXML.ЗаписатьНачалоЭлемента("value");
		ЗаписатьПараметр(ЗаписьXML, Элемент);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // value
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // data
	ЗаписьXML.ЗаписатьКонецЭлемента(); // array
	
	Возврат Истина;
КонецФункции

Функция НормализоватьТекстСМС(Знач _Текст, УбиратьПереносСтроки = Истина) Экспорт 
	
	Если УбиратьПереносСтроки Тогда
		_Текст = СтрЗаменить(_Текст, Символ(10), " "); // перенос строки
	КонецЕсли;
	
	_Текст = СтрЗаменить(_Текст, Символ(13), ""); // возврат каретки	
	_Текст = СтрЗаменить(_Текст, Символ(182), " "); // табуляция
	_Текст = СтрЗаменить(_Текст, "№", "N");
	_Текст = СтрЗаменить(_Текст, "[", "(");
	_Текст = СтрЗаменить(_Текст, "]", ")");
	_Текст = СтрЗаменить(_Текст, Символ(8211), "-"); // Длинное тире
	_Текст = СтрЗаменить(_Текст, Символ(769), """"); // Апостроф кривой
	_Текст = СтрЗаменить(_Текст, Символ(8217), ""); // Апостроф кривой
	_Текст = СтрЗаменить(_Текст, Символ(160), " "); // неразрывный пробел 
	
	Возврат _Текст;
	
КонецФункции

#КонецОбласти
