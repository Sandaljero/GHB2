Функция ПустаяДата() Экспорт 
	Возврат Дата(1,1,1);
КонецФункции

Функция СписокДокументыПередИнициализацией() Экспорт 
	_Список = Новый СписокЗначений();
	//_Список.Добавить("ГонарарнаяВедомость", "Гонарарная ведомость");
	//_Список.Добавить("но_ЗаявкаНаЛокацию", "Заявка на поиск локации");
	//p.lukashov(12.03.2019) --->
	_Список.Добавить("но_ЗаявкаНаБронированиеАВМ", "Заявка на бронирование АВМ");
	//p.lukashov(12.03.2019) <---
	
	Возврат _Список;
КонецФункции

Процедура КонтрольРедактирования(Форма) Экспорт
	Если (Форма.Объект.СостояниеДокумента <> ПредопределенноеЗначение("Перечисление.но_СтатусыДокумента.Черновик")) И (Форма.Объект.СостояниеДокумента <> ПредопределенноеЗначение("Перечисление.но_СтатусыДокумента.ПустаяСсылка")) Тогда
		_Ссылка = Форма.Объект.Ссылка;
		Форма.ТолькоПросмотр = но_Документооборот.АнализДоступныхДействий(_Ссылка, ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере(), но_Документооборот.ПараметрыСеансаТекущийПользователь());
	Иначе
		Форма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Попытка
		//ОткрытьФормуБППодписание(Форма);
	Исключение
		//
	КонецПопытки;
КонецПроцедуры

Процедура ОткрытьФормуБППодписание(Форма)
	ФлПриОткрытииДокументаОткрыватьБППодписание = Истина; //УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(но_Документооборот.ПараметрыСеансаТекущийПользователь(), "ПриОткрытииДокументаОткрыватьБППодписание");
	
	Если ФлПриОткрытииДокументаОткрыватьБППодписание Тогда 
		#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
			//лБП = ПолучитьФорму("БизнесПроцесс.Подписание.Форма.ФормаМаршрутаУправляемая", , Форма);
			//лБП.ЗакрыватьПриЗакрытииВладельца = Истина;
			//лБП.Открыть();
			
			ОткрытьФорму("БизнесПроцесс.Подписание.Форма.ФормаМаршрутаУправляемая", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), Форма);
		#ИначеЕсли ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			лБП = БизнесПроцессы.Подписание.ПолучитьФорму("ФормаМаршрута", Форма);
			лБП.ЗакрыватьПриЗакрытииВладельца = Истина;
			лБП.Открыть();
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьПользователемНастройки(НастраиваемыйПостроитель, СтрПредставление = Неопределено) Экспорт
	_Фрм = ПолучитьФорму("Справочник.но_МаршрутыСогласования.Форма.НастройкаОтборов", Новый Структура("Объект", НастраиваемыйПостроитель));
	//_Фрм.ПостроительОтч = ПолучитьИзВременногоХранилища(НастраиваемыйПостроитель);
	_Фрм.ПостроительОтч = НастраиваемыйПостроитель;
	
	Если _Фрм.ОткрытьМодально() = Истина Тогда
		Если СтрПредставление = Неопределено Тогда
			ХранилищеДанныхОтборов = СформироватьХранилищеОтборов(НастраиваемыйПостроитель);
		Иначе
			ХранилищеДанныхОтборов = СформироватьХранилищеОтборов(НастраиваемыйПостроитель, СтрПредставление);
		КонецЕсли;
		
		Возврат ХранилищеДанныхОтборов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ВернутьМассивОтборов(_ОтборПостроителя, _Представление = Неопределено)
	МассивОтборов = Новый Массив();
	
	Для Каждого ОтборПостроителя Из _ОтборПостроителя.Элементы Цикл
		Если ОтборПостроителя.Использование Тогда
			Если ТипЗнч(ОтборПостроителя) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураОтбора = Новый Структура("ТипДанных, ТипГруппы, Представление, ПодчиненныеЭлементы",
					1, ОтборПостроителя.ТипГруппы, ОтборПостроителя.Представление, ВернутьМассивОтборов(ОтборПостроителя, _Представление));
					
				_Представление = Строка(ОтборПостроителя.ТипГруппы) + ":" + Символы.ПС + _Представление;
			Иначе
				СтруктураОтбора = Новый Структура("ТипДанных, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Представление",
					2, ОтборПостроителя.ЛевоеЗначение, ОтборПостроителя.ВидСравнения, ОтборПостроителя.ПравоеЗначение, ОтборПостроителя.Представление);
					
				_Представление = Строка(ОтборПостроителя.ЛевоеЗначение) + " " + Строка(ОтборПостроителя.ВидСравнения) + " " + Строка(ОтборПостроителя.ПравоеЗначение) + Символы.ПС + _Представление;
			КонецЕсли;
			
			МассивОтборов.Добавить(СтруктураОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтборов;
КонецФункции

Функция СформироватьХранилищеОтборов(НастраиваемыйПостроитель, СтрПредставление = Неопределено) Экспорт
	СтрПредставление = "";
	МассивОтборов = ВернутьМассивОтборов(НастраиваемыйПостроитель.Настройки.Отбор, СтрПредставление);
	
	ХранилищеДанныхОтборов = но_Документооборот.УпаковатьМассивВСтроку(МассивОтборов);	
	
	Возврат ХранилищеДанныхОтборов; 
КонецФункции

Процедура Подписать(Форма) Экспорт
	
	ОткрытьФормуПодписания = Истина;
	
	Если Форма.Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПередПодписаниемЗавершение", но_ДокументооборотКлиент, Форма),
			НСтр("ru='Перед подписанием необходимо записать документ.
			|Продолжить с записью?'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

		ОткрытьФормуПодписания = Ложь;
			
	КонецЕсли;		
		
	Если ОткрытьФормуПодписания Тогда
		
		ОткрытьФормуПодписания(Форма);
			
	Иначе		
		
		Форма.Активизировать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВопросПередПодписаниемЗавершение(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДокументПроведен = Форма.Объект.Проведен;
		
		Если ДокументПроведен Тогда
			РежимЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Иначе
			РежимЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ОткрытьФормуПодписания = Форма.Записать(РежимЗаписи);
		
	Иначе	
		
		ОткрытьФормуПодписания = Ложь;
		
	КонецЕсли;			
	
	Если ОткрытьФормуПодписания Тогда
		
		ОткрытьФормуПодписания(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеФормыПодписания(Результат, Форма) Экспорт
	
	Форма.Прочитать();
	
	Если НЕ Форма.ДокументОткрытАдминистратором Тогда
		
		но_ДокументооборотКлиент.КонтрольРедактирования(Форма);

	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьФормуПодписания(Форма)
			
	ОткрытьФорму("БизнесПроцесс.Подписание.Форма.ФормаМаршрутаУправляемая", 
		Новый Структура("Док", Форма.Объект.Ссылка), Форма, , , , 
		Новый ОписаниеОповещения("ЗакрытиеФормыПодписания", но_ДокументооборотКлиент, Форма)
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры


