
#Область ОбменНСИСБазамиХолдинга

#Область ПолучениеДанныхИзБаз

Процедура ПолучитьЗаписатьВсеДанныеПоНСИПоБазеХолдинга(БазаХолдинга, 
														мЭкспортныеМетоды, 
														ЧитатьТаблицыИзменений, 
														ДатаСреза = Неопределено, 
														стДатыНачалаОкончания = Неопределено) Экспорт

	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Для каждого СтрокаЭксМет Из мЭкспортныеМетоды Цикл
	
		Если СтрокаЭксМет.ИмяСобытия = "ПолучитьФизЛиц" Тогда
			ПолучитьДанныеПоФизЛицамБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДолжностиОрганизаций" Тогда
			ПолучитьДанныеПоДолжностямБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьПодразделенияОрганизаций" Тогда
			ПолучитьДанныеПоПодразделениямБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьРабочиеПомещения" Тогда
			ПолучитьДанныеПоРабочиеПомещенияБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДивизионы" Тогда
			ПолучитьДивизионыБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьПользователей" Тогда
			ПолучитьДанныеПоПользователиБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьКонтактныеДанные" Тогда
			ПолучитьКонтактныеДанныеБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьКадровыеДанные" Тогда
			ПолучитьКадровыеДанныеБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений, ДатаСреза);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьСотрудников" Тогда
			ПолучитьДанныеПоСотрудникамБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьРазмещение" Тогда
			ПолучитьДанныеПоРазмещениюСотрудниковПоРабочимПомещениям(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоБлокировкамПользователей" Тогда
			ПолучитьДанныеПоБлокировкамПользователейБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоОрганизациям" Тогда
			ПолучитьДанныеПоОрганизациямБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоРуководителямПодразделений" Тогда
			ПолучитьДанныеПоРуководителямПодразделенийБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоШтатномуРасписанию" Тогда
			ПолучитьДанныеПоШтатномуРасписанию(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоСотрудникамГПХБазХолдинга" Тогда
			ПолучитьДанныеПоСотрудникамГПХБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоСостояниюСотрудниковОрганизаций" Тогда
			ПолучитьДанныеПоСостояниюСотрудниковБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		ИначеЕсли СтрокаЭксМет.ИмяСобытия = "ПолучитьДанныеПоЦФОБазХолдинга" Тогда
			ПолучитьДанныеПоЦФОБазХолдинга(БазаХолдинга, СтрокаЭксМет.ЭкспортныйМетод, СтрокаЭксМет.ВнешнийИсточник, ЧитатьТаблицыИзменений);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоРуководителямПодразделенийБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник) Экспорт

	стРуководители = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник);
	Если Не стРуководители.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучитьДанныеПоРуководителямПодразделений", УровеньЖурналаРегистрации.Ошибка,,, стРуководители.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзРуководители = Новый ТаблицаЗначений;
	тзРуководители.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("РольДокументооборота", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("Подразделение", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("Подразделениеguid", ОписаниеТиповС);
	тзРуководители.Колонки.Добавить("ФизЛицоguid", ОписаниеТиповС);
	
	Для каждого СтрокаРабочееПомещение Из стРуководители.Результат.result.Данные Цикл
	
		новСтр = тзРуководители.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаРабочееПомещение);
		
	КонецЦикла;
	
	ДобавитьДанныеПоРуководителямПодразделений(тзРуководители, БазаХолдинга);
	
	УдалитьНеактуальныхРуководителей(БазаХолдинга);

КонецПроцедуры

Процедура ПолучитьДанныеПоОрганизациямБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт

	РодительБазаХолдинга = ПроверитьСоздатьГруппуПоОрганизацииВСправочникеОрганизацииБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоОрганизации = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоОрганизации.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоОрганизациямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоОрганизации.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеОрганизации = Новый ТаблицаЗначений;
	тзДанныеОрганизации.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеОрганизации.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеОрганизации.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеОрганизации.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаОрганизация Из стОтветПоОрганизации.Результат.result.Данные Цикл
		
		новСтр = тзДанныеОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаОрганизация);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоОрганизациямБазХолдинга(тзДанныеОрганизации, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "Организации"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеПоРабочиеПомещенияБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)
	
	стРабочиеПомещения = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стРабочиеПомещения.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоПользователямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стРабочиеПомещения.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзРабочиеПомещения = Новый ТаблицаЗначений;
	тзРабочиеПомещения.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("НаименованиеСуществующее", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("Корпус", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("Этаж", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("Офис", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("ДробнаяЧасть", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("Дополнительно", ОписаниеТиповС);
	тзРабочиеПомещения.Колонки.Добавить("СоздаватьКарточку", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаРабочееПомещение Из стРабочиеПомещения.Результат.result.Данные Цикл
		
		новСтр = тзРабочиеПомещения.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаРабочееПомещение);
		
	КонецЦикла;
	
	ЗаполнитьСоздатьРабочееПомещениеБазХолдинга(тзРабочиеПомещения);

КонецПроцедуры

Процедура ПолучитьДивизионыБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт 
	
	стДивизионы = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стДивизионы.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоДивизионамИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стДивизионы.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС_3 = ОбщегоНазначения.ОписаниеТипаСтрока(3);
	ОписаниеТиповС_150 = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДивизионы = Новый ТаблицаЗначений;
	тзДивизионы.Колонки.Добавить("Наименование", ОписаниеТиповС_150);
	тзДивизионы.Колонки.Добавить("Код", ОписаниеТиповС_3);
	тзДивизионы.Колонки.Добавить("КодРодителя", ОписаниеТиповС_3);
	тзДивизионы.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДивизионы Из стДивизионы.Результат.result.Данные Цикл
		
		новСтр = тзДивизионы.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДивизионы);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьДивизион(тзДивизионы);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "но_ДивизионыКадры"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеПоПользователиБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт 

	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеПользователиБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоПользователям = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоПользователям.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоПользователямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоПользователям.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеПользователи = Новый ТаблицаЗначений;
	тзДанныеПользователи.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеПользователи.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеПользователи.Колонки.Добавить("guidФЛ", ОписаниеТиповС);
	тзДанныеПользователи.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеПользователи.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДолжность Из стОтветПоПользователям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеПользователи.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьДанныеПоПользователямБазХолдинга(тзДанныеПользователи, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "Пользователи"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоСотрудникамБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)

	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоСотрудникам = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоСотрудникам.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоСотрудникамИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоСотрудникам.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеСотрудники = Новый ТаблицаЗначений;
	тзДанныеСотрудники.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидДоговора", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ВидЗанятости", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("guidФЛ", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеСотрудники.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДолжность Из стОтветПоСотрудникам.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоСотрудникамБазХолдинга(тзДанныеСотрудники, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "СотрудникиОрганизаций"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеПоСотрудникамГПХБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт

	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоСотрудникамГПХ = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоСотрудникамГПХ.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоСотрудникамГПХИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоСотрудникамГПХ.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеСотрудники = Новый ТаблицаЗначений;
	тзДанныеСотрудники.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Сотрудникguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ФизЛицоguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ДокументСсылка", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ДокументСсылкаguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	тзДанныеСотрудники.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	тзДанныеСотрудники.Колонки.Добавить("Изменение", ОписаниеТиповС);
	
	Для каждого СтрокаСотрудник Из стОтветПоСотрудникамГПХ.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСотрудник);
		новСтр.ДатаНачала = Дата(Сред(СтрокаСотрудник.ДатаНачала, 1, 4), 
										Сред(СтрокаСотрудник.ДатаНачала, 6, 2),
										Сред(СтрокаСотрудник.ДатаНачала, 9, 2));
		новСтр.ДатаОкончания = Дата(Сред(СтрокаСотрудник.ДатаОкончания, 1, 4), 
										Сред(СтрокаСотрудник.ДатаОкончания, 6, 2),
										Сред(СтрокаСотрудник.ДатаОкончания, 9, 2));
		
	КонецЦикла;
	
	тзДанныеСотрудники.Сортировать("Сотрудник");
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоСотрудникамГПХБазХолдинга(тзДанныеСотрудники, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Документы", "ДоговорНаВыполнениеРаботСФизЛицом"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеПоФизЛицамБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт

	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоФизЛицам = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоФизЛицам.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоФизЛицамИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоФизЛицам.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеФизЛиц = Новый ТаблицаЗначений;
	тзДанныеФизЛиц.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеФизЛиц.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеФизЛиц.Колонки.Добавить("ДоменноеИмя", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("Пол", ОписаниеТиповС);
	тзДанныеФизЛиц.Колонки.Добавить("ДатаРождения", ОписаниеТиповС);
		
	Для каждого СтрокаФизЛицо Из стОтветПоФизЛицам.Результат.result.Данные Цикл
		
		новСтр = тзДанныеФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаФизЛицо);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоФизЛицамТекущейБазыИФизЛицБазХолдинга(тзДанныеФизЛиц, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "ФизическиеЛица"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоДолжностямБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)

	РодительБазаХолдинга =  ПроверитьСоздатьГруппуПоОрганизацииВСправочникеДолжностиБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоДолжностям = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоДолжностям.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоДолжностямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоДолжностям.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеДолжности = Новый ТаблицаЗначений;
	тзДанныеДолжности.Колонки.Добавить("Наименование", ОписаниеТиповС);
	// ++ Тогушаков 07.10.2020 #16442 \\
	тзДанныеДолжности.Колонки.Добавить("АнглийскоеНаименование", ОписаниеТиповС);
	// -- Тогушаков 07.10.2020 #16442
	тзДанныеДолжности.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеДолжности.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеДолжности.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДолжность Из стОтветПоДолжностям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеДолжности.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоДолжностямБазХолдинга(тзДанныеДолжности, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "ДолжностиОрганизаций"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеПоПодразделениямБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)

	РодительБазаХолдинга = ПроверитьСоздатьГруппуПоОрганизацииВСправочникеПодразделенияБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стОтветПоПодразделениям = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стОтветПоПодразделениям.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоподразделениямИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стОтветПоПодразделениям.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеПодразделения = Новый ТаблицаЗначений;
	тзДанныеПодразделения.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("guidОрганизация", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("НаименованиеОрганизация", ОписаниеТиповС);
	тзДанныеПодразделения.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	тзДанныеПодразделения.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	тзДанныеПодразделения.Колонки.Добавить("ДатаС", Новый ОписаниеТипов("Дата"));
	тзДанныеПодразделения.Колонки.Добавить("ДатаПо", Новый ОписаниеТипов("Дата"));
	тзДанныеПодразделения.Колонки.Добавить("УровеньПодразделения", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_УровеньПодразделения"));
	
	Для каждого СтрокаДанные Из стОтветПоПодразделениям.Результат.result.Данные Цикл
		
		новСтр = тзДанныеПодразделения.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДанные);
		Попытка
			новСтр.УровеньПодразделения = Перечисления.гхб_УровеньПодразделения[СтрокаДанные.УроверьПодразделения];
		Исключение
			новСтр.УровеньПодразделения = Перечисления.гхб_УровеньПодразделения.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.ДатаС = Дата(Сред(СтрокаДанные.ДатаС, 1, 4),
									Сред(СтрокаДанные.ДатаС, 6, 2),
									Сред(СтрокаДанные.ДатаС, 9, 2));;
		новСтр.ДатаПо = Дата(Сред(СтрокаДанные.ДатаПо, 1, 4),
									Сред(СтрокаДанные.ДатаПо, 6, 2),
									Сред(СтрокаДанные.ДатаПо, 9, 2));;
		
	КонецЦикла;
	
	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоПодразделениямБазХолдинга(тзДанныеПодразделения, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "ПодразделенияОрганизаций"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьКонтактныеДанныеБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт 
	
	стКонтактныеДанные = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стКонтактныеДанные.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоКонтактнымДаннымИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стКонтактныеДанные.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКонтактныеДанные = Новый ТаблицаЗначений;
	тзКонтактныеДанные.Колонки.Добавить("Представление", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Тип", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Вид", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("guid", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	
	Для каждого СтрокаКонтактныеДанные Из стКонтактныеДанные.Результат.result.Данные Цикл
		
		новСтр = тзКонтактныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКонтактныеДанные);
	
	КонецЦикла;
	
	ЗаписьУспешна = ЗаполнитьСоздатьКонтактныеДанныеБазХолдинга(тзКонтактныеДанные, БазаХолдинга);
	
	Если ЗаписьУспешна И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "РегистрыСведений", "КонтактнаяИнформация"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
		Попытка
			УдалитьНеактуальныеЗаписиПоКонтактнойИнформации(БазаХолдинга);
		Исключение
			ЗаписьЖурналаРегистрации("УдалениеНеактуальнойКИ", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка удаления неактуальной КИ при обмене");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКадровыеДанныеБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений, ДатаСреза) Экспорт
	
	стКадровыеДанные = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
															ЭкспортныйМетод, 
															ВнешнийИсточник, 
															ЧитатьТаблицыИзменений, 
															Новый Структура("ДатаСреза", ДатаСреза));
	Если Не стКадровыеДанные.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоКадровымДаннымИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стКадровыеДанные.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКадровыеДанные = Новый ТаблицаЗначений;
	тзКадровыеДанные.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidСотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidДолжность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДатаОкончанияСрочногоТрудовогоДоговора", Новый ОписаниеТипов("Дата"));
	тзКадровыеДанные.Колонки.Добавить("ПричинаИзмененияСостояния", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ВидЗанятости", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКод", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКодРодителя", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДатаЗаписиБазыГХБ", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаКадровыеДанные Из стКадровыеДанные.Результат.result.Данные Цикл
		
		новСтр = тзКадровыеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКадровыеДанные);
		новСтр.ДатаОкончанияСрочногоТрудовогоДоговора = Дата(Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 1, 4), 
																Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 6, 2),
																Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 9, 2));
		новСтр.ДатаЗаписиБазыГХБ = Дата(Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 1, 4), 
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 6, 2),
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 9, 2));
		
	КонецЦикла;
	
	ЗаписьУспешна = ЗаполнитьСоздатьКадровыеДанныеБазХолдинга(тзКадровыеДанные, БазаХолдинга);
	
	Если ЗаписьУспешна И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "РегистрыСведений", "зп_РаботникиОрганизаций"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
		Попытка
			УдалитьНеактуальныеЗаписиПоКонтактнойИнформации(БазаХолдинга);
		Исключение
			ЗаписьЖурналаРегистрации("УдалениеНеактуальныхКадровыхДанных", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка удаления неактуальных кадровых данных при обмене");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоРазмещениюСотрудниковПоРабочимПомещениям(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)

	стРазмещение = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стРазмещение.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоКадровымДаннымИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стРазмещение.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзРазмещение = Новый ТаблицаЗначений;
	тзРазмещение.Колонки.Добавить("Представление", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("Корпус", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("Этаж", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("Офис", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("ДробнаяЧасть", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("НаименованиеРП", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("guid", ОписаниеТиповС);
	тзРазмещение.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	
	Для каждого СтрокаРазмещение Из стРазмещение.Результат.result.Данные Цикл
		
		новСтр = тзРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаРазмещение);
		
	КонецЦикла;
	
	ЗаполнитьСоздатьРазмещениеСотрудниковБазХолдинга(тзРазмещение, БазаХолдинга);

КонецПроцедуры

Процедура ПолучитьДанныеПоБлокировкамПользователейБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений)

	стДанныеБлокировок = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений, ПолучитьГуидыБлокированныхПользователей(БазаХолдинга));
	Если Не стДанныеБлокировок.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоБлокировкамПользователейИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стДанныеБлокировок.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеБлокировок = Новый ТаблицаЗначений;
	тзДанныеБлокировок.Колонки.Добавить("Наименование", ОписаниеТиповС);
	тзДанныеБлокировок.Колонки.Добавить("ДатаБлокировки", Новый ОписаниеТипов("Дата"));
	тзДанныеБлокировок.Колонки.Добавить("guid", ОписаниеТиповС);
	тзДанныеБлокировок.Колонки.Добавить("НоваяБлокировка", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДанныеБлокировок Из стДанныеБлокировок.Результат.result.Данные Цикл
		
		новСтр = тзДанныеБлокировок.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДанныеБлокировок);
		новСтр.ДатаБлокировки = Дата(Сред(СтрокаДанныеБлокировок.ДатаБлокировки, 1, 4), 
									Сред(СтрокаДанныеБлокировок.ДатаБлокировки, 6, 2),
									Сред(СтрокаДанныеБлокировок.ДатаБлокировки, 9, 2));
	
	КонецЦикла;
	
	//++ p.lukashov(16.06.2020) #14324
	ТипБазы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "ТипБазы");;
	Если ТипБазы = Перечисления.гхб_ТипыБазХолдинга.ManageResources Тогда
		ДобавитьРедактироватьДанныеОБлокировкеПользователейБазХолдингаРесурсы(тзДанныеБлокировок, БазаХолдинга);	
	Иначе
		
		БезОшибок = ДобавитьРедактироватьДанныеОБлокировкеПользователейБазХолдинга(тзДанныеБлокировок, БазаХолдинга);
		
		Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
			
			мМетаданные = Новый Массив;
			мМетаданные.Добавить(Новый Структура("Вид,Имя", "РегистрыСведений", "НастройкиПользователей"));
			ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
			
		КонецЕсли;
		
	КонецЕсли;
	//-- p.lukashov(16.06.2020)

КонецПроцедуры

Процедура ПолучитьДанныеПоШтатномуРасписанию(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт

	стШтатное = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
													ЭкспортныйМетод, 
													ВнешнийИсточник, 
													ЧитатьТаблицыИзменений);
	Если Не стШтатное.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоКадровымДаннымИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стШтатное.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзШтатное = Новый ТаблицаЗначений;
	тзШтатное.Колонки.Добавить("Период", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизацииguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("КоличествоСтавок", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("КритичнаяПозиция", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("БюджетныйКодПозицииРуководителя", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("УровеньДолжности", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПризнакПозиции", ОписаниеТиповС);
	
	Для каждого СтрокаДолжность Из стШтатное.Результат.result.Данные Цикл
		
		новСтр = тзШтатное.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		новСтр.Период = Дата(Сред(СтрокаДолжность.Период, 1, 4), 
										Сред(СтрокаДолжность.Период, 6, 2),
										Сред(СтрокаДолжность.Период, 9, 2));
		
	КонецЦикла;
	
	БезОшибок = ЗаписатьРедактироватьДанныеПоШтатномуРасписанию(тзШтатное, БазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "РегистрыСведений", "но_ШтатноеРасписаниеОрганизацийУпр"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		Попытка
			УдалитьНеактуальныеЗаписиПоШтатномуРасписанию(БазаХолдинга);
		Исключение
			ЗаписьЖурналаРегистрации("УдалениеНеактуальныхДанныхШтатногоРасписания", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка удаления неактуальных данных штатного расписания");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоСостояниюСотрудниковБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт
	
	стСостояния = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стСостояния.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоСостояниямСотрудниковИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стСостояния.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзДанныеСотрудники = Новый ТаблицаЗначений;
	тзДанныеСотрудники.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	тзДанныеСотрудники.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Сотрудникguid", ОписаниеТиповС);
	тзДанныеСотрудники.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСотрудники.Колонки.Добавить("СостояниеЗавершения", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСотрудники.Колонки.Добавить("ПериодЗавершения", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСотрудник Из стСостояния.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСотрудник);
		
		Попытка
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСотрудник.Состояние];
		Исключение
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		Попытка
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСотрудник.СостояниеЗавершения];
		Исключение
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.Период = Дата(Сред(СтрокаСотрудник.Период, 1, 4), 
										Сред(СтрокаСотрудник.Период, 6, 2),
										Сред(СтрокаСотрудник.Период, 9, 2));
		новСтр.ПериодЗавершения = Дата(Сред(СтрокаСотрудник.ПериодЗавершения, 1, 4), 
										Сред(СтрокаСотрудник.ПериодЗавершения, 6, 2),
										Сред(СтрокаСотрудник.ПериодЗавершения, 9, 2));
		
	КонецЦикла;
	
	тзДанныеСотрудники.Сортировать("Сотрудник");
	
	БезОшибок = ЗаполнитьСоздатьСостоянияРаботниковОрганизация(тзДанныеСотрудники, БазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "РегистрыСведений", "зп_СостояниеРаботниковОрганизаций"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
		Попытка
			УдалитьНеактуальныеЗаписиПоСостояниюСотрудниковОрганизаций(БазаХолдинга);
		Исключение
			ЗаписьЖурналаРегистрации("УдалениеНеактуальныхДанныхСостоянияСотрудников", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка удаления неактуальных данных состояния сотрудников");
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоЦФОБазХолдинга(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений) Экспорт
	
	РодительБазаХолдинга = ПроверитьСоздатьГруппуПоЦФОБазХолдинга(БазаХолдинга);
	
	Если РодительБазаХолдинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стСостояния = ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений);
	Если Не стСостояния.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоЦФОИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, стСостояния.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
		
	тзДанныеСостояния = Новый ТаблицаЗначений;
	тзДанныеСостояния.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("ЦФОguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Шифр", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("ДатаС", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("ДатаПо", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	тзДанныеСостояния.Колонки.Добавить("Родитель", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Родительguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Ответственный", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Ответственныйguid", ОписаниеТиповС);
	
	Для каждого СтрокаСостояние Из стСостояния.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСостояние);
		
		
		новСтр.ДатаС = Дата(Сред(СтрокаСостояние.ДатаС, 1, 4), 
										Сред(СтрокаСостояние.ДатаС, 6, 2),
										Сред(СтрокаСостояние.ДатаС, 9, 2));
		новСтр.ДатаПо = Дата(Сред(СтрокаСостояние.ДатаПо, 1, 4), 
										Сред(СтрокаСостояние.ДатаПо, 6, 2),
										Сред(СтрокаСостояние.ДатаПо, 9, 2));
		
	КонецЦикла;

	БезОшибок = ЗаполнитьСоздатьРедактироватьДанныеПоЦФОБазХолдинга(тзДанныеСостояния, БазаХолдинга, РодительБазаХолдинга);
	
	Если БезОшибок И ПроверитьНаРабочуюБазу() Тогда
		
		мМетаданные = Новый Массив;
		мМетаданные.Добавить(Новый Структура("Вид,Имя", "Справочники", "ЦФО"));
		ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, ЭкспортныйМетод, ВнешнийИсточник, ЧитатьТаблицыИзменений = Ложь, стПараметрыЗапроса = Неопределено) Экспорт

	стJSON = Новый Структура;
	стJSON.Вставить("jsonrpc", "2.0");
	стJSON.Вставить("method", ЭкспортныйМетод);
	
	стParams = Новый Структура;
	ПередатьПараметры = Ложь;
	
	Если ЧитатьТаблицыИзменений Тогда
		
		стParams.Вставить("ЗапросИзменений", Истина);
		ПередатьПараметры = Истина;
		
	КонецЕсли;
	
	Если стПараметрыЗапроса <> Неопределено И стПараметрыЗапроса.Свойство("ГУИДыБлокированных") Тогда
	
		стParams.Вставить("ГУИДыБлокированных", стПараметрыЗапроса.ГУИДыБлокированных);
		ПередатьПараметры = Истина;
	
	КонецЕсли;
	
	Если стПараметрыЗапроса <> Неопределено И стПараметрыЗапроса.Свойство("ДатаСреза") Тогда
	
		стParams.Вставить("ДатаСреза", стПараметрыЗапроса.ДатаСреза);
		ПередатьПараметры = Истина;
	
	КонецЕсли;
	
	Если стПараметрыЗапроса <> Неопределено И стПараметрыЗапроса.Свойство("ДатаСреза") Тогда
	
		стParams.Вставить("ДатаСреза", стПараметрыЗапроса.ДатаСреза);
		ПередатьПараметры = Истина;
	
	КонецЕсли;
	
	Если стПараметрыЗапроса <> Неопределено И стПараметрыЗапроса.Свойство("ДатаНачала") Тогда
	
		стParams.Вставить("ДатаНачала", стПараметрыЗапроса.ДатаНачала);
		ПередатьПараметры = Истина;
	
	КонецЕсли;
	
	Если стПараметрыЗапроса <> Неопределено И стПараметрыЗапроса.Свойство("ДатаОкончания") Тогда
	
		стParams.Вставить("ДатаОкончания", стПараметрыЗапроса.ДатаОкончания);
		ПередатьПараметры = Истина;
	
	КонецЕсли;
	
	Если ПередатьПараметры Тогда
		стJSON.Вставить("params", стParams);
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, стJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(СокрЛП(ВнешнийИсточник.Сервер),
												,
												СокрЛП(ВнешнийИсточник.Пользователь),
												СокрЛП(ВнешнийИсточник.Пароль),
												,
												180);
		ЗапросHTTP = Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса = ВнешнийИсточник.АдресРесурса;
		ЗапросHTTP.Заголовки.Вставить ("content-type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = Соединение.POST(ЗапросHTTP);
		
		Если Результат.КодСостояния = 200 Тогда
			
			стрJSON = Результат.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(стрJSON);
			стОтвет = ПрочитатьJSON(ЧтениеJSON, Ложь);
			
			Если стОтвет.Свойство("result") Тогда
				Возврат Новый Структура("ОбменПрошел,Результат", Истина, стОтвет);
			ИначеЕсли стОтвет.Свойство("error") Тогда
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, " Ошибка в базе " + БазаХолдинга + ": " + стОтвет.error.message);
			Иначе// Это на всякий случай, если структура ответа будет переделываться.
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, " Неизвестная структура ответа из " + БазаХолдинга);
			КонецЕсли;
		
		Иначе
			Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "База " + БазаХолдинга + " КодСостояния = " + Результат.КодСостояния);
		КонецЕсли;
	
	Исключение
		Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "База " + БазаХолдинга + " " + ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПолучитьДанныеПоФизЛицам()

Процедура ПолучитьЗаписатьДанныеПоНСИИзБазХолдинга() Экспорт
	ПолучитьЗаписатьВсеДанныеПоНСИПоБазеХолдингаПоНастройкам();
КонецПроцедуры

Процедура ПолучитьЗаписатьВсеДанныеПоНСИПоБазеХолдингаПоНастройкам(мБазы = Неопределено, 
																	мИменаСобытий = Неопределено, 
																	ЧитатьТаблицыИзменений = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мБазаХолдинга", мБазы);
	Запрос.УстановитьПараметр("мЭкспортныйМетод", мИменаСобытий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гхб_НастройкаОпросаБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	гхб_НастройкаОпросаБазХолдинга.АналитикаОпросаБазХолдинга КАК гхб_АналитикаОпросаБазХолдинга,
	|	гхб_НастройкаОпросаБазХолдинга.ЭкспортныйМетод КАК ЭкспортныйМетод,
	|	гхб_НастройкаОпросаБазХолдинга.ВнешнийИсточник КАК ВнешнийИсточник,
	|	гхб_НастройкаОпросаБазХолдинга.ИмяСобытия КАК ИмяСобытия,
	|	гхб_НастройкаОпросаБазХолдинга.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.гхб_НастройкаОпросаБазХолдинга КАК гхб_НастройкаОпросаБазХолдинга
	|ГДЕ
	|	гхб_НастройкаОпросаБазХолдинга.АналитикаОпросаБазХолдинга = ЗНАЧЕНИЕ(Перечисление.гхб_АналитикаОпросаБазХолдинга.ОпросДанныхПоФизЛицам)
	|	" + ?(мБазы = Неопределено, "", " И гхб_НастройкаОпросаБазХолдинга.БазаХолдинга В(&мБазаХолдинга) ") + "
	|	" + ?(мИменаСобытий = Неопределено, "", " И гхб_НастройкаОпросаБазХолдинга.ЭкспортныйМетод В(&мЭкспортныйМетод) ") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазаХолдинга,
	|	Приоритет
	|ИТОГИ ПО
	|	БазаХолдинга";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	
		ВыборкаДетали = Выборка.Выбрать();
		
		мЭксМетоды = Новый Массив;
		Пока ВыборкаДетали.Следующий() Цикл
			
			мЭксМетоды.Добавить(Новый Структура("ИмяСобытия,ЭкспортныйМетод,ВнешнийИсточник", ВыборкаДетали.ИмяСобытия, 
																							ВыборкаДетали.ЭкспортныйМетод, 
																							ВыборкаДетали.ВнешнийИсточник));
			
		КонецЦикла;
		
		гхб_ОбщегоНазначенияСервер.ПолучитьЗаписатьВсеДанныеПоНСИПоБазеХолдинга(Выборка.БазаХолдинга, мЭксМетоды, ЧитатьТаблицыИзменений);
		
	КонецЦикла;

КонецПроцедуры

Функция ОчиститьТаблицыИзмененийПоУзлуОбменаГХБ2(мМетаданные, БазаХолдинга, ВнешнийИсточник) Экспорт 

	стJSON = Новый Структура;
	стJSON.Вставить("jsonrpc", "2.0");
	стJSON.Вставить("method", "УдалитьРегистрациюПоУзлуГХБ2");
	
	стParams = Новый Структура;
	стParams.Вставить("МетаданныеДляЧистки", мМетаданные);
	стJSON.Вставить("params", стParams);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, стJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(СокрЛП(ВнешнийИсточник.Сервер),
												,
												СокрЛП(ВнешнийИсточник.Пользователь),
												СокрЛП(ВнешнийИсточник.Пароль),
												,
												30);
		ЗапросHTTP = Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса = ВнешнийИсточник.АдресРесурса;
		ЗапросHTTP.Заголовки.Вставить ("content-type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = Соединение.POST(ЗапросHTTP);
		
		Если Результат.КодСостояния = 200 Тогда
			
			стрJSON = Результат.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(стрJSON);
			стОтвет = ПрочитатьJSON(ЧтениеJSON, Ложь);
			
			Если стОтвет.Свойство("result") Тогда
				Возврат Новый Структура("ОбменПрошел,Результат", Истина, стОтвет);
			ИначеЕсли стОтвет.Свойство("error") Тогда
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, " Ошибка в базе " + БазаХолдинга + ": " + стОтвет.error.message);
			Иначе// Это на всякий случай, если структура ответа будет переделываться.
				Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, " Неизвестная структура ответа из " + БазаХолдинга);
			КонецЕсли;
		
		Иначе
			Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "База " + БазаХолдинга + " КодСостояния = " + Результат.КодСостояния);
		КонецЕсли;
	
	Исключение
		Возврат Новый Структура("ОбменПрошел,ТекстОшибки", Ложь, "База " + БазаХолдинга + " " + ОписаниеОшибки());
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область УдалениеНеатуальныхДанных

#Область УдалениеНеатуальныхДанныхПоШтатномуРасписанию

Процедура УдалитьНеактуальныеЗаписиПоШтатномуРасписанию(БазаХолдинга) Экспорт

	тзДанные = ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга(БазаХолдинга);
	
	Если тзДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.гхб_ШтатноеРасписаниеБазХолдинга.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.БазаХолдинга.Установить(БазаХолдинга);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.ПодразделениеОрганизации.Установить(Выборка.ПодразделениеОрганизации);
		Набор.Отбор.Позиция.Установить(Выборка.Позиция);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 1 Тогда
			
			Набор.Очистить();
			Попытка
				Набор.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("ОчисткаПоШтатномуРасписаниюДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Период КАК Период,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	таб.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.КоличествоСтавок КАК КоличествоСтавок,
	|	таб.КритичнаяПозиция КАК КритичнаяПозиция,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	таб.УровеньДолжности КАК УровеньДолжности,
	|	таб.ПризнакПозиции КАК ПризнакПозиции
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втДанные.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.КоличествоСтавок КАК КоличествоСтавок,
	|	втДанные.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втДанные.УровеньДолжности КАК УровеньДолжности,
	|	втДанные.ПризнакПозиции КАК ПризнакПозиции,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК ОрганизацияguidБХ,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга КАК ПодразделениеОрганизацииguidБХ,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга КАК ПозицияguidБХ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.ПодразделениеОрганизацииguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ШтатноеРасписаниеБазХолдинга.Период КАК Период,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Организация КАК Организация,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	гхб_ШтатноеРасписаниеБазХолдинга.Позиция КАК Позиция,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КоличествоСтавок КАК КоличествоСтавок,
	|	гхб_ШтатноеРасписаниеБазХолдинга.КритичнаяПозиция КАК КритичнаяПозиция,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	гхб_ШтатноеРасписаниеБазХолдинга.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	гхб_ШтатноеРасписаниеБазХолдинга.УровеньДолжности КАК УровеньДолжности,
	|	гхб_ШтатноеРасписаниеБазХолдинга.ПризнакПозиции КАК ПризнакПозиции
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга КАК гхб_ШтатноеРасписаниеБазХолдинга
	|		ПО втКрайняя.Период = гхб_ШтатноеРасписаниеБазХолдинга.Период
	|			И втКрайняя.ОрганизацияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Организация
	|			И втКрайняя.ПодразделениеСсылка = гхб_ШтатноеРасписаниеБазХолдинга.ПодразделениеОрганизации
	|			И втКрайняя.ПозицияСсылка = гхб_ШтатноеРасписаниеБазХолдинга.Позиция
	|			И (гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втКрайняя.Период ЕСТЬ NULL
	|	И гхб_ШтатноеРасписаниеБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБШтатноеРасписание()

Функция ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга(БазаХолдинга)

	стШтатное = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
																				"ПолучитьДанныеПоШтатномуРасписаниюДляСверки", 
																				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																				Ложь);
	Если Не стШтатное.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеДанныхПоШтатномуРасписаниюДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзШтатное = Новый ТаблицаЗначений;
	тзШтатное.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	тзШтатное.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("ПодразделениеОрганизацииguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	тзШтатное.Колонки.Добавить("КритичнаяПозиция", Новый ОписаниеТипов("Булево"));
	тзШтатное.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("БюджетныйКодПозицииРуководителя", ОписаниеТиповС);
	тзШтатное.Колонки.Добавить("УровеньДолжности", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_УровниДолжностей"));
	тзШтатное.Колонки.Добавить("ПризнакПозиции", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ПризнакиПозиций"));
	
	соотУровеньДолжности = Новый Соответствие;
	соотУровеньДолжности.Вставить("N", Перечисления.гхб_УровниДолжностей.N);
	соотУровеньДолжности.Вставить("N-1", Перечисления.гхб_УровниДолжностей.N1);
	соотУровеньДолжности.Вставить("N-2", Перечисления.гхб_УровниДолжностей.N2);
	соотУровеньДолжности.Вставить("N-3", Перечисления.гхб_УровниДолжностей.N3);
	соотУровеньДолжности.Вставить("N-4", Перечисления.гхб_УровниДолжностей.N4);
	соотУровеньДолжности.Вставить("N-5", Перечисления.гхб_УровниДолжностей.N5);
	соотУровеньДолжности.Вставить("N-6", Перечисления.гхб_УровниДолжностей.N6);
	соотУровеньДолжности.Вставить("N-7", Перечисления.гхб_УровниДолжностей.N7);
	
	соотПризнакПозиции = Новый Соответствие;
	соотПризнакПозиции.Вставить("Керівник", Перечисления.гхб_ПризнакиПозиций.Руководитель);
	соотПризнакПозиции.Вставить("Співробітник", Перечисления.гхб_ПризнакиПозиций.Сотрудник);
	
	Для каждого СтрокаДолжность Из стШтатное.Результат.result.Данные Цикл
		
		новСтр = тзШтатное.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаДолжность);
		
		новСтр.КритичнаяПозиция = ?(СтрокаДолжность.КритичнаяПозиция = "Да", Истина, Ложь);
		новСтр.УровеньДолжности = соотУровеньДолжности.Получить(СтрокаДолжность.УровеньДолжности);
		новСтр.ПризнакПозиции = соотПризнакПозиции.Получить(СтрокаДолжность.ПризнакПозиции);
		
		новСтр.Период = Дата(Сред(СтрокаДолжность.Период, 1, 4), 
										Сред(СтрокаДолжность.Период, 6, 2),
										Сред(СтрокаДолжность.Период, 9, 2));
		
	КонецЦикла;
	
	Возврат тзШтатное;
	
КонецФункции // ПолучитьДанныеПоШтатномуРасписаниюСотрудниковБазХолдинга()

#КонецОбласти

#Область УдалениеНеатуальныхДанныхПоСостояниюСотрудников

Процедура УдалитьНеактуальныеЗаписиПоСостояниюСотрудниковОрганизаций(БазаХолдинга) Экспорт

	тзДанные = ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга(БазаХолдинга);
	
	Если тзДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБСостоянияРаботниковОрганизации();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.гхб_СостояниеРаботниковОрганизаций.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.БазаХолдинга.Установить(БазаХолдинга);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Набор.Прочитать();
			
		Если Набор.Количество() = 1 Тогда
			
			Набор.Очистить();
			Попытка
				Набор.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("ОчисткаСостоянийРаботниковДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗапросаНетДанныхРИБСостоянияРаботниковОрганизации()

	Текст =
	"ВЫБРАТЬ
	|	Таб.Период КАК Период,
	|	Таб.Организация КАК Организация,
	|	Таб.Организацияguid КАК Организацияguid,
	|	Таб.Сотрудник КАК Сотрудник,
	|	Таб.Сотрудникguid КАК Сотрудникguid,
	|	Таб.Состояние КАК Состояние,
	|	Таб.СостояниеЗавершения КАК СостояниеЗавершения,
	|	Таб.ПериодЗавершения КАК ПериодЗавершения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.Состояние КАК Состояние,
	|	втДанные.СостояниеЗавершения КАК СостояниеЗавершения,
	|	втДанные.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка
	|ПОМЕСТИТЬ втСоСсылками
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_СостояниеРаботниковОрганизаций.Период КАК Период,
	|	гхб_СостояниеРаботниковОрганизаций.Организация КАК Организация,
	|	гхб_СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	гхб_СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	гхб_СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершения,
	|	гхб_СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга КАК Организацияguid,
	|	""ГХБ 2.0"" КАК ТипДанных,
	|	гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга КАК Сотрудникguid
	|ИЗ
	|	РегистрСведений.гхб_СостояниеРаботниковОрганизаций КАК гхб_СостояниеРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоСсылками КАК втСоСсылками
	|		ПО гхб_СостояниеРаботниковОрганизаций.Период = втСоСсылками.Период
	|			И гхб_СостояниеРаботниковОрганизаций.Организация = втСоСсылками.ОрганизацияСсылка
	|			И гхб_СостояниеРаботниковОрганизаций.Сотрудник = втСоСсылками.СотрудникСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО гхб_СостояниеРаботниковОрганизаций.Организация = гхб_ОрганизацииБазХолдинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО гхб_СостояниеРаботниковОрганизаций.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка
	|ГДЕ
	|	втСоСсылками.Период ЕСТЬ NULL
	|	И гхб_СостояниеРаботниковОрганизаций.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;
	
КонецФункции // ЗаполнитьДанныеДляСоздания()

Функция ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга(БазаХолдинга)

	стСостояния = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
																						"ПолучитьСостояниеРаботниковБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стСостояния.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеСостоянийРаботниковДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ОписаниеТиповЧ = ОбщегоНазначения.ОписаниеТипаЧисло(10);
		
	тзДанныеСостояния = Новый ТаблицаЗначений;
	тзДанныеСостояния.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	тзДанныеСостояния.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Организацияguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Сотрудникguid", ОписаниеТиповС);
	тзДанныеСостояния.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСостояния.Колонки.Добавить("СостояниеЗавершения", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_СостоянияРаботникаОрганизации"));
	тзДанныеСостояния.Колонки.Добавить("ПериодЗавершения", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСостояние Из стСостояния.Результат.result.Данные Цикл
		
		новСтр = тзДанныеСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаСостояние);
		
		Попытка
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСостояние.Состояние];
		Исключение
			новСтр.Состояние = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		Попытка
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации[СтрокаСостояние.СостояниеЗавершения];
		Исключение
			новСтр.СостояниеЗавершения = Перечисления.гхб_СостоянияРаботникаОрганизации.ПустаяСсылка();
		КонецПопытки;
		
		новСтр.Период = Дата(Сред(СтрокаСостояние.Период, 1, 4), 
										Сред(СтрокаСостояние.Период, 6, 2),
										Сред(СтрокаСостояние.Период, 9, 2));
		новСтр.ПериодЗавершения = Дата(Сред(СтрокаСостояние.ПериодЗавершения, 1, 4), 
										Сред(СтрокаСостояние.ПериодЗавершения, 6, 2),
										Сред(СтрокаСостояние.ПериодЗавершения, 9, 2));
		
	КонецЦикла;
	
	Возврат тзДанныеСостояния;
	
КонецФункции // ПолучитьДанныеПоСостояниямСотрудниковБазХолдинга()

#КонецОбласти

#Область УдалениеНеатуальныхДанныхПоКадровымДанным

Процедура УдалитьНеактуальныеЗаписиПоКадровымДанным(БазаХолдинга) Экспорт

	тзДанные = ПолучитьКадровыеДанныеСотрудниковБазХолдинга(БазаХолдинга);
	
	Если тзДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБКадровыеДанные();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.гхб_РаботникиОрганизацийБазХолдинга.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.БазаХолдинга.Установить(БазаХолдинга);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Набор.Прочитать();
			
		Если Набор.Количество() = 1 Тогда
			
			Набор.Очистить();
			Попытка
				Набор.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("ОчисткаКадровыхДанныхРаботниковДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКадровыеДанныеСотрудниковБазХолдинга(БазаХолдинга)

	стКадровыеДанные = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
																						"ПолучитьКадровыеДанныеБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стКадровыеДанные.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеКадровыхДанныхРаботниковДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, стКадровыеДанные.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКадровыеДанные = Новый ТаблицаЗначений;
	тзКадровыеДанные.Колонки.Добавить("Сотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidСотрудник", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidФизЛицо", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Должность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidДолжность", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidПодразделениеОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ПричинаИзмененияСостояния", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ПричиныИзмененияСостояния"));
	тзКадровыеДанные.Колонки.Добавить("ВидЗанятости", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Организация", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidОрганизации", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКод", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДивизионКодРодителя", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("БюджетныйКодПозиции", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ИНН", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позиция", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("Позицияguid", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("guidЦФО", ОписаниеТиповС);
	тзКадровыеДанные.Колонки.Добавить("ДатаОкончанияСрочногоТрудовогоДоговора", Новый ОписаниеТипов("Дата"));
	тзКадровыеДанные.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	тзКадровыеДанные.Колонки.Добавить("ДатаЗаписиБазыГХБ", Новый ОписаниеТипов("Дата"));
	
	соотПричина = Новый Соответствие;
	соотПричина.Вставить("Прием на работу", Перечисления.гхб_ПричиныИзмененияСостояния.ПриемНаРаботу);
	соотПричина.Вставить("Перемещение", Перечисления.гхб_ПричиныИзмененияСостояния.Перемещение);
	соотПричина.Вставить("Увольнение", Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение);
	соотПричина.Вставить("Декрет", Перечисления.гхб_ПричиныИзмененияСостояния.Декрет);
	соотПричина.Вставить("Возврат из декрет", Перечисления.гхб_ПричиныИзмененияСостояния.ВозвратИзДекрет);
	
	Для каждого СтрокаКадровыеДанные Из стКадровыеДанные.Результат.result.Данные Цикл
		
		новСтр = тзКадровыеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКадровыеДанные);
		новСтр.ПричинаИзмененияСостояния = соотПричина.Получить(СтрокаКадровыеДанные.ПричинаИзмененияСостояния);
		
		новСтр.ДатаОкончанияСрочногоТрудовогоДоговора = Дата(Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 1, 4), 
															Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 6, 2),
															Сред(СтрокаКадровыеДанные.ДатаОкончанияСрочногоТрудовогоДоговора, 9, 2));
		новСтр.ДатаЗаписиБазыГХБ = Дата(Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 1, 4), 
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 6, 2),
										Сред(СтрокаКадровыеДанные.ДатаЗаписиБазыГХБ, 9, 2));
		
		Если новСтр.ПричинаИзмененияСостояния = Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение Тогда
			новСтр.ДатаУвольнения = НачалоДня(НачалоДня(новСтр.ДатаЗаписиБазыГХБ) - 1);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат тзКадровыеДанные;
	
КонецФункции // ПолучитьКадровыеДанныеСотрудниковБазХолдинга()

Функция ПолучитьТекстЗапросаНетДанныхРИБКадровыеДанные()
	
	Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК СотрудникТекст,
	|	таб.guidСотрудник КАК guidСотрудник,
	|	таб.Должность КАК ДолжностьТекст,
	|	таб.guidДолжность КАК guidДолжность,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизацииТекст,
	|	таб.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	таб.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.Организация КАК ОрганизацияТекст,
	|	таб.guidОрганизации КАК guidОрганизации,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.ИНН КАК ИНН,
	|	таб.Позиция КАК Позиция,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.ДатаУвольнения КАК ДатаУвольнения,
	|	таб.ДатаЗаписиБазыГХБ КАК Период
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.СотрудникТекст КАК СотрудникТекст,
	|	втДанные.guidСотрудник КАК guidСотрудник,
	|	втДанные.ДолжностьТекст КАК ДолжностьТекст,
	|	втДанные.guidДолжность КАК guidДолжность,
	|	втДанные.ПодразделениеОрганизацииТекст КАК ПодразделениеОрганизацииТекст,
	|	втДанные.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	втДанные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.ОрганизацияТекст КАК ОрганизацияТекст,
	|	втДанные.guidОрганизации КАК guidОрганизации,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.Период КАК Период,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	втДанные.ДатаУвольнения КАК ДатаУвольнения
	|ПОМЕСТИТЬ втСводная
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guidСотрудник = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизации = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_РаботникиОрганизацийБазХолдинга.Организация КАК Организация,
	|	гхб_РаботникиОрганизацийБазХолдинга.Сотрудник КАК Сотрудник,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	гхб_РаботникиОрганизацийБазХолдинга.Должность КАК Должность,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	гхб_РаботникиОрганизацийБазХолдинга.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	гхб_РаботникиОрганизацийБазХолдинга.Дивизион КАК Дивизион,
	|	гхб_РаботникиОрганизацийБазХолдинга.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	гхб_РаботникиОрганизацийБазХолдинга.ГруппаДивизиона КАК ГруппаДивизиона,
	|	гхб_РаботникиОрганизацийБазХолдинга.ДатаУвольнения КАК ДатаУвольнения,
	|	гхб_РаботникиОрганизацийБазХолдинга.Период КАК Период,
	|	гхб_РаботникиОрганизацийБазХолдинга.ЦФО КАК ЦФО
	|ИЗ
	|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга КАК гхб_РаботникиОрганизацийБазХолдинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСводная КАК втСводная
	|		ПО гхб_РаботникиОрганизацийБазХолдинга.Период = втСводная.Период
	|			И гхб_РаботникиОрганизацийБазХолдинга.Организация = втСводная.ОрганизацияСсылка
	|			И гхб_РаботникиОрганизацийБазХолдинга.Сотрудник = втСводная.СотрудникСсылка
	|ГДЕ
	|	втСводная.Период ЕСТЬ NULL
	|	И гхб_РаботникиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга";
	
	Возврат Текст;
	
КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБКадровыеДанные()

#КонецОбласти

#Область УдалениеНеатуальныхДанныхПоКИ

Процедура УдалитьНеактуальныеЗаписиПоКонтактнойИнформации(БазаХолдинга) Экспорт

	тзДанные = ПолучитьДанныеПоКИБазХолдинга(БазаХолдинга);
	
	Если тзДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанные);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = ПолучитьТекстЗапросаНетДанныхРИБ_КИ();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.гхб_КонтактнаяИнформацияБазХолдинга.СоздатьНаборЗаписей();
		Набор.Отбор.БазаХолдинга.Установить(БазаХолдинга);
		Набор.Отбор.Объект.Установить(Выборка.Объект);
		Набор.Отбор.Тип.Установить(Выборка.Тип);
		Набор.Отбор.Вид.Установить(Выборка.Вид);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 1 Тогда
			
			Набор.Очистить();
			Попытка
				Набор.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("ОчисткаКИДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеПоКИБазХолдинга(БазаХолдинга)

	стКИ = гхб_ОбщегоНазначенияСервер.ПолучитьДанныеПоЭкспортномуМетоду(БазаХолдинга, 
																						"ПолучитьДанныеПоКонтактнойИнформацииИзБазХолдингаДляСверки", 
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "ВнешнийИсточникПоУмолчанию"),
																							Ложь);
	Если Не стКИ.ОбменПрошел Тогда
		
		ЗаписьЖурналаРегистрации("ПолучениеКИДляУдаленияНеактуальныхЗаписей", УровеньЖурналаРегистрации.Ошибка,,, стКИ.ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповС = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	тзКонтактныеДанные = Новый ТаблицаЗначений;
	тзКонтактныеДанные.Колонки.Добавить("Представление", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Тип", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("Вид", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("guid", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("ФизЛицо", ОписаниеТиповС);
	тзКонтактныеДанные.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	тзКонтактныеДанные.Колонки.Добавить("ВидСсылка", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	
	соотВид = Новый Соответствие;
	соотВид.Вставить("Внутренний телефон", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефон);
	соотВид.Вставить("Служебный адрес электронной почты пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	соотВид.Вставить("Мобильный телефон сотрудника", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Телефон мобільный", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Служебный телефон пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя);
	соотВид.Вставить("Телефон физ. лица", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	соотВид.Вставить("Адрес по прописке", Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизЛица);
	соотВид.Вставить("Адрес проживания", Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица);
	соотВид.Вставить("Адрес информирования", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица);
	
	Для каждого СтрокаКонтактныеДанные Из стКИ.Результат.result.Данные Цикл
		
		новСтр = тзКонтактныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, СтрокаКонтактныеДанные);
		новСтр.ТипСсылка = Перечисления.ТипыКонтактнойИнформации[СтрокаКонтактныеДанные.ТипИмя];
		новСтр.ВидСсылка = соотВид.Получить(СтрокаКонтактныеДанные.Вид);
		
	КонецЦикла;
	
	Возврат тзКонтактныеДанные;
	
КонецФункции // ПолучитьДанныеПоКИБазХолдинга()

Функция ПолучитьТекстЗапросаНетДанныхРИБ_КИ()

	Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Тип КАК Тип,
	|	таб.Вид КАК Вид,
	|	таб.ТипСсылка КАК ТипСсылка,
	|	таб.ВидСсылка КАК ВидСсылка,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Тип КАК Тип,
	|	втДанные.Вид КАК Вид,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ТипСсылка КАК ТипСсылка,
	|	втДанные.ВидСсылка КАК ВидСсылка,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ГХБ 2.0"" КАК ТипДанных,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Тип КАК Тип,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК Вид,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК Представление
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|		ПРАВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ПО втКрайняя.ТипСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Тип
	|			И втКрайняя.ВидСсылка = гхб_КонтактнаяИнформацияБазХолдинга.Вид
	|			И втКрайняя.Объект = гхб_КонтактнаяИнформацияБазХолдинга.Объект
	|ГДЕ
	|	гхб_КонтактнаяИнформацияБазХолдинга.БазаХолдинга = &БазаХолдинга
	|	И втКрайняя.Объект ЕСТЬ NULL
	|	И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
	
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаНетДанныхРИБ_КИ()

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеПолученныхДанныхИзБаз

Функция ЗаписатьРедактироватьДанныеПоШтатномуРасписанию(тзШтатное, БазаХолдинга)

	тзШтатноеКопия = тзШтатное.Скопировать();
	тзШтатноеКопия.Свернуть("Позиция,Позицияguid");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", тзШтатноеКопия);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Позиция КАК Позиция,
	|	Таб.Позицияguid КАК Позицияguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &База)
	|ГДЕ
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка ЕСТЬ NULL
	|	И втДанные.Позиция <> """"
	|	И втДанные.Позицияguid <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	БезОшибок = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Позиция) Тогда
			
			Если Не СоздатьПозициюШтатногоРасписания(Выборка.Позиция, Выборка.Позицияguid, БазаХолдинга) Тогда
				БезОшибок = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", тзШтатное);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Период КАК Период,
	|	Таб.Организация КАК Организация,
	|	Таб.Организацияguid КАК Организацияguid,
	|	Таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Таб.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	Таб.Позиция КАК Позиция,
	|	Таб.Позицияguid КАК Позицияguid,
	|	Таб.КоличествоСтавок КАК КоличествоСтавок,
	|	Таб.КритичнаяПозиция КАК КритичнаяПозиция,
	|	Таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	Таб.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	Таб.УровеньДолжности КАК УровеньДолжности,
	|	Таб.ПризнакПозиции КАК ПризнакПозиции
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Период КАК Период,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	втДанные.ПодразделениеОрганизацииguid КАК ПодразделениеОрганизацииguid,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	втДанные.КоличествоСтавок КАК КоличествоСтавок,
	|	втДанные.КритичнаяПозиция КАК КритичнаяПозиция,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
	|	втДанные.УровеньДолжности КАК УровеньДолжности,
	|	втДанные.ПризнакПозиции КАК ПризнакПозиции,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеСсылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &База)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.ПодразделениеОрганизацииguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &База)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &База)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	соотУровеньДолжности = Новый Соответствие;
	соотУровеньДолжности.Вставить("N", Перечисления.гхб_УровниДолжностей.N);
	соотУровеньДолжности.Вставить("N-1", Перечисления.гхб_УровниДолжностей.N1);
	соотУровеньДолжности.Вставить("N-2", Перечисления.гхб_УровниДолжностей.N2);
	соотУровеньДолжности.Вставить("N-3", Перечисления.гхб_УровниДолжностей.N3);
	соотУровеньДолжности.Вставить("N-4", Перечисления.гхб_УровниДолжностей.N4);
	соотУровеньДолжности.Вставить("N-5", Перечисления.гхб_УровниДолжностей.N5);
	соотУровеньДолжности.Вставить("N-6", Перечисления.гхб_УровниДолжностей.N6);
	соотУровеньДолжности.Вставить("N-7", Перечисления.гхб_УровниДолжностей.N7);
	
	соотПризнакПозиции = Новый Соответствие;
	соотПризнакПозиции.Вставить("Руководитель", Перечисления.гхб_ПризнакиПозиций.Руководитель);
	соотПризнакПозиции.Вставить("Сотрудник", Перечисления.гхб_ПризнакиПозиций.Сотрудник);
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.гхб_ШтатноеРасписаниеБазХолдинга.СоздатьМенеджерЗаписи();
		Запись.Период = Выборка.Период;
		Запись.БазаХолдинга = БазаХолдинга;
		Запись.Организация = Выборка.ОрганизацияСсылка;
		Запись.ПодразделениеОрганизации = Выборка.ПодразделениеСсылка;
		Запись.Позиция = Выборка.ПозицияСсылка;
		Запись.КоличествоСтавок = Выборка.КоличествоСтавок;
		Запись.КритичнаяПозиция = Выборка.КритичнаяПозиция;
		Запись.БюджетныйКодПозиции = Выборка.БюджетныйКодПозиции;
		Запись.БюджетныйКодПозицииРуководителя = Выборка.БюджетныйКодПозицииРуководителя;
		Запись.ПризнакПозиции = соотПризнакПозиции.Получить(Выборка.ПризнакПозиции);
		Запись.УровеньДолжности = соотУровеньДолжности.Получить(Выборка.УровеньДолжности);
		
		Попытка
			Запись.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации("ПолучениеДанныхПоШтатномуРасписаниюИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			БезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат БезОшибок;

КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоДолжностямБазХолдинга(тзДанныеДолжности, БазаХолдинга, РодительБазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.Изменение КАК Изменение,
	|	таб.АнглийскоеНаименование КАК АнглийскоеНаименование,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.АнглийскоеНаименование КАК АнглийскоеНаименование
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.guid КАК guid,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Ссылка,
	|	втДанные.АнглийскоеНаименование КАК АнглийскоеНаименование
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ДолжностиОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL
	|	И (втДанные.Наименование <> гхб_ДолжностиОрганизацийБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ДолжностиОрганизацийБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.АнглийскоеНаименование <> гхб_ДолжностиОрганизацийБазХолдинга.АнглийскоеНаименование)";
	
	Запрос.УстановитьПараметр("таб", тзДанныеДолжности);
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовые = резПакет[1].Выбрать();
	ВыборкаСуществующие = резПакет[2].Выбрать();
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
		
		Если Не СоздатьРедактироватьДолжностьБазыХолдинга(ВыборкаНовые.Наименование,
															ВыборкаНовые.АнглийскоеНаименование,
															ВыборкаНовые.guid, 
															БазаХолдинга, 
															РодительБазаХолдинга) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		Если Не СоздатьРедактироватьДолжностьБазыХолдинга(ВыборкаСуществующие.Наименование,
													ВыборкаНовые.АнглийскоеНаименование,
													ВыборкаСуществующие.guid, 
													БазаХолдинга, 
													РодительБазаХолдинга,
													ВыборкаСуществующие.Ссылка,
													ВыборкаСуществующие.ПометкаУдаления) Тогда
		
			БезОшибок = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;

КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоПодразделениямБазХолдинга(тзДанныеПодразделения, БазаХолдинга, РодительБазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.Изменение КАК Изменение,
	|	таб.guidОрганизация КАК guidОрганизация,
	|	таб.НаименованиеОрганизация КАК НаименованиеОрганизация,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.ДатаС КАК ДатаС,
	|	таб.УровеньПодразделения КАК УровеньПодразделения,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.guidОрганизация КАК guidОрганизация,
	|	втДанные.НаименованиеОрганизация КАК НаименованиеОрганизация,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.УровеньПодразделения КАК УровеньПодразделения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|			И втДанные.guidОрганизация = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|ГДЕ
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК Ссылка,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.guidОрганизация КАК guidОрганизация,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.УровеньПодразделения КАК УровеньПодразделения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизация = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка ЕСТЬ NULL
	|	И (втДанные.Наименование <> гхб_ПодразделенияОрганизацийБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ПодразделенияОрганизацийБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.ДатаС <> гхб_ПодразделенияОрганизацийБазХолдинга.ДатаС
	|			ИЛИ втДанные.ДатаПо <> гхб_ПодразделенияОрганизацийБазХолдинга.ДатаПо
	|			ИЛИ гхб_ПодразделенияОрганизацийБазХолдинга.ОрганизацияБазХолдинга <> гхб_ОрганизацииБазХолдинга.Ссылка)";
	
	Запрос.УстановитьПараметр("таб", тзДанныеПодразделения);
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовые = резПакет[1].Выбрать();
	ВыборкаСуществующие = резПакет[2].Выбрать();
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
		
		Если Не СоздатьРедактироватьПодразделениеБазыХолдинга(ВыборкаНовые.Наименование, 
														ВыборкаНовые.guid, 
														БазаХолдинга, 
														РодительБазаХолдинга,
														ВыборкаНовые.Организация,
														ВыборкаНовые.ДатаС,
														ВыборкаНовые.ДатаПо,
														ВыборкаНовые.УровеньПодразделения) Тогда
			
			БезОшибок = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		Если Не СоздатьРедактироватьПодразделениеБазыХолдинга(ВыборкаСуществующие.Наименование, 
													ВыборкаСуществующие.guid, 
													БазаХолдинга, 
													РодительБазаХолдинга,
													ВыборкаСуществующие.Организация,
													ВыборкаСуществующие.ДатаС,
													ВыборкаСуществующие.ДатаПо,
													ВыборкаСуществующие.УровеньПодразделения,
													ВыборкаСуществующие.Ссылка,
													ВыборкаСуществующие.ПометкаУдаления) Тогда
		
			БезОшибок = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоСотрудникамГПХБазХолдинга(тзДанныеСотрудники, 
																		БазаХолдинга, 
																		РодительБазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ФизЛицоguid КАК ФизЛицоguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ФизЛицоguid КАК ФизЛицоguid,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФизЛицоguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_СотрудникиБазХолдинга.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанные.ФизЛицо,
	|	втДанные.Сотрудник,
	|	втДанные.ФизЛицоguid,
	|	втДанные.Сотрудникguid,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка";
	
	Запрос.УстановитьПараметр("таб", тзДанныеСотрудники);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	
	ВыборкаНовые = Запрос.Выполнить().Выбрать();
	
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
	
		СотрСсылка = СоздатьРедактироватьСотрудникаГПХБазыХолдинга(ВыборкаНовые.Сотрудник,
															ВыборкаНовые.Сотрудникguid, 
															БазаХолдинга, 
															РодительБазаХолдинга,
															ВыборкаНовые.ФизЛицоСсылка);
		Если Не ЗначениеЗаполнено(СотрСсылка) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ФизЛицоguid КАК ФизЛицоguid,
	|	таб.ДокументСсылка КАК ДокументСсылка,
	|	таб.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	таб.ДатаНачала КАК ДатаНачала,
	|	таб.ДатаОкончания КАК ДатаОкончания,
	|	таб.Изменение КАК Изменение
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ФизЛицоguid КАК ФизЛицоguid,
	|	втДанные.ДокументСсылка КАК ДокументСсылка,
	|	втДанные.ДокументСсылкаguid КАК ДокументСсылкаguid,
	|	втДанные.ДатаНачала КАК ДатаНачала,
	|	втДанные.ДатаОкончания КАК ДатаОкончания,
	|	втДанные.Изменение КАК Изменение,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоСсылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Ссылка,
	|	гхб_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка КАК ДокументДоговор,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФизЛицоguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	|		ПО втДанные.ДокументСсылкаguid = гхб_ДоговорНаВыполнениеРаботСФизЛицом.GUIDБазыХолдинга
	|			И (гхб_ДоговорНаВыполнениеРаботСФизЛицом.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)";
	
	Запрос.УстановитьПараметр("таб", тзДанныеСотрудники);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	
	ВыборкаСуществующие = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		СотрСсылка = СоздатьРедактироватьСотрудникаГПХБазыХолдинга(ВыборкаСуществующие.Сотрудник,
																ВыборкаСуществующие.Сотрудникguid, 
																БазаХолдинга, 
																РодительБазаХолдинга,
																ВыборкаСуществующие.ФизЛицоСсылка,
																ВыборкаСуществующие.Ссылка);
		Если Не ЗначениеЗаполнено(СотрСсылка) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаСуществующие.ДокументДоговор) 
				И ЗначениеЗаполнено(СотрСсылка) 
				И ЗначениеЗаполнено(ВыборкаСуществующие.ОрганизацияСсылка) Тогда
				
			Если Не СоздатьДокументДоговорСФизЛицом(СотрСсылка,
											БазаХолдинга,
											ВыборкаСуществующие.ДокументСсылкаguid,
											ВыборкаСуществующие.ОрганизацияСсылка,
											ВыборкаСуществующие.ДатаНачала,
											ВыборкаСуществующие.ДатаОкончания) Тогда
				
				БезОшибок = Ложь;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоФизЛицамТекущейБазыИФизЛицБазХолдинга(тзДанныеФизЛиц, 
																					БазаХолдинга, 
																					РодительБазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ИНН КАК ИНН,
	|	таб.guid КАК guid,
	|	таб.ДоменноеИмя КАК ДоменноеИмя,
	|	таб.Пол КАК Пол,
	|	таб.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втДанные.Наименование) КАК Наименование,
	|	втДанные.ИНН КАК ИНН
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО втДанные.ИНН = гхб_ФизическиеЛица.ИНН
	|ГДЕ
	|	гхб_ФизическиеЛица.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанные.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.guid КАК guid,
	|	гхб_ФизическиеЛица.Ссылка КАК ФизЛицоТекущейБазы,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицоБХ,
	|	втДанные.ДоменноеИмя КАК ДоменноеИмя,
	|	втДанные.Пол КАК Пол,
	|	втДанные.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО втДанные.ИНН = гхб_ФизическиеЛица.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ФизическиеЛица.Ссылка ЕСТЬ NULL
	|	И гхб_ФизическиеЛицаБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДанныеФизЛиц);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	резПакет = Запрос.ВыполнитьПакет();
	
	Выборка = резПакет[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьФизЛицо(Выборка.Наименование, Выборка.ИНН);
	КонецЦикла;
	
	Выборка = резПакет[2].Выбрать();
	
	БезОшибок = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьРедактироватьФизЛицоБазыХолдинга(Выборка.Наименование, 
														Выборка.ИНН, 
														Выборка.guid, 
														БазаХолдинга, 
														Выборка.ФизЛицоТекущейБазы, 
														РодительБазаХолдинга,
														,
														,
														Выборка.ДоменноеИмя,
														Выборка.Пол,
														Выборка.ДатаРождения) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ИНН КАК ИНН,
	|	таб.guid КАК guid,
	|	таб.ДоменноеИмя КАК ДоменноеИмя,
	|	таб.Пол КАК Пол,
	|	таб.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.guid КАК guid,
	|	гхб_ФизическиеЛица.Ссылка КАК ФизЛицоТекущейБазы,
	|	втДанные.ДоменноеИмя КАК ДоменноеИмя,
	|	втДанные.Пол КАК Пол,
	|	втДанные.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|		ПО втДанные.ИНН = гхб_ФизическиеЛица.ИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ФизическиеЛица.Ссылка ЕСТЬ NULL
	|	И гхб_ФизическиеЛицаБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДанныеФизЛиц);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьРедактироватьФизЛицоБазыХолдинга(Выборка.Наименование, 
														Выборка.ИНН, 
														Выборка.guid, 
														БазаХолдинга, 
														Выборка.ФизЛицоТекущейБазы, 
														РодительБазаХолдинга,
														,
														,
														Выборка.ДоменноеИмя,
														Выборка.Пол,
														Выборка.ДатаРождения) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ИНН КАК ИНН,
	|	таб.Изменение КАК Изменение,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid,
	|	таб.ДоменноеИмя КАК ДоменноеИмя,
	|	таб.Пол КАК Пол,
	|	таб.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.guid КАК guid,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Ссылка,
	|	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы КАК ФизЛицоТекущейБазы,
	|	втДанные.ДоменноеИмя КАК ДоменноеИмя,
	|	втДанные.Пол КАК Пол,
	|	втДанные.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ФизическиеЛицаБазХолдинга.Ссылка ЕСТЬ NULL
	|	И (втДанные.Наименование <> гхб_ФизическиеЛицаБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ФизическиеЛицаБазХолдинга.ПометкаУдаления
	|			ИЛИ втДанные.ИНН <> гхб_ФизическиеЛицаБазХолдинга.ИНН
	|			ИЛИ втДанные.ДоменноеИмя <> гхб_ФизическиеЛицаБазХолдинга.ДоменноеИмя)";
	
	Запрос.УстановитьПараметр("таб", тзДанныеФизЛиц);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьРедактироватьФизЛицоБазыХолдинга(Выборка.Наименование, 
												Выборка.ИНН, 
												Выборка.guid, 
												БазаХолдинга, 
												Выборка.ФизЛицоТекущейБазы, 
												РодительБазаХолдинга,
												Выборка.Ссылка,
												Выборка.ПометкаУдаления,
												Выборка.ДоменноеИмя,
												Выборка.Пол,
												Выборка.ДатаРождения) Тогда
		
			БезОшибок = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Процедура ЗаполнитьСоздатьРабочееПомещениеБазХолдинга(тзДанныеРабочееПомещение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.НаименованиеСуществующее КАК НаименованиеСуществующее,
	|	таб.Наименование КАК Наименование,
	|	таб.Корпус КАК Корпус,
	|	таб.Этаж КАК Этаж,
	|	таб.Офис КАК Офис,
	|	таб.ДробнаяЧасть КАК ДробнаяЧасть,
	|	таб.СоздаватьКарточку КАК СоздаватьКарточку,
	|	таб.Дополнительно КАК Дополнительно
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.НаименованиеСуществующее КАК НаименованиеСуществующее,
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.Корпус КАК Корпус,
	|	втДанные.Этаж КАК Этаж,
	|	втДанные.Офис КАК Офис,
	|	втДанные.ДробнаяЧасть КАК ДробнаяЧасть,
	|	втДанные.СоздаватьКарточку КАК СоздаватьКарточку,
	|	втДанные.Дополнительно КАК Дополнительно
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_РабочиеПомещения КАК гхб_РабочиеПомещения
	|		ПО втДанные.Корпус = гхб_РабочиеПомещения.Корпус
	|			И втДанные.Этаж = гхб_РабочиеПомещения.Этаж
	|			И втДанные.Офис = гхб_РабочиеПомещения.Офис
	|			И втДанные.ДробнаяЧасть = гхб_РабочиеПомещения.ДробнаяЧасть
	|ГДЕ
	|	втДанные.СоздаватьКарточку
	|	И гхб_РабочиеПомещения.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДанныеРабочееПомещение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьРабочееПомещениеБазыХолдинга(Выборка.Наименование,
										Выборка.Корпус, 
										Выборка.Этаж, 
										Выборка.Офис,
										Выборка.ДробнаяЧасть,
										Выборка.Дополнительно);
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьСоздатьДанныеПоПользователямБазХолдинга(тзДанныеПользователи, БазаХолдинга, РодительБазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.guid КАК guid,
	|	таб.Изменение КАК Изменение,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guidФЛ КАК guidФЛ
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ПользователиБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	гхб_ПользователиБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ПользователиБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДанныеПользователи);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовые = резПакет[1].Выбрать();
	ВыборкаСуществующие = резПакет[2].Выбрать();
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
		
		Если Не СоздатьРедактироватьПользователяБазыХолдинга(ВыборкаНовые.Наименование,
										ВыборкаНовые.guid, 
										БазаХолдинга, 
										РодительБазаХолдинга,
										ВыборкаНовые.ФизЛицо) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		Если Не СоздатьРедактироватьПользователяБазыХолдинга(ВыборкаСуществующие.Наименование,
										ВыборкаСуществующие.guid, 
										БазаХолдинга, 
										РодительБазаХолдинга,
										ВыборкаСуществующие.ФизЛицо,
										ВыборкаСуществующие.Ссылка,
										ВыборкаСуществующие.ПометкаУдаления) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоСотрудникамБазХолдинга(тзДанныеСотрудники, 
																		БазаХолдинга, 
																		РодительБазаХолдинга,
																		Ссылка = Неопределено,
																		ПометкаУдаления = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ВидДоговора КАК ВидДоговора,
	|	таб.Изменение КАК Изменение,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.Видзанятости КАК Видзанятости,
	|	таб.guid КАК guid,
	|	таб.guidФЛ КАК guidФЛ
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
	|	втДанные.ВидДоговора КАК ВидДоговора,
	|	втДанные.Видзанятости КАК Видзанятости
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_СотрудникиБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid,
	|	втДанные.guidФЛ КАК guidФЛ,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо,
	|	втДанные.ВидДоговора КАК ВидДоговора,
	|	втДанные.Видзанятости КАК Видзанятости,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.Изменение КАК Изменение,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guidФЛ = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_СотрудникиБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДанныеСотрудники);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовые = резПакет[1].Выбрать();
	ВыборкаСуществующие = резПакет[2].Выбрать();
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
		
		Если Не СоздатьРедактироватьСотрудникаБазыХолдинга(ВыборкаНовые.Наименование,
										ВыборкаНовые.guid, 
										БазаХолдинга, 
										РодительБазаХолдинга,
										ВыборкаНовые.ФизЛицо,
										ВыборкаНовые.ВидДоговора,
										ВыборкаНовые.Видзанятости) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		Если Не СоздатьРедактироватьСотрудникаБазыХолдинга(ВыборкаСуществующие.Наименование,
										ВыборкаСуществующие.guid, 
										БазаХолдинга, 
										РодительБазаХолдинга,
										ВыборкаСуществующие.ФизЛицо,
										ВыборкаСуществующие.ВидДоговора,
										ВыборкаСуществующие.Видзанятости,
										ВыборкаСуществующие.Ссылка,
										ВыборкаСуществующие.ПометкаУдаления) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьКадровыеДанныеБазХолдинга(тзКадровыеДанные, БазаХолдинга)
	
	БезОшибок = Истина;
	
	тзКадровыеДанныеКопия = тзКадровыеДанные.Скопировать();
	тзКадровыеДанныеКопия.Свернуть("Позиция,Позицияguid");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", тзКадровыеДанныеКопия);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Позиция КАК Позиция,
	|	Таб.Позицияguid КАК Позицияguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &База)
	|ГДЕ
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьПозициюШтатногоРасписания(Выборка.Позиция, Выборка.Позицияguid, БазаХолдинга) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.guidСотрудник КАК guidСотрудник,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.Должность КАК Должность,
	|	таб.Организация КАК Организация,
	|	таб.guidОрганизации КАК guidОрганизации,
	|	таб.guidДолжность КАК guidДолжность,
	|	таб.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	таб.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	таб.ВидЗанятости КАК ВидЗанятости,
	|	таб.ДивизионКод КАК ДивизионКод,
	|	таб.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	таб.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	таб.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора,
	|	таб.ИНН КАК ИНН,
	|	таб.Позиция КАК Позиция,
	|	таб.ЦФО КАК ЦФО,
	|	таб.guidЦФО КАК guidЦФО,
	|	таб.Позицияguid КАК Позицияguid,
	|	таб.ДатаЗаписиБазыГХБ КАК ДатаЗаписиБазыГХБ,
	|	таб.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Сотрудник КАК СотрудникБХ,
	|	втДанные.guidСотрудник КАК guidСотрудник,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.Должность КАК ДолжностьБХ,
	|	втДанные.guidДолжность КАК guidДолжность,
	|	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизацииБХ,
	|	втДанные.guidПодразделениеОрганизации КАК guidПодразделениеОрганизации,
	|	втДанные.ВидЗанятости КАК ВидЗанятости,
	|	втДанные.ИНН КАК ИНН,
	|	втДанные.ДатаЗаписиБазыГХБ КАК Период,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Должность,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеОрганизации,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Сотрудник,
	|	втДанные.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	втДанные.ДивизионКод КАК ДивизионКод,
	|	втДанные.ДивизионКодРодителя КАК ДивизионКодРодителя,
	|	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
	|	гхб_Дивизионы.Ссылка КАК ГруппаДивизиона,
	|	втДанные.Организация КАК ОрганизацияСтрока,
	|	втДанные.guidОрганизации КАК guidОрганизации,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_ДивизионыРодители.Ссылка КАК Дивизион,
	|	втДанные.Позиция КАК Позиция,
	|	втДанные.Позицияguid КАК Позицияguid,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК ПозицияШтатногоРасписания,
	|	гхб_ЦФО.Ссылка КАК ЦФО,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора КАК ДатаОкончанияСрочногоТрудовогоДоговора
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.guidСотрудник = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|		ПО втДанные.guidДолжность = гхб_ДолжностиОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ДолжностиОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.guidПодразделениеОрганизации = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ПО втДанные.ДивизионКод = гхб_Дивизионы.Код
	|			И втДанные.ДивизионКодРодителя = гхб_Дивизионы.Родитель.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guidОрганизации = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_ДивизионыРодители
	|		ПО втДанные.ДивизионКодРодителя = гхб_ДивизионыРодители.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|		ПО втДанные.Позицияguid = гхб_ПозицииШтатногоРасписанияБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПозицииШтатногоРасписанияБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.guidЦФО = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &БазаХолдинга)
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанные.ПодразделениеОрганизации,
	|	втДанные.guidПодразделениеОрганизации,
	|	втДанные.Должность,
	|	втДанные.ДатаЗаписиБазыГХБ,
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка,
	|	втДанные.ВидЗанятости,
	|	втДанные.Сотрудник,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка,
	|	гхб_СотрудникиБазХолдинга.Ссылка,
	|	втДанные.ПричинаИзмененияСостояния,
	|	втДанные.guidСотрудник,
	|	втДанные.ИНН,
	|	втДанные.ФизЛицо,
	|	втДанные.ДивизионКод,
	|	втДанные.ДивизионКодРодителя,
	|	втДанные.guidДолжность,
	|	втДанные.Позицияguid,
	|	втДанные.БюджетныйКодПозиции,
	|	гхб_Дивизионы.Ссылка,
	|	гхб_ДивизионыРодители.Ссылка,
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка,
	|	втДанные.Позиция,
	|	втДанные.guidОрганизации,
	|	втДанные.Организация,
	|	гхб_ОрганизацииБазХолдинга.Ссылка,
	|	гхб_ЦФО.Ссылка,
	|	втДанные.ДатаОкончанияСрочногоТрудовогоДоговора";
	
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзКадровыеДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	соотПричина = Новый Соответствие;
	соотПричина.Вставить("Прием на работу", Перечисления.гхб_ПричиныИзмененияСостояния.ПриемНаРаботу);
	соотПричина.Вставить("Перемещение", Перечисления.гхб_ПричиныИзмененияСостояния.Перемещение);
	соотПричина.Вставить("Увольнение", Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение);
	соотПричина.Вставить("Декрет", Перечисления.гхб_ПричиныИзмененияСостояния.Декрет);
	соотПричина.Вставить("Возврат из декрет", Перечисления.гхб_ПричиныИзмененияСостояния.ВозвратИзДекрет);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Запись = РегистрыСведений.гхб_РаботникиОрганизацийБазХолдинга.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.ПричинаИзмененияСостояния = соотПричина.Получить(Выборка.ПричинаИзмененияСостояния);
			
			Если Запись.ПричинаИзмененияСостояния = Перечисления.гхб_ПричиныИзмененияСостояния.Увольнение Тогда
				Запись.ДатаУвольнения = НачалоДня(Запись.Период) - 1
			КонецЕсли;
			
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьКадровыеДанныеБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			БезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьКонтактныеДанныеБазХолдинга(тзКонтактныеДанные, БазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Тип КАК Тип,
	|	таб.Вид КАК Вид,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Тип КАК Тип,
	|	втДанные.Вид КАК Вид,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)";
	
	
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзКонтактныеДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	
	соотТип = Новый Соответствие;
	соотТип.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	соотТип.Вставить("Адрес электронной почты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	соотТип.Вставить("Рабочее помещение", Перечисления.ТипыКонтактнойИнформации.Другое);
	соотТип.Вставить("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	соотВид = Новый Соответствие;
	соотВид.Вставить("Внутренний телефон", Справочники.ВидыКонтактнойИнформации.ВнутреннийТелефон);
	соотВид.Вставить("Служебный адрес электронной почты пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	соотВид.Вставить("Мобильный телефон сотрудника", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Телефон мобільный", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника);
	соотВид.Вставить("Служебный телефон пользователя", Справочники.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя);
	соотВид.Вставить("Телефон физ. лица", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	соотВид.Вставить("Адрес по прописке", Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизЛица);
	соотВид.Вставить("Адрес проживания", Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица);
	соотВид.Вставить("Адрес информирования", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица);
	ЗаписьНабораУспешна = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Тип = соотТип.Получить(Выборка.Тип);
			Вид = соотВид.Получить(Выборка.Вид);
			
			Если ЗначениеЗаполнено(Тип) И ЗначениеЗаполнено(Вид) Тогда
				
				Запись = РегистрыСведений.гхб_КонтактнаяИнформацияБазХолдинга.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.БазаХолдинга = БазаХолдинга;
				Запись.Тип = Тип;
				Запись.Вид = Вид;
				Запись.Записать();
				
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьКонтактныеДанныеБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			ЗаписьНабораУспешна = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ЗаписьНабораУспешна;
	
КонецФункции

Функция ЗаполнитьСоздатьРазмещениеСотрудниковБазХолдинга(тзРазмещение, БазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Представление КАК Представление,
	|	таб.Корпус КАК Корпус,
	|	таб.Этаж КАК Этаж,
	|	таб.Офис КАК Офис,
	|	таб.НаименованиеРП КАК НаименованиеРП,
	|	таб.guid КАК guid,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.ДробнаяЧасть КАК ДробнаяЧасть
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Представление КАК Представление,
	|	втДанные.Корпус КАК Корпус,
	|	втДанные.Этаж КАК Этаж,
	|	втДанные.Офис КАК Офис,
	|	втДанные.НаименованиеРП КАК НаименованиеРП,
	|	втДанные.guid КАК guid,
	|	втДанные.ФизЛицо КАК ФизЛицо,
	|	втДанные.ДробнаяЧасть КАК ДробнаяЧасть,
	|	гхб_РабочиеПомещения.Ссылка КАК РабочееПомещение,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Объект
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_РабочиеПомещения КАК гхб_РабочиеПомещения
	|		ПО втДанные.Корпус = гхб_РабочиеПомещения.Корпус
	|			И втДанные.Этаж = гхб_РабочиеПомещения.Этаж
	|			И втДанные.Офис = гхб_РабочиеПомещения.Офис
	|			И втДанные.ДробнаяЧасть = гхб_РабочиеПомещения.ДробнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.guid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга";
	
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.УстановитьПараметр("таб", тзРазмещение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	тзРабочиеПомещения = ПолучитьТаблицуРабочихПомещений();
	
	ЗаписьНабораУспешна = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			Запись = РегистрыСведений.гхб_КонтактнаяИнформацияБазХолдинга.СоздатьМенеджерЗаписи();
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.РабочееПомещение;
			Запись.Объект = Выборка.Объект;
			Запись.Представление = ?(ЗначениеЗаполнено(Выборка.РабочееПомещение), Строка(Выборка.РабочееПомещение), Выборка.Представление);
			
			Если ЗначениеЗаполнено(Выборка.РабочееПомещение) Тогда
				Запись.РабочееПомещение = Выборка.РабочееПомещение;
			Иначе
				Запись.РабочееПомещение = ПолучитьРабочееПомещение(Выборка.Представление, тзРабочиеПомещения);
			КонецЕсли;
			
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьРазмещениеСотрудниковБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			ЗаписьНабораУспешна = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ЗаписьНабораУспешна;

КонецФункции

Функция ЗаполнитьСоздатьСостоянияРаботниковОрганизация(тзДанныеСотрудники, БазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанныеСотрудники);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Сотрудник КАК Сотрудник,
	|	таб.Сотрудникguid КАК Сотрудникguid,
	|	таб.Организация КАК Организация,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Период КАК Период,
	|	таб.Состояние КАК Состояние,
	|	таб.СостояниеЗавершения КАК СостояниеЗавершения,
	|	таб.ПериодЗавершения КАК ПериодЗавершения
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Сотрудник КАК Сотрудник,
	|	втДанные.Сотрудникguid КАК Сотрудникguid,
	|	втДанные.Организация КАК Организация,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Период КАК Период,
	|	втДанные.Состояние КАК Состояние,
	|	втДанные.СостояниеЗавершения КАК СостояниеЗавершения,
	|	втДанные.ПериодЗавершения КАК ПериодЗавершения,
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК СотрудникСсылка,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК ОрганизацияСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|		ПО втДанные.Сотрудникguid = гхб_СотрудникиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_СотрудникиБазХолдинга.БазаХолдинга = &База)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &База)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	БезОшибок = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			Запись = РегистрыСведений.гхб_СостояниеРаботниковОрганизаций.СоздатьМенеджерЗаписи();
			Запись.Период = Выборка.Период;
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.Организация = Выборка.ОрганизацияСсылка;
			Запись.Сотрудник = Выборка.СотрудникСсылка;
			Запись.ПериодЗавершения = Выборка.ПериодЗавершения;
			Запись.Состояние = Выборка.Состояние;
			Запись.СостояниеЗавершения = Выборка.СостояниеЗавершения;
			
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьСостоянияРаботниковБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			БезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат БезОшибок;

КонецФункции

Функция ЗаполнитьСоздатьРедактироватьДанныеПоЦФОБазХолдинга(тзДанныеСостояния, БазаХолдинга, РодительБазаХолдинга)

	БезОшибок = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанныеСостояния);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ЦФО КАК ЦФО,
	|	таб.ЦФОguid КАК ЦФОguid,
	|	таб.Шифр КАК Шифр,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.ЭтоГруппа КАК ЭтоГруппа,
	|	таб.Родитель КАК Родитель,
	|	таб.Родительguid КАК Родительguid,
	|	таб.Ответственный КАК Ответственный,
	|	таб.Ответственныйguid КАК Ответственныйguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ЦФО КАК ЦФО,
	|	втДанные.ЦФОguid КАК ЦФОguid,
	|	втДанные.Шифр КАК Шифр,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.ЭтоГруппа КАК ЭтоГруппа,
	|	втДанные.Родитель КАК Родитель,
	|	втДанные.Родительguid КАК Родительguid,
	|	втДанные.Ответственный КАК Ответственный,
	|	втДанные.Ответственныйguid КАК Ответственныйguid
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &База)
	|			И (гхб_ЦФО.ЭтоГруппаРИБ)
	|ГДЕ
	|	гхб_ЦФО.Ссылка ЕСТЬ NULL
	|	И втДанные.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		спрОбъект = Справочники.гхб_ЦФО.СоздатьЭлемент();
		спрОбъект.Наименование = Выборка.ЦФО;
		спрОбъект.GUIDБазыХолдинга = Выборка.ЦФОguid;
		спрОбъект.Шифр = Выборка.Шифр;
		спрОбъект.ЭтоГруппаРИБ = Истина;
		спрОбъект.БазаХолдинга = БазаХолдинга;
		спрОбъект.Родитель = РодительБазаХолдинга;
		
		Попытка
			спрОбъект.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриСозданииЦФОБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			БезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанныеСостояния);
	Запрос.УстановитьПараметр("База", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.ЦФО КАК ЦФО,
	|	таб.ЦФОguid КАК ЦФОguid,
	|	таб.Шифр КАК Шифр,
	|	таб.ДатаС КАК ДатаС,
	|	таб.ДатаПо КАК ДатаПо,
	|	таб.ЭтоГруппа КАК ЭтоГруппа,
	|	таб.Родитель КАК Родитель,
	|	таб.Родительguid КАК Родительguid,
	|	таб.Ответственный КАК Ответственный,
	|	таб.Ответственныйguid КАК Ответственныйguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ЦФО КАК ЦФО,
	|	втДанные.ЦФОguid КАК ЦФОguid,
	|	втДанные.Шифр КАК Шифр,
	|	втДанные.ДатаС КАК ДатаС,
	|	втДанные.ДатаПо КАК ДатаПо,
	|	втДанные.ЭтоГруппа КАК ЭтоГруппа,
	|	втДанные.Родитель КАК Родитель,
	|	втДанные.Родительguid КАК Родительguid,
	|	втДанные.Ответственный КАК Ответственный,
	|	втДанные.Ответственныйguid КАК Ответственныйguid,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ОтветственныйСсылка,
	|	гхб_ЦФОРодители.Ссылка КАК РодительСсылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО втДанные.ЦФОguid = гхб_ЦФО.GUIDБазыХолдинга
	|			И (гхб_ЦФО.БазаХолдинга = &База)
	|			И (НЕ гхб_ЦФО.ЭтоГруппаРИБ)
	|			И (НЕ втДанные.ЭтоГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.Ответственныйguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &База)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФОРодители
	|		ПО втДанные.Родительguid = гхб_ЦФОРодители.GUIDБазыХолдинга
	|			И (гхб_ЦФОРодители.БазаХолдинга = &База)
	|			И (гхб_ЦФОРодители.ЭтоГруппаРИБ)
	|ГДЕ
	|	гхб_ЦФО.Ссылка ЕСТЬ NULL
	|	И НЕ втДанные.ЭтоГруппа";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		спрОбъект = Справочники.гхб_ЦФО.СоздатьЭлемент();
		спрОбъект.Наименование = Выборка.ЦФО;
		спрОбъект.GUIDБазыХолдинга = Выборка.ЦФОguid;
		спрОбъект.БазаХолдинга = БазаХолдинга;
		спрОбъект.Шифр = Выборка.Шифр;
		спрОбъект.ДатаС = Выборка.ДатаС;
		спрОбъект.ДатаПо = Выборка.ДатаПо;
		спрОбъект.Ответственный = Выборка.ОтветственныйСсылка;
		
		Если ЗначениеЗаполнено(Выборка.РодительСсылка) Тогда
			спрОбъект.Родитель = Выборка.РодительСсылка;
		Иначе
			спрОбъект.Родитель = РодительБазаХолдинга;
		КонецЕсли;
		
		Попытка
			спрОбъект.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриСозданииЦФОБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			БезОшибок = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат БезОшибок;

КонецФункции // ЗаполнитьСоздатьРедактироватьДанныеПоЦФОБазХолдинга()

Функция ДобавитьРедактироватьДанныеОБлокировкеПользователейБазХолдинга(тзДанныеБлокировок, БазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзДанныеБлокировок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.ДатаБлокировки КАК ДатаБлокировки,
	|	таб.guid КАК guid,
	|	таб.НоваяБлокировка КАК НоваяБлокировка
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ДатаБлокировки КАК ДатаБлокировки,
	|	втДанные.guid КАК guid,
	|	втДанные.НоваяБлокировка КАК НоваяБлокировка,
	|	ИСТИНА КАК Блокирован,
	|	втДанные.ДатаБлокировки КАК Период,
	|	гхб_ПользователиБазХолдинга.Ссылка КАК Пользователь
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	втДанные.НоваяБлокировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.ДатаБлокировки КАК ДатаБлокировки,
	|	втДанные.guid КАК guid,
	|	втДанные.НоваяБлокировка КАК НоваяБлокировка,
	|	ВЫБОР
	|		КОГДА втДанные.ДатаБлокировки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ втДанные.ДатаБлокировки
	|	КОНЕЦ КАК Блокирован,
	|	ВЫБОР
	|		КОГДА втДанные.ДатаБлокировки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ втДанные.ДатаБлокировки
	|	КОНЕЦ КАК Период,
	|	гхб_ПользователиБазХолдинга.Ссылка КАК Пользователь
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО втДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ втДанные.НоваяБлокировка";
	
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовых = резПакет[1].Выбрать();
	ВыборкаСуществующих = резПакет[2].Выбрать();
	
	ЗаписьНабораУспешна = Истина;
		
	Пока ВыборкаНовых.Следующий() Цикл
		
		Попытка
			
			Запись = РегистрыСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаНовых);
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьБлокировокПользователейБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			ЗаписьНабораУспешна = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующих.Следующий() Цикл
		
		Попытка
			
			Запись = РегистрыСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСуществующих);
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.Блокирован = ЗначениеЗаполнено(ВыборкаСуществующих.ДатаБлокировки);
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьБлокировокПользователейБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			ЗаписьНабораУспешна = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ЗаписьНабораУспешна;
	
КонецФункции

//++ p.lukashov(16.06.2020) #14324
// Для базы ресурсов нет таблиц изменений, там используются ХранилищеНастроек
// При обращении читаются все данные о блокировках, вне зависимости от времени, когда эта блокировка была установлена
Процедура ДобавитьРедактироватьДанныеОБлокировкеПользователейБазХолдингаРесурсы(ТЗДанныеБлокировок, БазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗДанные", ТЗДанныеБлокировок);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.УстановитьПараметр("ТекДатаНачалоДня", гхб_ОбщегоНазначенияСервер.ВернутьВремяНаСервере());
	
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗДанные.ДатаБлокировки КАК ДатаБлокировки,
			|	ТЗДанные.guid КАК guid
			|ПОМЕСТИТЬ ВТДанные
			|ИЗ
			|	&ТЗДанные КАК ТЗДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДанные.ДатаБлокировки КАК ДатаБлокировки,
			|	гхб_ПользователиБазХолдинга.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ВТДанныеСПользователями
			|ИЗ
			|	ВТДанные КАК ВТДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
			|		ПО ВТДанные.guid = гхб_ПользователиБазХолдинга.GUIDБазыХолдинга
			|			И (гхб_ПользователиБазХолдинга.БазаХолдинга = &БазаХолдинга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ТекДатаНачалоДня КАК Период,
			|	&БазаХолдинга КАК БазаХолдинга,
			|	ВТДанныеСПользователями.Пользователь КАК Пользователь,
			|	ВЫБОР
			|		КОГДА ВТДанныеСПользователями.ДатаБлокировки <= &ТекДатаНачалоДня
			|				И ВТДанныеСПользователями.ДатаБлокировки <> ДАТАВРЕМЯ(1, 1, 1)
			|				И (гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь ЕСТЬ NULL
			|					ИЛИ гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Период <> ВТДанныеСПользователями.ДатаБлокировки)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Блокирован,
			|	&ТекДатаНачалоДня КАК ДатаЗаписи
			|ИЗ
			|	ВТДанныеСПользователями КАК ВТДанныеСПользователями
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СрезПоследних(&ТекДатаНачалоДня, ) КАК гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних
			|		ПО ВТДанныеСПользователями.Пользователь = гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь
			|			И (гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.БазаХолдинга = &БазаХолдинга)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ВТДанныеСПользователями.ДатаБлокировки <= &ТекДатаНачалоДня
			|						И ВТДанныеСПользователями.ДатаБлокировки <> ДАТАВРЕМЯ(1, 1, 1)
			|						И (гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь ЕСТЬ NULL
			|							ИЛИ гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Период <> ВТДанныеСПользователями.ДатаБлокировки)
			|					ИЛИ ВТДанныеСПользователями.ДатаБлокировки = ДАТАВРЕМЯ(1, 1, 1)
			|						И НЕ гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь ЕСТЬ NULL
			|					ИЛИ ВТДанныеСПользователями.ДатаБлокировки > &ТекДатаНачалоДня
			|						И гхб_ДатыБлокировокПользователейБазХолдингаСрезПоследних.Блокирован
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ";
	
	ВыборкаДетальные = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальные.Следующий() Цикл
		
		Попытка
			
			Запись = РегистрыСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальные);
			Запись.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗаписьБлокировокПользователейБХ_ИзБазХолдингаРесурсы'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
										
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры	
//-- p.lukashov(16.06.2020)

Функция ЗаполнитьСоздатьРедактироватьДанныеПоОрганизациямБазХолдинга(тзДанныеОрганизации, БазаХолдинга, РодительБазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.Изменение КАК Изменение,
	|	таб.ПометкаУдаления КАК ПометкаУдаления,
	|	таб.guid КАК guid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.guid КАК guid
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	гхб_ОрганизацииБазХолдинга.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.Изменение КАК Изменение,
	|	втДанные.ПометкаУдаления КАК ПометкаУдаления,
	|	втДанные.guid КАК guid,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.guid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|ГДЕ
	|	НЕ гхб_ОрганизацииБазХолдинга.Ссылка ЕСТЬ NULL
	|	И (втДанные.Наименование <> гхб_ОрганизацииБазХолдинга.Наименование
	|			ИЛИ втДанные.ПометкаУдаления <> гхб_ОрганизацииБазХолдинга.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("таб", тзДанныеОрганизации);
	резПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаНовые = резПакет[1].Выбрать();
	ВыборкаСуществующие = резПакет[2].Выбрать();
	БезОшибок = Истина;
	
	Пока ВыборкаНовые.Следующий() Цикл
		
		Если Не СоздатьРедактироватьОрганизациюБазыХолдинга(ВыборкаНовые.Наименование, ВыборкаНовые.guid, БазаХолдинга, РодительБазаХолдинга) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаСуществующие.Следующий() Цикл
		
		Если Не СоздатьРедактироватьОрганизациюБазыХолдинга(ВыборкаСуществующие.Наименование, 
													ВыборкаСуществующие.guid, 
													БазаХолдинга, 
													РодительБазаХолдинга,
													ВыборкаСуществующие.Ссылка,
													ВыборкаСуществующие.ПометкаУдаления) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Функция ЗаполнитьСоздатьДивизион(тзДивизионы)
	
	БезОшибок = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.Код КАК Код,
	|	таб.КодРодителя КАК КодРодителя,
	|	таб.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.Код КАК Код
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ПО втДанные.Код = гхб_Дивизионы.Код
	|			И (гхб_Дивизионы.ЭтоДивизион)
	|ГДЕ
	|	гхб_Дивизионы.Ссылка ЕСТЬ NULL
	|	И втДанные.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("таб", тзДивизионы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьДивизион(Выборка.Наименование,
						Выборка.Код,
						Истина) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	таб.Наименование КАК Наименование,
	|	таб.Код КАК Код,
	|	таб.КодРодителя КАК КодРодителя,
	|	таб.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Наименование КАК Наименование,
	|	втДанные.Код КАК Код,
	|	ДивизионыРодители.Ссылка КАК Родитель,
	|	втДанные.КодРодителя КАК КодРодителя
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК гхб_Дивизионы
	|		ПО втДанные.Код = гхб_Дивизионы.Код
	|			И (НЕ гхб_Дивизионы.ЭтоДивизион)
	|			И втДанные.КодРодителя = гхб_Дивизионы.Родитель.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_Дивизионы КАК ДивизионыРодители
	|		ПО втДанные.КодРодителя = ДивизионыРодители.Код
	|			И (ДивизионыРодители.ЭтоДивизион)
	|ГДЕ
	|	гхб_Дивизионы.Ссылка ЕСТЬ NULL
	|	И НЕ втДанные.ЭтоГруппа
	|	И НЕ ДивизионыРодители.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("таб", тзДивизионы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не СоздатьДивизион(Выборка.Наименование,
						Выборка.Код,
						Ложь,
						Выборка.Родитель) Тогда
			БезОшибок = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

Процедура ДобавитьДанныеПоРуководителямПодразделений(тзРуководители, БазаХолдинга)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("таб", тзРуководители);
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	таб.Организация КАК Организация,
	|	таб.РольДокументооборота КАК РольДокументооборота,
	|	таб.Подразделение КАК Подразделение,
	|	таб.ФизЛицо КАК ФизЛицо,
	|	таб.Организацияguid КАК Организацияguid,
	|	таб.Подразделениеguid КАК Подразделениеguid,
	|	таб.ФизЛицоguid КАК ФизЛицоguid
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&таб КАК таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Организация КАК ОрганизацияТекст,
	|	втДанные.РольДокументооборота КАК РольДокументооборота,
	|	втДанные.Подразделение КАК ПодразделениеТекст,
	|	втДанные.ФизЛицо КАК ФизЛицоТекст,
	|	втДанные.Организацияguid КАК Организацияguid,
	|	втДанные.Подразделениеguid КАК Подразделениеguid,
	|	втДанные.ФизЛицоguid КАК ФизЛицоguid,
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Организация,
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК ПодразделениеОрганизации,
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|		ПО втДанные.Организацияguid = гхб_ОрганизацииБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ОрганизацииБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|		ПО втДанные.Подразделениеguid = гхб_ПодразделенияОрганизацийБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ПодразделенияОрганизацийБазХолдинга.БазаХолдинга = &БазаХолдинга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО втДанные.ФизЛицоguid = гхб_ФизическиеЛицаБазХолдинга.GUIDБазыХолдинга
	|			И (гхб_ФизическиеЛицаБазХолдинга.БазаХолдинга = &БазаХолдинга)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РольРуководителя = СоздатьПолучитьРольРуководителя(Выборка.РольДокументооборота);
		
		Попытка
		
			Запись = РегистрыСведений.гхб_РуководителиПодразделенийБазХолдинга.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.БазаХолдинга = БазаХолдинга;
			Запись.РольДокументооборота = РольРуководителя;
			Запись.ДатаЗаписи = ТекущаяДатаСеанса();
			Запись.Записать();
		
		Исключение
			ЗаписьЖурналаРегистрации("ПолучитьДанныеПоРуководителямПодразделений", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьПолучитьРольРуководителя(РольРуководителя)

	Попытка
	
		спрРолиДокументооборота = Справочники.гхб_РолиДокументооборота.НайтиПоНаименованию(РольРуководителя);
		
		Если ЗначениеЗаполнено(спрРолиДокументооборота) Тогда
			Возврат спрРолиДокументооборота;
		КонецЕсли;
		
		спрРолиДокументооборотаОбъект = Справочники.гхб_РолиДокументооборота.СоздатьЭлемент();
		спрРолиДокументооборотаОбъект.Наименование = РольРуководителя;
		спрРолиДокументооборотаОбъект.Записать();
		Возврат спрРолиДокументооборотаОбъект.Ссылка;
	
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции // СоздатьПолучитьРольРуководителя()

#КонецОбласти

#КонецОбласти

#Область Прочее

#Область СозданиеЭлементовГруппСправочников

Процедура СоздатьФизЛицо(Наименование, ИНН)

	Попытка
	
		спрОбъект = Справочники.гхб_ФизическиеЛица.СоздатьЭлемент();
		спрОбъект.Наименование = Наименование;
		спрОбъект.ИНН = ИНН;
		спрОбъект.Записать();
	
	Исключение
		ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииФизЛицаИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция СоздатьРедактироватьФизЛицоБазыХолдинга(Наименование, 
													ИНН, 
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													ФизЛицоТекущейБазы, 
													РодительБазаХолдинга,
													Ссылка = Неопределено,
													ПометкаУдаления = Ложь,
													ДоменноеИмя,
													Пол,
													ДатаРождения)

	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_ФизическиеЛицаБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.ИНН = ИНН;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ФизЛицоТекущейБазы = ФизЛицоТекущейБазы;
			спрОбъект.ДоменноеИмя = ДоменноеИмя;
			спрОбъект.ДатаСозданияЭлементаОбменом = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(Пол) Тогда
				спрОбъект.Пол = Перечисления.гхб_ПолФизическихЛиц[Пол];
			КонецЕсли;
			
			Попытка
				спрОбъект.ДатаРождения = Дата(Сред(ДатаРождения, 1, 4),
										Сред(ДатаРождения, 6, 2),
										Сред(ДатаРождения, 9, 2));
			Исключение
				ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииФизЛицаБХ_ИзБазХолдинга_ПреобразованиеДатыИзСтроки", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииФизЛицаБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			Если спрОбъект.ИНН <> ИНН Тогда
				спрОбъект.ФизЛицоТекущейБазы = ПолучитьФизЛицоТекущейБазы(ИНН);
			КонецЕсли;
			спрОбъект.ИНН = ИНН;
			спрОбъект.Наименование = Наименование;
			спрОбъект.ПометкаУдаления = ПометкаУдаления;
			спрОбъект.ДоменноеИмя = ДоменноеИмя;
			спрОбъект.ДатаИзмененияЭлементаОбменом = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(Пол) Тогда
				спрОбъект.Пол = Перечисления.гхб_ПолФизическихЛиц[Пол];
			КонецЕсли;
			
			Попытка
				спрОбъект.ДатаРождения = Дата(Сред(ДатаРождения, 1, 4),
										Сред(ДатаРождения, 6, 2),
										Сред(ДатаРождения, 9, 2));
			Исключение
				ЗаписьЖурналаРегистрации("ЗаписьРедактированиеПриПолученииФизЛицаБХ_ИзБазХолдинга_ПреобразованиеДатыИзСтроки", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
			
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьРедактированиеПриПолученииФизЛицаБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|ГДЕ
	|	гхб_ФизическиеЛицаБазХолдинга.ЭтоГруппа
	|	И гхб_ФизическиеЛицаБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ФизическиеЛицаБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыФизЛицаБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга()

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеОрганизацииБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ОрганизацииБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ОрганизацииБазХолдинга КАК гхб_ОрганизацииБазХолдинга
	|ГДЕ
	|	гхб_ОрганизацииБазХолдинга.Наименование = &Наименование
	|	И гхб_ОрганизацииБазХолдинга.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ОрганизацииБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыОрганизацииБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеОрганизацииБазХолдинга()

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеДолжностиБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ДолжностиОрганизацийБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ДолжностиОрганизацийБазХолдинга КАК гхб_ДолжностиОрганизацийБазХолдинга
	|ГДЕ
	|	гхб_ДолжностиОрганизацийБазХолдинга.ЭтоГруппа
	|	И гхб_ДолжностиОрганизацийБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ДолжностиОрганизацийБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыДолжностиБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга()

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеПодразделенияБазХолдинга(БазаХолдинга) Экспорт

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ПодразделенияОрганизацийБазХолдинга КАК гхб_ПодразделенияОрганизацийБазХолдинга
	|ГДЕ
	|	гхб_ПодразделенияОрганизацийБазХолдинга.Наименование = &Наименование
	|	И гхб_ПодразделенияОрганизацийБазХолдинга.ЭтоГруппаБазы";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ПодразделенияОрганизацийБазХолдинга.СоздатьЭлемент();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.ЭтоГруппаБазы = Истина;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыПодразделенияБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга()

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеПользователиБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ПользователиБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|ГДЕ
	|	гхб_ПользователиБазХолдинга.ЭтоГруппа
	|	И гхб_ПользователиБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ПользователиБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыПодразделенияБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеФизЛицаБазХолдинга()

Функция ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_СотрудникиБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|ГДЕ
	|	гхб_СотрудникиБазХолдинга.ЭтоГруппа
	|	И гхб_СотрудникиБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_СотрудникиБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыСотрудникаБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоОрганизацииВСправочникеСотрудникиБазХолдинга()

Функция ПроверитьСоздатьГруппуПоПозицииШтатногоРасписанияБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ПозицииШтатногоРасписанияБазХолдинга КАК гхб_ПозицииШтатногоРасписанияБазХолдинга
	|ГДЕ
	|	гхб_ПозицииШтатногоРасписанияБазХолдинга.ЭтоГруппа
	|	И гхб_ПозицииШтатногоРасписанияБазХолдинга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ПозицииШтатногоРасписанияБазХолдинга.СоздатьГруппу();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыПозицииШтатногоРасписанияБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуПоПозицииШтатногоРасписанияБазХолдинга()

Функция ПроверитьСоздатьГруппуПоЦФОБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ЦФО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ЦФО КАК гхб_ЦФО
	|ГДЕ
	|	гхб_ЦФО.Наименование = &Наименование
	|	И гхб_ЦФО.ЭтоГруппаБаза";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Попытка
	
		спрОбъект = Справочники.гхб_ЦФО.СоздатьЭлемент();
		спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
		спрОбъект.Наименование = Наименование;
		спрОбъект.ЭтоГруппаБаза = Истина;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	
	Исключение
		ЗаписьЖурналаРегистрации("СозданиеГруппыЦФОБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецФункции

Функция СоздатьПозициюШтатногоРасписания(Наименование, guid, База)
	
	РодительБазаХолдинга = ПроверитьСоздатьГруппуПоПозицииШтатногоРасписанияБазХолдинга(База);
	
	спрОбъект = Справочники.гхб_ПозицииШтатногоРасписанияБазХолдинга.СоздатьЭлемент();
	спрОбъект.Родитель = РодительБазаХолдинга;
	спрОбъект.Наименование = Наименование;
	спрОбъект.БазаХолдинга = База;
	спрОбъект.GUIDБазыХолдинга = guid;
	
	Попытка
		
		спрОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("СозданиеПозициюШтатногоРасписанияБазХолдингаПриЗагрузкеДанных", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции // ПолучитьСоздатьПозициюШтатногоРасписания()

Функция СоздатьРедактироватьДолжностьБазыХолдинга(Наименование,
													АнглийскоеНаименование,
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													РодительБазаХолдинга,
													Ссылка = Неопределено,
													ПометкаУдаления = Ложь)
													
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_ДолжностиОрганизацийБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииДолжностиБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
	
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Наименование = Наименование;
			спрОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			спрОбъект.ПометкаУдаления = ПометкаУдаления;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииДолжностиБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
	
	КонецЕсли;
	
КонецФункции

Функция СоздатьРедактироватьОрганизациюБазыХолдинга(Наименование, 
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													РодительБазаХолдинга,
													Ссылка = Неопределено,
													ПометкаУдаления = Ложь)
	
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_ОрганизацииБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииОрганизацииБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
	
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Наименование = Наименование;
			спрОбъект.ПометкаУдаления = ПометкаУдаления;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииОрганизацииБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
	
	КонецЕсли;
	
КонецФункции

Функция СоздатьРедактироватьПодразделениеБазыХолдинга(Наименование, 
														GUIDБазыХолдинга, 
														БазаХолдинга, 
														РодительБазаХолдинга,
														Организация, 
														ДатаС, 
														ДатаПо,
														УровеньПодразделения,
														Ссылка = Неопределено,
														ПометкаУдаления = Ложь)
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_ПодразделенияОрганизацийБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.ОрганизацияБазХолдинга = Организация;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ДатаС = ДатаС;
			спрОбъект.ДатаПо = ДатаПо;
			спрОбъект.УровеньПодразделения = УровеньПодразделения;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииПодразделенияБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Наименование = Наименование;
			спрОбъект.ПометкаУдаления = ПометкаУдаления;
			спрОбъект.ДатаС = ДатаС;
			спрОбъект.ДатаПо = ДатаПо;
			спрОбъект.УровеньПодразделения = УровеньПодразделения;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииПодразделенияБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;

КонецФункции

Функция СоздатьРедактироватьПользователяБазыХолдинга(Наименование, 
														GUIDБазыХолдинга, 
														БазаХолдинга, 
														РодительБазаХолдинга, 
														ФизЛицоБХ,
														Ссылка = Неопределено,
														ПометкаУдаления = Ложь)
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_ПользователиБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииПользователяБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			
			Если спрОбъект.Наименование <> Наименование 
				Или спрОбъект.ПометкаУдаления <> ПометкаУдаления
				Или спрОбъект.ФизЛицоБазыХолдинга <> ФизЛицоБХ Тогда
			
				спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
				спрОбъект.Наименование = Наименование;
				спрОбъект.ПометкаУдаления = ПометкаУдаления;
				спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
				спрОбъект.Записать();
				
			КонецЕсли;
			
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииПользователяБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьРедактироватьСотрудникаБазыХолдинга(Наименование, 
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													РодительБазаХолдинга, 
													ФизЛицоБХ, 
													ВидДоговора, 
													ВидЗанятости,
													Ссылка = Неопределено,
													ПометкаУдаления = Ложь)
	
	соотВидыДоговоровСФизЛицами = Новый Соответствие;
	соотВидыДоговоровСФизЛицами.Вставить("Трудовой договор", Перечисления.гхб_ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	соотВидыДоговоровСФизЛицами.Вставить("Договор подряда (выполнение работ, оказание услуг)", Перечисления.гхб_ВидыДоговоровСФизЛицами.Подряда);
	соотВидыДоговоровСФизЛицами.Вставить("Авторский договор", Перечисления.гхб_ВидыДоговоровСФизЛицами.Авторский);
	соотВидыДоговоровСФизЛицами.Вставить("Без договора", Перечисления.гхб_ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	соотВидыЗанятости = Новый Соответствие;
	соотВидыЗанятости.Вставить("Основне місце роботи", Перечисления.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	соотВидыЗанятости.Вставить("Сумісництво", Перечисления.гхб_ВидыЗанятостиВОрганизации.Совместительство);
	соотВидыЗанятости.Вставить("Внутрішнє сумісництво", Перечисления.гхб_ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_СотрудникиБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
			спрОбъект.ВидДоговора = соотВидыДоговоровСФизЛицами.Получить(ВидДоговора);
			спрОбъект.ВидЗанятости = соотВидыЗанятости.Получить(ВидЗанятости);
			спрОбъект.ДатаСозданияЭлементаОбменом = ТекущаяДатаСеанса();
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииСотрудникаБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			спрОбъект = Ссылка.ПолучитьОбъект();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Наименование = Наименование;
			спрОбъект.ПометкаУдаления = ПометкаУдаления;
			спрОбъект.ВидДоговора = соотВидыДоговоровСФизЛицами.Получить(ВидДоговора);
			спрОбъект.ВидЗанятости = соотВидыЗанятости.Получить(ВидЗанятости);
			спрОбъект.ДатаИзмененияЭлементаОбменом = ТекущаяДатаСеанса();
			спрОбъект.Записать();
			Возврат Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииСотрудникаБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьРедактироватьСотрудникаГПХБазыХолдинга(Наименование, 
													GUIDБазыХолдинга, 
													БазаХолдинга, 
													РодительБазаХолдинга, 
													ФизЛицоБХ,
													Ссылка = Неопределено)
	
	Если Ссылка = Неопределено Тогда
		
		Попытка
			
			спрОбъект = Справочники.гхб_СотрудникиБазХолдинга.СоздатьЭлемент();
			спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
			спрОбъект.Родитель = РодительБазаХолдинга;
			спрОбъект.Наименование = Наименование;
			спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
			спрОбъект.БазаХолдинга = БазаХолдинга;
			спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
			спрОбъект.ВидДоговора = Перечисления.гхб_ВидыДоговоровСФизЛицами.Подряда;
			спрОбъект.ВидСотрудника = Перечисления.гпх_ВидыСотрудников.ГПХ;
			спрОбъект.ДатаСозданияЭлементаОбменом = ТекущаяДатаСеанса();
			спрОбъект.Записать();
			Возврат спрОбъект.Ссылка;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолученииСотрудникаГПХ_БХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		стРеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"ФизЛицоБазыХолдинга,Наименование");
		Если стРеквизитыСотрудника.Наименование <> Наименование 
			Или стРеквизитыСотрудника.ФизЛицоБазыХолдинга <> ФизЛицоБХ Тогда
		
			Попытка
				
				спрОбъект = Ссылка.ПолучитьОбъект();
				спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
				спрОбъект.Наименование = Наименование;
				спрОбъект.ДатаИзмененияЭлементаОбменом = ТекущаяДатаСеанса();
				спрОбъект.ФизЛицоБазыХолдинга = ФизЛицоБХ;
				спрОбъект.Записать();
				Возврат спрОбъект.Ссылка;
				
			Исключение
				
				ЗаписьЖурналаРегистрации("ЗаписьПриРедактированииСотрудникаГПХ_БХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				Возврат Неопределено;
				
			КонецПопытки;
			
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура СоздатьРабочееПомещениеБазыХолдинга(Наименование,
										Корпус, 
										Этаж, 
										Офис,
										ДробнаяЧасть,
										Дополнительно)

	Попытка
	
		спрОбъект = Справочники.гхб_РабочиеПомещения.СоздатьЭлемент();
		спрОбъект.Наименование = Наименование;
		спрОбъект.Корпус = Корпус;
		спрОбъект.Этаж = Этаж;
		спрОбъект.Офис = Офис;
		спрОбъект.ДробнаяЧасть = ДробнаяЧасть;
		спрОбъект.Дополнительно = Дополнительно;
		спрОбъект.Записать();
	
	Исключение
		ЗаписьЖурналаРегистрации("ЗаписьПриПервоначальномПолучениирабочегоПомещенияБХ_ИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция СоздатьДивизион(Наименование, Код, ЭтоГруппа, Родитель = Неопределено)

	Попытка
		
		спрОбъект = Справочники.гхб_Дивизионы.СоздатьЭлемент();
		спрОбъект.Наименование = Наименование;
		спрОбъект.Код = Код;
		спрОбъект.Родитель = Родитель;
		спрОбъект.ЭтоДивизион = ЭтоГруппа;
		спрОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьПриСозданииДивизионаИзБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

Функция СоздатьДокументДоговорСФизЛицом(СотрСсылка,
											БазаХолдинга,
											ДокументСсылкаguid,
											ОрганизацияСсылка,
											ДатаНачала,
											ДатаОкончания)
	
	докОбъект = Документы.гхб_ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
	докОбъект.Дата = ТекущаяДатаСеанса();
	докОбъект.БазаХолдинга = БазаХолдинга;
	докОбъект.GUIDБазыХолдинга = ДокументСсылкаguid;
	докОбъект.Организация = ОрганизацияСсылка;
	докОбъект.Сотрудник = СотрСсылка;
	докОбъект.ДатаНачала = ДатаНачала;
	докОбъект.ДатаОкончания = ДатаОкончания;
	
	Попытка
		
		докОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьДокументаДоговораНаВыполнениеРаботСФизЛицом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// ++ Тогушаков 18.11.2020 #16406 \\
Функция СоздатьЭлементСправочникаКонтрагенты(Наименование,
											КодПоЕДРПОУ,
											ИНН,
											ЮрФизЛицо,
											ВидКонтрагента = Неопределено,
											Родитель = Неопределено) Экспорт
	
	спрОбъект = Справочники.гхб_Контрагенты.СоздатьЭлемент();
	спрОбъект.Наименование = Наименование;
	спрОбъект.КодПоЕДРПОУ = КодПоЕДРПОУ;
	спрОбъект.Родитель = Родитель;
	спрОбъект.ВидКонтрагента = ВидКонтрагента;
	спрОбъект.ЮрФизЛицо = ЮрФизЛицо;
	спрОбъект.ИНН = ИНН;
	
	Попытка
		
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьКонтрагента", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;
	
КонецФункции // СоздатьЭлементСправочникаКонтрагенты()

Функция СоздатьГруппуСправочникаКонтрагенты(Наименование, 
											Родитель = Неопределено) Экспорт
	
	спрОбъект = Справочники.гхб_Контрагенты.СоздатьГруппу();
	спрОбъект.Наименование = Наименование;
	
	Если Родитель <> Неопределено Тогда
		спрОбъект.Родитель = Родитель;
	КонецЕсли;
	
	Попытка
		
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьГруппыКонтрагента", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;
	
КонецФункции // СоздатьЭлементСправочникаКонтрагенты()

Функция СоздатьЭлементСправочникаКонтрагентыБазХолдинга(Наименование,
														GUIDБазыХолдинга,
														БазаХолдинга,
														КонтрагентТекущейБазы,
														КодПоЕДРПОУ,
														ЮрФизЛицо,
														ИНН,
														ВидКонтрагента = Неопределено) Экспорт
	
	спрОбъект = Справочники.гхб_КонтрагентыБазХолдинга.СоздатьЭлемент();
	спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
	спрОбъект.Наименование = Наименование;
	спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
	спрОбъект.БазаХолдинга = БазаХолдинга;
	спрОбъект.КонтрагентТекущейБазы = КонтрагентТекущейБазы;
	спрОбъект.ЮрФизЛицо = ЮрФизЛицо;
	спрОбъект.КодПоЕДРПОУ = КодПоЕДРПОУ;
	спрОбъект.ВидКонтрагента = ВидКонтрагента;
	
	Попытка
		
		стРодитель = ПроверитьСоздатьГруппуСправочникаКонтрагентыБазХолдинга(БазаХолдинга);
		
		Если Не стРодитель.БезОшибок Тогда
			ВызватьИсключение("Ошибка записи группы конрагентов баз холдинга " + Строка(БазаХолдинга));
		КонецЕсли;
		
		спрОбъект.Родитель = стРодитель.Ссылка;
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьКонтрагентыБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;
	
КонецФункции // СоздатьЭлементСправочникаКонтрагенты()

Функция ПроверитьСоздатьГруппуСправочникаКонтрагентыБазХолдинга(БазаХолдинга) Экспорт
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_КонтрагентыБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_КонтрагентыБазХолдинга КАК гхб_КонтрагентыБазХолдинга
	|ГДЕ
	|	гхб_КонтрагентыБазХолдинга.Наименование = &Наименование
	|	И гхб_КонтрагентыБазХолдинга.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, Выборка.Ссылка);
	КонецЕсли;
	
	спрОбъект = Справочники.гхб_КонтрагентыБазХолдинга.СоздатьГруппу();
	спрОбъект.Наименование = Наименование;
	спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
	
	Попытка
		
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьГруппыКонтрагентаБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;
	
КонецФункции // СоздатьЭлементСправочникаКонтрагенты()

Функция СоздатьЭлементДоговораКонтрагентовБазХолдинга(Наименование,
														GUIDБазыХолдинга,
														БазаХолдинга,
														Контрагент,
														Дата,
														Номер,
														Организация) Экспорт
	
	спрОбъект = Справочники.гхб_ДоговораКонтрагентовБазХолдинга.СоздатьЭлемент();
	спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
	спрОбъект.Наименование = Наименование;
	спрОбъект.GUIDБазыХолдинга = GUIDБазыХолдинга;
	спрОбъект.БазаХолдинга = БазаХолдинга;
	спрОбъект.Контрагент = Контрагент;
	спрОбъект.Номер = Номер;
	спрОбъект.Дата = Дата;
	спрОбъект.Организация = Организация;
	
	Попытка
		
		стРодитель = ПроверитьСоздатьГруппуСправочникаДоговораКонтрагентовБазХолдинга(БазаХолдинга);
		
		Если Не стРодитель.БезОшибок Тогда
			ВызватьИсключение("Ошибка записи группы договора конрагентов баз холдинга " + Строка(БазаХолдинга));
		КонецЕсли;
		
		спрОбъект.Родитель = стРодитель.Ссылка;
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьКонтрагентыБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;
	
КонецФункции // СоздатьЭлементСправочникаКонтрагенты()

Функция ПроверитьСоздатьГруппуСправочникаДоговораКонтрагентовБазХолдинга(БазаХолдинга)

	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаХолдинга, "Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ДоговораКонтрагентовБазХолдинга.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ДоговораКонтрагентовБазХолдинга КАК гхб_ДоговораКонтрагентовБазХолдинга
	|ГДЕ
	|	гхб_ДоговораКонтрагентовБазХолдинга.Наименование = &Наименование
	|	И гхб_ДоговораКонтрагентовБазХолдинга.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, Выборка.Ссылка);
	КонецЕсли;
	
	спрОбъект = Справочники.гхб_ДоговораКонтрагентовБазХолдинга.СоздатьГруппу();
	спрОбъект.Наименование = Наименование;
	спрОбъект.ДополнительныеСвойства.Вставить("ПометкаПришлаОбменом", Истина);
	
	Попытка
		
		спрОбъект.Записать();
		Возврат Новый Структура("БезОшибок,Ссылка", Истина, спрОбъект.Ссылка);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ЗаписьГруппыДоговоровКонтрагентаБазХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Новый Структура("БезОшибок", Ложь);
		
	КонецПопытки;

КонецФункции // ПроверитьСоздатьГруппуСправочникаДоговораКонтрагентовБазХолдинга()

// -- Тогушаков 18.11.2020 #16406

#КонецОбласти

Процедура СообщитьОЗапретеСозданияЭлементаСправочника(Отказ) Экспорт
	ОбщегоНазначения.СообщитьПользователю("Запрещено создавать элемент справочника вручную",,,, Отказ);
КонецПроцедуры

Процедура ЗапретУстановкиПометкиУдаленияИзТекущейБазы(Отказ) Экспорт
	ОбщегоНазначения.СообщитьПользователю("Запрещено устанавливать/снимать пометку удаления по справочникам баз холдинга",,,, Отказ);
КонецПроцедуры

Функция ПолучитьГуидыБлокированныхПользователей(БазаХолдинга)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь КАК Пользователь,
	|	гхб_ПользователиБазХолдинга.GUIDБазыХолдинга КАК GUIDБазыХолдинга
	|ИЗ
	|	РегистрСведений.гхб_ДатыБлокировокПользователейБазХолдинга.СрезПоследних(, БазаХолдинга = &БазаХолдинга) КАК ДатыБлокировокПользователейБазХолдингаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПользователиБазХолдинга КАК гхб_ПользователиБазХолдинга
	|		ПО ДатыБлокировокПользователейБазХолдингаСрезПоследних.Пользователь = гхб_ПользователиБазХолдинга.Ссылка
	|ГДЕ
	|	ДатыБлокировокПользователейБазХолдингаСрезПоследних.Блокирован";
	
	Запрос.УстановитьПараметр("БазаХолдинга", БазаХолдинга);
	
	мДанные = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		соотГуид = Новый Соответствие;
		соотГуид.Вставить("guid", Выборка.GUIDБазыХолдинга);
		
		мДанные.Добавить(соотГуид);
		
	КонецЦикла;
	
	Возврат Новый Структура("ГУИДыБлокированных", мДанные);

КонецФункции // ПолучитьГуидыБлокированныхПользователей()

Функция ПолучитьРабочееПомещение(РабочееПомещениеСтрока, тзРабочиеПомещения)
	
	мнСтрока = СтрЗаменить(СтрЗаменить(РабочееПомещениеСтрока, " ", ""), ";", Символы.ПС);
	
	Корпус = "";
	Офис = "";
	Этаж = "";
	
	Для ТекСтрока = 1 По СтрЧислоСтрок(мнСтрока) Цикл
		
		текСтрокаКакСтрока = СтрПолучитьСтроку(мнСтрока, ТекСтрока);
		
		Если СтрЧислоВхождений(текСтрокаКакСтрока, "Корпус:") > 0 Тогда
			Корпус = СокрЛП(СтрЗаменить(текСтрокаКакСтрока, "Корпус:", ""));
		КонецЕсли;
		
		Если СтрЧислоВхождений(текСтрокаКакСтрока, "Этаж:") > 0 Тогда
			Этаж = СокрЛП(СтрЗаменить(текСтрокаКакСтрока, "Этаж:", ""));
		КонецЕсли;
		
		Если СтрЧислоВхождений(текСтрокаКакСтрока, "Офис:") > 0 Тогда
			Офис = СокрЛП(СтрЗаменить(текСтрокаКакСтрока, "Офис:", ""));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Корпус) И ЗначениеЗаполнено(Офис) И ЗначениеЗаполнено(Этаж) Тогда
	
		мНайденное = тзРабочиеПомещения.НайтиСтроки(Новый Структура("Корпус,Офис,Этаж", Корпус, Офис, Этаж));
		
		Если мНайденное.Количество() > 0 Тогда
			Возврат мНайденное[0].Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьРабочееПомещение()

Функция ПолучитьТаблицуРабочихПомещений()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_РабочиеПомещения.Ссылка КАК Ссылка,
	|	гхб_РабочиеПомещения.Корпус КАК Корпус,
	|	гхб_РабочиеПомещения.Этаж КАК Этаж,
	|	гхб_РабочиеПомещения.Офис КАК Офис
	|ИЗ
	|	Справочник.гхб_РабочиеПомещения КАК гхб_РабочиеПомещения
	|ГДЕ
	|	НЕ гхб_РабочиеПомещения.ПометкаУдаления";
	
	тзРабочиеПомещения = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРабочееПомещение Из тзРабочиеПомещения Цикл
	
		СтрокаРабочееПомещение.Корпус = ВРег(СтрокаРабочееПомещение.Корпус);
		СтрокаРабочееПомещение.Этаж = ВРег(СтрокаРабочееПомещение.Этаж);
		СтрокаРабочееПомещение.Офис = ВРег(СтрокаРабочееПомещение.Офис);
	
	КонецЦикла;
	
	Возврат тзРабочиеПомещения;

КонецФункции // ПолучитьТаблицуРабочихПомещений()

Функция ПолучитьФизЛицоТекущейБазы(ИНН)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гхб_ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|ГДЕ
	|	НЕ гхб_ФизическиеЛица.ЭтоГруппа
	|	И НЕ гхб_ФизическиеЛица.ПометкаУдаления
	|	И гхб_ФизическиеЛица.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьФизЛицоТекущейБазы()

Функция ПолучитьДанныеДляСтрокаОтправкиСМС(ФизЛицо) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Телефон,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидТелефона
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ВнутреннийТелефон))
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) ПОДОБНО ""044%""
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид,
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Телефон,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидТелефона
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя))
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) ПОДОБНО ""044%""
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид,
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ЕстьДанные,ФизЛицо,Телефон,ВидТелефона", Истина, ФизЛицо, Выборка.Телефон, Выборка.ВидТелефона);
	Иначе
	
		ВыборкаНеКорпоративный = Пакет[1].Выбрать();
		
		Если ВыборкаНеКорпоративный.Следующий() Тогда
			Возврат Новый Структура("ЕстьДанные,ФизЛицо,Телефон,ВидТелефона", Истина, 
											ФизЛицо, 
											ВыборкаНеКорпоративный.Телефон, 
											ВыборкаНеКорпоративный.ВидТелефона);
		Иначе
			Возврат Новый Структура("ЕстьДанные", Ложь);
		КонецЕсли;
	
	КонецЕсли;

КонецФункции // ПолучитьДанныеДляСтрокаОтправкиСМС()

Функция ПолучитьТелефонПоМестуРаботы(ФизЛицо) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Телефон,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидТелефона
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|				ПО (гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|					И (гхб_СотрудникиБазХолдинга.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|			ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ВнутреннийТелефон)
	|				ИЛИ гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника))
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|	И НЕ ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) ПОДОБНО ""044%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)),
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Мыло,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидТелефона
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|				ПО (гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|					И (гхб_СотрудникиБазХолдинга.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыЗанятостиВОрганизации.Совместительство))
	|			ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ВнутреннийТелефон)
	|				ИЛИ гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонСотрудника))
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|	И НЕ ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) ПОДОБНО ""044%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)),
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ЕстьДанные,ФизЛицо,Телефон,ВидТелефона", Истина, ФизЛицо, Выборка.Телефон, Выборка.ВидТелефона);
	Иначе
	
		ВыборкаНеКорпоративный = Пакет[1].Выбрать();
		
		Если ВыборкаНеКорпоративный.Следующий() Тогда
			Возврат Новый Структура("ЕстьДанные,ФизЛицо,Телефон,ВидТелефона", Истина, 
											ФизЛицо, 
											ВыборкаНеКорпоративный.Телефон, 
											ВыборкаНеКорпоративный.ВидТелефона);
		Иначе
			Возврат Новый Структура("ЕстьДанные", Ложь);
		КонецЕсли;
	
	КонецЕсли;

КонецФункции // ПолучитьТелефонПоМестуРаботы()

Функция ПолучитьЭлектроннуюПочтуПоФизЛицуПоМестуРаботы(ФизЛицо) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Мыло,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|				ПО (гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|					И (гхб_СотрудникиБазХолдинга.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|			ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя))
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)),
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Мыло,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|				ПО (гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка)
	|					И (гхб_СотрудникиБазХолдинга.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыЗанятостиВОрганизации.Совместительство))
	|			ПО гхб_ФизическиеЛицаБазХолдинга.Ссылка = гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя))
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)),
	|	гхб_КонтактнаяИнформацияБазХолдинга.Объект";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	ВыборкаСовместительство = Пакет[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ЕстьДанные,ФизЛицо,Мыло", Истина, ФизЛицо, Выборка.Мыло);
	ИначеЕсли ВыборкаСовместительство.Следующий() Тогда
		Возврат Новый Структура("ЕстьДанные,ФизЛицо,Мыло", Истина, ФизЛицо, ВыборкаСовместительство.Мыло);
	Иначе
		Возврат Новый Структура("ЕстьДанные", Ложь);
	КонецЕсли;

КонецФункции // ПолучитьЭлектроннуюПочтуПоФизЛицуПоМестуРаботы()

Функция ПолучитьСписокТелефоновПользователя(ФизЛицо) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Телефон
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя))
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) ПОДОБНО ""044%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))";
	
	сзТелефоны = Новый СписокЗначений;
	
	резЗапрос = Запрос.Выполнить();
	
	Если Не резЗапрос.Пустой() Тогда
		сзТелефоны.ЗагрузитьЗначения(резЗапрос.Выгрузить().ВыгрузитьКолонку("Телефон"));
	КонецЕсли;
	
	Возврат сзТелефоны;
	
КонецФункции // ПолучитьСписокТелефоновПользователя()

Функция ПолучитьВидТелефона(ФизЛицо, Телефон) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50)) КАК Телефон,
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид КАК ВидТелефона
	|ИЗ
	|	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &Объект)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО &Телефон)
	|			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя))
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_КонтактнаяИнформацияБазХолдинга.Вид,
	|	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидТелефона;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСписокТелефоновПользователя()

Функция ПолучитьФизЛицПоРолиРуководителяИПодразделению(Подразделение, Роль) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ФизическиеЛицаБазХолдинга.Наименование КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.гхб_РуководителиПодразделенийБазХолдинга КАК гхб_РуководителиПодразделенийБазХолдинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|		ПО гхб_РуководителиПодразделенийБазХолдинга.ФизЛицо = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|			И (гхб_РуководителиПодразделенийБазХолдинга.ПодразделениеОрганизации = &Подразделение
	|				И гхб_РуководителиПодразделенийБазХолдинга.РольДокументооборота = &Роль)";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаРуководители = "";
	ПерваяИтерация = Истина;
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаРуководители = СтрокаРуководители + ?(ПерваяИтерация, "", Символы.ПС) + Выборка.ФизЛицо;
		ПерваяИтерация = Ложь;
	
	КонецЦикла;
	
	Возврат СтрокаРуководители;

КонецФункции // ПолучитьФизЛицПоРолиРуководителяИПодразделению()

Функция ВернутьВремяНаСервере() Экспорт 
	Возврат ТекущаяДатаСеанса();
КонецФункции

Процедура УдалитьНеактуальныхРуководителей(БазаХолдинга) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гхб_РуководителиПодразделенийБазХолдинга.БазаХолдинга КАК БазаХолдинга,
	|	гхб_РуководителиПодразделенийБазХолдинга.Организация КАК Организация,
	|	гхб_РуководителиПодразделенийБазХолдинга.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	гхб_РуководителиПодразделенийБазХолдинга.РольДокументооборота КАК РольДокументооборота,
	|	гхб_РуководителиПодразделенийБазХолдинга.ФизЛицо КАК ФизЛицо,
	|	гхб_РуководителиПодразделенийБазХолдинга.Должность КАК Должность,
	|	гхб_РуководителиПодразделенийБазХолдинга.ДатаЗаписи КАК ДатаЗаписи
	|ИЗ
	|	РегистрСведений.гхб_РуководителиПодразделенийБазХолдинга КАК гхб_РуководителиПодразделенийБазХолдинга
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(гхб_РуководителиПодразделенийБазХолдинга.ДатаЗаписи, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.гхб_РуководителиПодразделенийБазХолдинга.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БазаХолдинга.Установить(Выборка.БазаХолдинга);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ПодразделениеОрганизации.Установить(Выборка.ПодразделениеОрганизации);
		НаборЗаписей.Отбор.РольДокументооборота.Установить(Выборка.РольДокументооборота);
		НаборЗаписей.Отбор.ФизЛицо.Установить(Выборка.ФизЛицо);
		НаборЗаписей.Записать(); 
		
	КонецЦикла;

КонецПроцедуры // УдалитьНеактуальныхРуководителей()

Функция ПолучитьСписокФизЛицБазХолдинга(ФизЛицо) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|ГДЕ
	|	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &ФизЛицоТекущейБазы";
	
	Запрос.УстановитьПараметр("ФизЛицоТекущейБазы", ФизЛицо);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");

КонецФункции // ПолучитьСписокФизЛицБазХолдинга()

Функция ПроверитьДоступностьРоли(ИмяРоли) Экспорт
	Возврат РольДоступна(ИмяРоли);
КонецФункции // ПроверитьДоступностьРоли()

Функция ПреобразоватьСтрокуВДату(ДатаСтрока)
	Возврат Дата(Сред(ДатаСтрока, 1, 4), Сред(ДатаСтрока, 6, 2), Сред(ДатаСтрока, 9, 2));
КонецФункции // ПреобразоватьСтрокуВДату()

Функция ВычислитьВозрастФизЛицаОтносительноТекущейДаты(ДатаРождения) Экспорт

	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДеньРождения", Дата(Год(ТекущаяДатаСеанса()), Месяц(ДатаРождения), День(ДатаРождения)));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ДеньРождения > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|			ТОГДА РАЗНОСТЬДАТ(&ДатаРождения, &ТекущаяДата, ГОД) - 1
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаРождения, &ТекущаяДата, ГОД)
	|	КОНЕЦ КАК Возраст";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Возраст;
	
КонецФункции // ВычислитьВозрастФизЛицаОтносительноТекущейДаты()


#КонецОбласти 

#Область СлужебныеПроцедурыФункции

// ++ Тогушаков 10.04.2020 #13000 \\
Функция ПроверитьНаРабочуюБазу() Экспорт 

	СтрокаСоединенияСБазойБезКавычек = СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", "");
	
	Возврат ВРег(СтрокаСоединенияСБазойБезКавычек) = ВРег("Srvr=stb-bapp-003;Ref=GHB_2;");
	//Возврат ВРег(СтрокаСоединенияСБазойБезКавычек) = ВРег("Srvr=stb-d1c01;Ref=GHB_2_Tohushakov;");

КонецФункции // ПроверитьНаРабочуюБазу()// -- Тогушаков 10.04.2020 #13000

Функция ВернутьМассивУзловДляРегистрацииОбменаДаннымиСБазамиХолдинга() Экспорт
	
	Возврат ВернутьМассивУзловДляРегистрацииОбмена(ПланыОбмена.гхб_ВыгрузкаДанныхВБазыХолдинга);
	
КонецФункции

Функция ВернутьМассивУзловДляРегистрацииОбменаДаннымиБазаОхраны() Экспорт
	
	Возврат ВернутьМассивУзловДляРегистрацииОбмена(ПланыОбмена.гхб_ОбменДаннымиБазаОхраны);
	
КонецФункции

Функция ВернутьМассивУзловДляРегистрацииОбмена(_ПланОбмена)
	
	_МассивУзловДляРегистрации = Новый Массив();
	_Узлы = _ПланОбмена.Выбрать();

	Пока _Узлы.Следующий() Цикл 
		Если _Узлы.Ссылка = _ПланОбмена.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
	
		_МассивУзловДляРегистрации.Добавить(_Узлы.Ссылка);
	КонецЦикла;
	
	Возврат _МассивУзловДляРегистрации;
	
КонецФункции


// Возвращает значение в виде JSON-строки.
// Преобразованы в JSON-строку (сериализованы) могут быть только те объекты,
// для которых в описании указано, что они сериализуются.
//
// Параметры:
//   Значение - Произвольный. Значение, которое необходимо сериализовать в JSON-строку.
//
// Возвращаемое значение:
//   Строка - JSON-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуJSON(Значение) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Возвращает значение в виде структуры.
// Преобразование в структуру происходит из переданной JSON-строки.
//
// Параметры:
//   Значение - JSON-строка.
//
// Возвращаемое значение:
//   Структура - получена из JSON-строки.
//
Функция ЗначениеJSONВСтруктуру(Значение) Экспорт 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, Ложь);	
	
КонецФункции

#КонецОбласти

#Область РаботаСФайламиОтИмениСервернойУчетнойЗаписи

&НаСервере
Функция ПроверитьСуществованиеФайла(_ИмяФайла) Экспорт
	
	_Ф = Новый Файл(_ИмяФайла);
	Возврат _Ф.Существует();
	
КонецФункции

Функция ПоместитьФайлВХранилищеУчетнаяЗапись(_ИмяФайла, _Идентификатор = "") Экспорт
	
	_Структура = Новый Структура();
	_Структура.Вставить("Ошибка", "");
	_Структура.Вставить("Расширение", "");
	_Структура.Вставить("Адрес", "");
	_Структура.Вставить("ИмяБезРасширения", "");
	
	Попытка
		_Ф = Новый Файл(_ИмяФайла);
		_Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(_ИмяФайла), _Идентификатор);
		
		_Структура.Расширение = _Ф.Расширение;
		_Структура.Адрес = _Адрес;
		_Структура.ИмяБезРасширения = _Ф.ИмяБезРасширения;
		
		Возврат _Структура;
	Исключение
		_Структура.Ошибка = ОписаниеОшибки();
		
		Возврат _Структура;
	КонецПопытки;
	
КонецФункции

Функция СохранитьФайлИзХранилищеУчетнаяЗапись(_Адрес, _ИмяФайла) Экспорт
	
	Попытка
		_ДвоичныеДанные = ПолучитьИзВременногоХранилища(_Адрес);
		_ДвоичныеДанные.Записать(_ИмяФайла);
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция СоздатьПапкуПодУчетнойЗаписью(_Путь) Экспорт
	
	Попытка
		_Файл = Новый Файл(_Путь);
		
		Если _Файл.Существует() Тогда
			Возврат Истина;
		Иначе
			СоздатьКаталог(_Путь);
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция УдалитьФайлПодУчетнойЗаписью(_Путь) Экспорт
	
	Попытка
		УдалитьФайлы(_Путь);
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьОшибкуВФайл(_ПрефиксИмени, _ТекстОшибки) Экспорт
	
	ПутьСохранения = _ПрефиксИмени + "_" + Строка(Новый УникальныйИдентификатор()) + ".txt";

	Попытка
		ТекстДок = Новый ТекстовыйДокумент();
		ТекстДок.УстановитьТекст(_ТекстОшибки);
		ТекстДок.Записать(ПутьСохранения);
	Исключение
		ЗаписьЖурналаРегистрации("ЗаписатьОшибкуВФайл", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФизЛицами

Функция РазобратьДоменноеИмяНаСоставляющие(Знач _ДоменноеИмя) Экспорт
	
	_Структура = Новый Структура();
	_Структура.Вставить("Домен", Справочники.гхб_Домены.ПустаяСсылка());
	_Структура.Вставить("Логин", "");
	
	_ПозицияСлеша = СтрНайти(_ДоменноеИмя, гхб_ОбщегоНазначенияКлиентСервер.СимволРазделительДоменногоИмени());
	
	Если (_ПозицияСлеша = 0) Тогда
		_Структура.Логин = _ДоменноеИмя;
	Иначе
		_Структура.Домен = Справочники.гхб_Домены.ВернутьДоменПоНазванию(Лев(_ДоменноеИмя, _ПозицияСлеша - 1));
		_Структура.Логин = Прав(_ДоменноеИмя, СтрДлина(_ДоменноеИмя) - _ПозицияСлеша);
	КонецЕсли;
	
	Возврат _Структура;
	
КонецФункции

#КонецОбласти
