
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений.
// Создает электронное письмо.
// 
// Параметры:
//  Сообщение - см. ШаблоныСообщенийСлужебный.СформироватьСообщение
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, с которой будет отправлено письмо.
//  ОтправлятьСразу - Булево.
//  УдалятьПослеОтправки - Булево.
//
// Возвращаемое значение:
//  Структура - Описание:
//  * Отправлено - Булево - признак того, что письмо отправлено.
//  * ОписаниеОшибки - Строка - содержит описание ошибки, в случае если письмо отправить не удалось.
//
Функция СоздатьПисьмо(Сообщение, УчетнаяЗапись, ОтправлятьСразу = Ложь, УдалятьПослеОтправки = Истина) Экспорт
	
	РезультатОтправкиПисьма = Новый Структура("Отправлено, ОписаниеОшибки", Ложь);
	
	ПисьмоHTML = (Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
	
	НачатьТранзакцию();
	Попытка
		
		Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
		Письмо.Автор                    = Пользователи.ТекущийПользователь();
		Письмо.Ответственный            = Пользователи.ТекущийПользователь();
		Письмо.Дата                     = ТекущаяДатаСеанса();
		Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Письмо.Кодировка                = КодировкаТекста.UTF8;
		Письмо.ОтправительПредставление = Строка(УчетнаяЗапись);
		
		Если ПисьмоHTML Тогда
			
			Письмо.ТекстHTML = Сообщение.Текст;
			Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Сообщение.Текст);
			
		Иначе
			
			Письмо.Текст = Сообщение.Текст;
			
		КонецЕсли;
		
		Письмо.Тема = Сообщение.Тема;
		Письмо.ТипТекста = ?(ПисьмоHTML, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		Письмо.УчетнаяЗапись = УчетнаяЗапись;
		Письмо.ВзаимодействиеОснование = Неопределено;
		
		// Заполним реквизиты ВключатьТелоИсходногоПисьма, ОтображатьТелоИсходногоПисьма, УведомитьОДоставке и УведомитьОПрочтении.
		НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
		                           УчетнаяЗапись, Сообщение.ДополнительныеПараметры.ФорматПисьма, Истина);
		ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
		
		Письмо.УдалятьПослеОтправки = УдалятьПослеОтправки;
		Письмо.Комментарий = "";
		
		СписокПолучателейСпискомЗначений =( ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений"));
		Для Каждого ПолучательПисьма Из Сообщение.Получатель Цикл
			
			НоваяСтрока = Письмо["ПолучателиПисьма"].Добавить();
			
			Если СписокПолучателейСпискомЗначений Тогда
				НоваяСтрока.Адрес         = ПолучательПисьма.Значение;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
			Иначе
				НоваяСтрока.Адрес         = ПолучательПисьма.Адрес;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
				НоваяСтрока.Контакт       = ПолучательПисьма.ИсточникКонтактнойИнформации;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.СписокПолучателейПисьма    = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
		Письмо.СтатусПисьма = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик,
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		
		Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
		РазмерВложений  = 0;
		РазмерыВложений = Новый Соответствие;
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			Размер = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище).Размер() * 1.5;
			РазмерВложений = РазмерВложений + Размер;
			РазмерыВложений.Вставить(Вложение.АдресВоВременномХранилище, Размер);
			
			// Если у идентификатора не английские символы, то письмо может быть некорректно обработано.
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				Идентификатор = СтроковыеФункции.СтрокаЛатиницей(Вложение.Идентификатор);
				Письмо.ТекстHTML = СтрЗаменить(Письмо.ТекстHTML, "cid:" + Вложение.Идентификатор, "cid:" + Идентификатор);
				Вложение.Идентификатор = Идентификатор;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.Размер = РазмерВложений + СтрДлина(Письмо.Тема) * 2
			+ ?(ПисьмоHTML, СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст)) * 2;
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		
		Письмо.Записать();
		
		// Добавим вложения
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", Вложение.Представление);
			ПараметрыВложения.Вставить("Размер", РазмерыВложений[Вложение.АдресВоВременномХранилище]);
			
			МодульУправлениеЭлектроннойПочтой = ОбщегоНазначения.ОбщийМодуль("УправлениеЭлектроннойПочтой");
			Если ПустаяСтрока(Вложение.Идентификатор) Тогда
				
				МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, ПараметрыВложения);
					
			ИначеЕсли ПисьмоHTML Тогда
				
				ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.Идентификатор);
				ПрисоединенныйФайл = МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, ПараметрыВложения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Сообщение.ДополнительныеПараметры.Свойство("Предмет") И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.Предмет) Тогда
			Предмет = Сообщение.ДополнительныеПараметры.Предмет;
		Иначе
			Предмет = Письмо.Ссылка;
		КонецЕсли;
	
		Реквизиты       = СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Истина);
		Реквизиты.Папка = Взаимодействия.ОпределитьПапкуДляПисьма(Письмо.Ссылка);
		
		РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Письмо.Ссылка, Реквизиты);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонТекстаСообщения = НСтр("ru = 'Не удалось сформировать письмо по причине:
			|%1'");
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,, Письмо,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			
		РезультатОтправкиПисьма.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	Если ОтправлятьСразу Тогда
	
		Попытка
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонТекстаСообщения = НСтр("ru = 'Не удалось отправить письмо по причине:
					|%1'");
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, Письмо,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			
			РезультатОтправкиПисьма.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат РезультатОтправкиПисьма;
			
		КонецПопытки;
	
	КонецЕсли;
	
	Если НЕ Письмо.УдалятьПослеОтправки Тогда
		
		Попытка
			Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
			Письмо.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			Письмо.ДатаОтправления        = ТекущаяДатаСеанса();
			Письмо.Записать(РежимЗаписиДокумента.Запись);
			
			Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Письмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Письмо.Ссылка));
		Исключение
				
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонТекстаСообщения = НСтр("ru = 'Не удалось сохранить письмо в программе после успешной отправки по причине:
				|%1'");
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, Письмо,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
				
			РезультатОтправкиПисьма.Отправлено     = Истина;
			РезультатОтправкиПисьма.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат РезультатОтправкиПисьма;

		КонецПопытки;
				
	КонецЕсли;
	
	РезультатОтправкиПисьма.Отправлено = Истина;
	Возврат РезультатОтправкиПисьма;
	
КонецФункции

Функция СформироватьСтандартнуюТемуПисьма(ТекстПерваяЧасть = "", ТекстВтораяЧасть = "") Экспорт
	
	Возврат "1С" + ?(ЗначениеЗаполнено(ТекстПерваяЧасть), ": " + ТекстПерваяЧасть, "") + " [GHB 2.0]" 
				+ ?(ЗначениеЗаполнено(ТекстВтораяЧасть), ": " + ТекстВтораяЧасть, "");
					
КонецФункции

// Выполняет соединение с внешней SQL базой HoldingUsers, 
// в которой хранится сводная информация для различных обменов
//
// Возвращаемое значение:
//   Соединение - COMОбъект: если все прошло успешно
//				  Строка: описание ошибки при установке соединения
//
Функция ВернутьСоединениеОбщаяБазаПользователей() Экспорт 
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) ИЛИ (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
	
		_Настройка = Справочники.гхб_ВнешниеИсточники.ОбщаяБазаПользователей;
		
		СтрокаПодключения = _Настройка.ТипСоединения + ";";
		СтрокаПодключения = СтрокаПодключения + "server=" + СокрЛП(_Настройка.Сервер) + ";";
		СтрокаПодключения = СтрокаПодключения + "uid=" + СокрЛП(_Настройка.Пользователь) + ";";
		СтрокаПодключения = СтрокаПодключения + "pwd=" + СокрЛП(_Настройка.Пароль) + ";";
		СтрокаПодключения = СтрокаПодключения + "database=" + СокрЛП(_Настройка.БД) + ";";
		
		Соединение = Новый COMОбъект("ADODB.Connection"); 
		
		Попытка
			Соединение.Open(СтрокаПодключения); 
			Возврат Соединение;
		Исключение
			Возврат "Невозможно установить соединение с БД ""HoldingUsers""! " + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Возврат "Установить соединение с БД ""HoldingUsers"" можно только на платформе Windows.";
		
	КонецЕсли;
	
КонецФункции

// Заполняет поля ManagerFIO,  ManagerINN данными о руководителе
// во внешней SQL базе HoldingUsers
Процедура ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей() Экспорт 
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	Если НЕ (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) И НЕ (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		
		ЗаписьЖурналаРегистрации("ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей", УровеньЖурналаРегистрации.Ошибка, , , 
			"Запись данных в БД ""HoldingUsers"" возможно только на платформе Windows.");
		
	Иначе	
		
		Соединение = гхб_ВзаимодействияСервер.ВернутьСоединениеОбщаяБазаПользователей();

		Если ТипЗнч(Соединение) = Тип("Строка") Тогда
			ЗаписьЖурналаРегистрации("ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей", УровеньЖурналаРегистрации.Ошибка, , ,
				"Ошибка при подключении к базе ""HoldingUsers"": " + Соединение);
		Иначе	
			
			ЗапросРуководители = Новый Запрос();
			ЗапросРуководители.Текст = "ВЫБРАТЬ
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Период КАК Период,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга КАК БазаХолдинга,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация КАК Организация,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник КАК Сотрудник,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность КАК Должность,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Дивизион КАК Дивизион,
			                           |	ПОДСТРОКА(гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции, 1, 2) КАК БюджетныйКодПозиции,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ГруппаДивизиона КАК ГруппаДивизиона
			                           |ПОМЕСТИТЬ втСПробелами
			                           |ИЗ
			                           |	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
			                           |ГДЕ
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
			                           |	И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции ПОДОБНО ""%-   -%""
			                           |	И НЕ гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции ПОДОБНО ""  -%""
			                           |	И НЕ гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции = """"
			                           |	И НЕ гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции = ""-""
			                           |	И НЕ гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции = ""-   -""
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |ВЫБРАТЬ
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга КАК БазаХолдинга,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация КАК Организация,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник КАК Сотрудник,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность КАК Должность,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.УровеньДолжности КАК УровеньДолжности,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.ПризнакПозиции КАК ПризнакПозиции,
			                           |	МАКСИМУМ(гхб_РаботникиОрганизацийБазХолдингаРуководители.Сотрудник) КАК Руководитель,
			                           |	ВЫБОР
			                           |		КОГДА гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ЕСТЬ NULL
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = """"
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = ""-""
			                           |			ТОГДА ИСТИНА
			                           |		ИНАЧЕ ЛОЖЬ
			                           |	КОНЕЦ КАК НетБюджетногоКодаРуководителя,
			                           |	ВЫБОР
			                           |		КОГДА гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%- -%""
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%-   -%""
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%-  -%""
			                           |			ТОГДА ПОДСТРОКА(гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя, 1, 2)
			                           |		ИНАЧЕ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя
			                           |	КОНЕЦ КАК БюджетныйКодДляСвязи
			                           |ПОМЕСТИТЬ втДанные
			                           |ИЗ
			                           |	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
			                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_ШтатноеРасписаниеБазХолдинга.СрезПоследних КАК гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних
			                           |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаРуководители
			                           |			ПО гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = гхб_РаботникиОрганизацийБазХолдингаРуководители.БюджетныйКодПозиции
			                           |				И (НЕ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = """")
			                           |				И (НЕ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = ""-"")
			                           |				И (НЕ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = ""-   -"")
			                           |				И (НЕ гхб_РаботникиОрганизацийБазХолдингаРуководители.БюджетныйКодПозиции = """")
			                           |				И (НЕ гхб_РаботникиОрганизацийБазХолдингаРуководители.БюджетныйКодПозиции = ""-"")
			                           |				И (НЕ гхб_РаботникиОрганизацийБазХолдингаРуководители.БюджетныйКодПозиции = ""-   -"")
			                           |		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БазаХолдинга
			                           |			И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.Организация
			                           |			И гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПозицияШтатногоРасписания = гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.Позиция
			                           |ГДЕ
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
			                           |	И (гхб_РаботникиОрганизацийБазХолдингаРуководители.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
			                           |			ИЛИ гхб_РаботникиОрганизацийБазХолдингаРуководители.ПричинаИзмененияСостояния ЕСТЬ NULL)
			                           |
			                           |СГРУППИРОВАТЬ ПО
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.УровеньДолжности,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Организация,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Должность,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПозицияШтатногоРасписания,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПодразделениеОрганизации,
			                           |	гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.ПризнакПозиции,
			                           |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БюджетныйКодПозиции,
			                           |	ВЫБОР
			                           |		КОГДА гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%- -%""
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%-   -%""
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ПОДОБНО ""%-  -%""
			                           |			ТОГДА ПОДСТРОКА(гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя, 1, 2)
			                           |		ИНАЧЕ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя
			                           |	КОНЕЦ,
			                           |	ВЫБОР
			                           |		КОГДА гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя ЕСТЬ NULL
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = """"
			                           |				ИЛИ гхб_ШтатноеРасписаниеБазХолдингаСрезПоследних.БюджетныйКодПозицииРуководителя = ""-""
			                           |			ТОГДА ИСТИНА
			                           |		ИНАЧЕ ЛОЖЬ
			                           |	КОНЕЦ
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |ВЫБРАТЬ
			                           |	втДанные.БазаХолдинга КАК БазаХолдинга,
			                           |	втДанные.Организация КАК Организация,
			                           |	втДанные.Сотрудник КАК Сотрудник,
			                           |	втДанные.Должность КАК Должность,
			                           |	втДанные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			                           |	втДанные.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			                           |	втДанные.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
			                           |	втДанные.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
			                           |	втДанные.УровеньДолжности КАК УровеньДолжности,
			                           |	втДанные.ПризнакПозиции КАК ПризнакПозиции,
			                           |	ВЫБОР
			                           |		КОГДА втДанные.Руководитель ЕСТЬ NULL
			                           |			ТОГДА втСПробелами.Сотрудник
			                           |		ИНАЧЕ втДанные.Руководитель
			                           |	КОНЕЦ КАК Руководитель,
			                           |	втДанные.НетБюджетногоКодаРуководителя КАК НетБюджетногоКодаРуководителя
			                           |ПОМЕСТИТЬ втГруппированная
			                           |ИЗ
			                           |	втДанные КАК втДанные
			                           |		ЛЕВОЕ СОЕДИНЕНИЕ втСПробелами КАК втСПробелами
			                           |		ПО (ВЫБОР
			                           |				КОГДА втДанные.Руководитель ЕСТЬ NULL
			                           |					ТОГДА втДанные.БюджетныйКодДляСвязи = втСПробелами.БюджетныйКодПозиции
			                           |				ИНАЧЕ ЛОЖЬ
			                           |			КОНЕЦ)
			                           |			И (втСПробелами.БюджетныйКодПозиции <> """")
			                           |			И (втСПробелами.БюджетныйКодПозиции <> ""  "")
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |ВЫБРАТЬ
			                           |	втГруппированная.БазаХолдинга КАК БазаХолдингаПоле,
			                           |	втГруппированная.Организация КАК ОрганизацияПоле,
			                           |	втГруппированная.Сотрудник КАК СотрудникПоле,
			                           |	втГруппированная.Должность КАК ДолжностьПоле,
			                           |	втГруппированная.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПоле,
			                           |	втГруппированная.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписанияПоле,
			                           |	втГруппированная.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
			                           |	втГруппированная.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
			                           |	втГруппированная.УровеньДолжности КАК УровеньДолжности,
			                           |	втГруппированная.ПризнакПозиции КАК ПризнакПозиции,
			                           |	МАКСИМУМ(втГруппированная.Руководитель) КАК Руководитель,
			                           |	втГруппированная.НетБюджетногоКодаРуководителя КАК НетБюджетногоКодаРуководителя,
			                           |	ВЫБОР
			                           |		КОГДА втГруппированная.Руководитель ЕСТЬ NULL
			                           |			ТОГДА ИСТИНА
			                           |		ИНАЧЕ ЛОЖЬ
			                           |	КОНЕЦ КАК НетРуководителя,
			                           |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втГруппированная.Руководитель) КАК БольшеОдногоРуководителяЧисло
			                           |ПОМЕСТИТЬ втКрайняя
			                           |ИЗ
			                           |	втГруппированная КАК втГруппированная
			                           |
			                           |СГРУППИРОВАТЬ ПО
			                           |	втГруппированная.БазаХолдинга,
			                           |	втГруппированная.Организация,
			                           |	втГруппированная.Сотрудник,
			                           |	втГруппированная.Должность,
			                           |	втГруппированная.ПодразделениеОрганизации,
			                           |	втГруппированная.ПозицияШтатногоРасписания,
			                           |	втГруппированная.БюджетныйКодПозиции,
			                           |	втГруппированная.БюджетныйКодПозицииРуководителя,
			                           |	втГруппированная.УровеньДолжности,
			                           |	втГруппированная.ПризнакПозиции,
			                           |	втГруппированная.НетБюджетногоКодаРуководителя,
			                           |	ВЫБОР
			                           |		КОГДА втГруппированная.Руководитель ЕСТЬ NULL
			                           |			ТОГДА ИСТИНА
			                           |		ИНАЧЕ ЛОЖЬ
			                           |	КОНЕЦ
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |ВЫБРАТЬ
			                           |	втКрайняя.БазаХолдингаПоле КАК БазаХолдингаПоле,
			                           |	втКрайняя.ОрганизацияПоле КАК ОрганизацияПоле,
			                           |	втКрайняя.СотрудникПоле КАК СотрудникПоле,
			                           |	втКрайняя.ДолжностьПоле КАК ДолжностьПоле,
			                           |	втКрайняя.ПодразделениеОрганизацииПоле КАК ПодразделениеОрганизацииПоле,
			                           |	втКрайняя.ПозицияШтатногоРасписанияПоле КАК ПозицияШтатногоРасписанияПоле,
			                           |	втКрайняя.БюджетныйКодПозиции КАК БюджетныйКодПозиции,
			                           |	втКрайняя.БюджетныйКодПозицииРуководителя КАК БюджетныйКодПозицииРуководителя,
			                           |	втКрайняя.УровеньДолжности КАК УровеньДолжности,
			                           |	втКрайняя.ПризнакПозиции КАК ПризнакПозиции,
			                           |	втКрайняя.Руководитель КАК Руководитель,
			                           |	втКрайняя.НетБюджетногоКодаРуководителя КАК НетБюджетногоКодаРуководителя,
			                           |	втКрайняя.НетРуководителя КАК НетРуководителя,
			                           |	ВЫБОР
			                           |		КОГДА втКрайняя.БольшеОдногоРуководителяЧисло > 1
			                           |			ТОГДА ИСТИНА
			                           |		ИНАЧЕ ЛОЖЬ
			                           |	КОНЕЦ КАК БольшеОдногоРуководителя,
			                           |	гхб_ФизическиеЛица.Ссылка КАК ФизЛицоПоле,
			                           |	гхб_ФизическиеЛица.ИНН КАК ИНН,
			                           |	втКрайняя.Руководитель.ФизЛицоБазыХолдинга.ИНН КАК РуководительИНН,
			                           |	втКрайняя.Руководитель.ФизЛицоБазыХолдинга.ДоменноеИмя КАК РуководительДоменноеИмя,
			                           |	втКрайняя.Руководитель.ФизЛицоБазыХолдинга КАК РуководительФЛ
			                           |ИЗ
			                           |	втКрайняя КАК втКрайняя
			                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
			                           |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
			                           |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
			                           |				ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
			                           |			ПО гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка
			                           |		ПО втКрайняя.СотрудникПоле = гхб_СотрудникиБазХолдинга.Ссылка
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |УНИЧТОЖИТЬ втКрайняя
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |УНИЧТОЖИТЬ втГруппированная
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |УНИЧТОЖИТЬ втДанные
			                           |;
			                           |
			                           |////////////////////////////////////////////////////////////////////////////////
			                           |УНИЧТОЖИТЬ втСПробелами";
			
			ВыборкаРуководители = ЗапросРуководители.Выполнить().Выбрать();
			
			Записи = Новый COMОбъект("ADODB.Recordset"); 
			Команда = Новый COMObject("ADODB.Command");
			Команда.ActiveConnection = Соединение;
			
			Попытка
				Команда.CommandText = "update Data SET ManagerFIO = '', ManagerINN = ''";
				
				НаборЗаписей = Команда.Execute();
				
				Пока ВыборкаРуководители.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаРуководители.Руководитель) Тогда 
					
						Попытка
							
							_Руководитель = ?(ЗначениеЗаполнено(ВыборкаРуководители.РуководительФЛ), ВыборкаРуководители.РуководительФЛ, ВыборкаРуководители.Руководитель);
							
							Команда.CommandText = "UPDATE Data 
								|SET ManagerFIO = " + ВернутьЗначениеДляВставкиВБазуSQL(СокрЛП(_Руководитель)) + ", 
								|	 ManagerINN = " + ВернутьЗначениеДляВставкиВБазуSQL(СокрЛП(ВыборкаРуководители.РуководительИНН)) + " 
								|WHERE INN = " + ВернутьЗначениеДляВставкиВБазуSQL(СокрЛП(ВыборкаРуководители.ИНН));
					
							НаборЗаписей = Команда.Execute();
							
						Исключение
							ЗаписьЖурналаРегистрации("ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей", УровеньЖурналаРегистрации.Ошибка, , ,
								"Ошибка обновления данных для ФИО (" + ВыборкаРуководители.ИНН + "): " + ОписаниеОшибки());			
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Исключение		
				ЗаписьЖурналаРегистрации("ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей", УровеньЖурналаРегистрации.Ошибка, , ,
					"Ошибка очистки данных по руководителям: " + ОписаниеОшибки());			
				
				Соединение.Close();	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует пользователей в базах
Функция ЗаблокироватьПользователейВБазеХолдинга(_ДатаБлокировки, _МассивПользователей) Экспорт 
	
	_ЗаблокированныеПользователи = Новый Массив();
	
	ТаблицаИстории = Новый ТаблицаЗначений;
	ТаблицаИстории.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаИстории.Колонки.Добавить("БазаХолдинга", Новый ОписаниеТипов("СправочникСсылка.гхб_БазыХолдинга"));
	ТаблицаИстории.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.гхб_ПользователиБазХолдинга"));
	ТаблицаИстории.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.гхб_ТипыОбменовДляБазХолдинга"));
	ТаблицаИстории.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаИстории.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Для Каждого СтрПользователь Из _МассивПользователей Цикл
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УИДПользователя", СтрПользователь.GUIDБазыХолдинга);
		СтруктураПараметров.Вставить("ДатаБлокировки", _ДатаБлокировки);
		
		ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(СтрПользователь.БазаХолдинга.ВнешнийИсточникПоУмолчанию, 
															"ДобавитьДатуБлокировкиПользователя", 
															СтруктураПараметров);
															
		Если НЕ ОтветСервиса.ОбменПрошел Тогда
			ОбщегоНазначения.СообщитьПользователю(ОтветСервиса.ТекстОшибки + ". База - " + СтрПользователь.БазаХолдинга);
		ИначеЕсли НЕ ОтветСервиса.Результат.result.Данные[0].БлокировкаУстановлена Тогда
			ОбщегоНазначения.СообщитьПользователю("Не удалось установить дату блокировки. База - " + СтрПользователь.БазаХолдинга);
		Иначе	
			
			_ЗаблокированныеПользователи.Добавить(СтрПользователь.Ссылка);
			
			НовСтр = ТаблицаИстории.Добавить();
			НовСтр.Объект = СтрПользователь.Ссылка;
			НовСтр.БазаХолдинга = СтрПользователь.Ссылка.БазаХолдинга;
			
			ОбщегоНазначения.СообщитьПользователю("Дата блокировки установлена. База - " + СтрПользователь.БазаХолдинга);
			
		КонецЕсли; 															
	
	КонецЦикла;
	
	ТаблицаИстории.ЗаполнитьЗначения(гхб_ОбщегоНазначенияСервер.ВернутьВремяНаСервере(), "Период");
	ТаблицаИстории.ЗаполнитьЗначения(Перечисления.гхб_ТипыОбменовДляБазХолдинга.БлокировкаПользователя, "Тип");
	ТаблицаИстории.ЗаполнитьЗначения(_ДатаБлокировки, "Значение");
	ТаблицаИстории.ЗаполнитьЗначения(ПараметрыСеанса.ТекущийПользователь, "Пользователь");
	
	РегистрыСведений.гхб_ИсторияОбменовСБазамиХолдинга.ЗаписатьДанныеВРегистр(ТаблицаИстории);
	
	Возврат _ЗаблокированныеПользователи;
	
КонецФункции

// Отправляет письмо под учетной записью по-умолчанию
Функция ОтправитьПисьмоПодУчетнойЗаписью1С(_Сообщение) Экспорт 
	
	Возврат Взаимодействия.СоздатьПисьмо(_Сообщение, Справочники.гхб_СлужебныеЗначения.УчетнаяЗаписьdeveloper1c.Значение);
	
КонецФункции

// Возвращает ФизЛицо текущей базы для указанного сотрудника
Функция ВернутьФизЛицоТекущейБазыДляСотрудника(_Сотрудник) Экспорт 
	
	_ФЛ = Справочники.гхб_ФизическиеЛица.ПустаяСсылка();
	
	Если ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.Пользователи") Тогда
		_ФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизическоеЛицо");
	ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ФизическиеЛица") Тогда
		_ФЛ = _Сотрудник;
	ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ФизическиеЛицаБазХолдинга") Тогда
		_ФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизЛицоТекущейБазы");
	ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_СотрудникиБазХолдинга") Тогда
		_ФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизЛицоБазыХолдинга"), 
			"ФизЛицоТекущейБазы");
	ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ПользователиБазХолдинга") Тогда
		_ФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизЛицоБазыХолдинга"), 
			"ФизЛицоТекущейБазы");
	КонецЕсли;
	
	Возврат _ФЛ;
	
КонецФункции

// Возвращает массив ФизЛиц баз холдинга для указанного сотрудника
Функция ВернутьФизЛицБазХолдингаДляСотрудника(_Сотрудник) Экспорт 
	
	_Массив = Новый Массив();
	
	Если ЗначениеЗаполнено(_Сотрудник) Тогда
	
		_ФЛ = Неопределено;
		
		Если ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.Пользователи") Тогда
			_ФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизическоеЛицо");
		ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ФизическиеЛица") Тогда
			_ФЛ = _Сотрудник;
		ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ФизическиеЛицаБазХолдинга") Тогда
			_Массив.Добавить(_Сотрудник);
		ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_СотрудникиБазХолдинга") Тогда
			_Массив.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизЛицоБазыХолдинга"));
		ИначеЕсли ТипЗнч(_Сотрудник) = Тип("СправочникСсылка.гхб_ПользователиБазХолдинга") Тогда
			_Массив.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Сотрудник, "ФизЛицоБазыХолдинга"));
		КонецЕсли;
		
		Если НЕ (_ФЛ = Неопределено) Тогда
			_Массив = ВернутьФизЛицБазХолдингаДляФизЛицаТекущейБазы(_ФЛ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Массив;
	
КонецФункции

// Возвращает массив ФизЛиц баз холдинга для указанного ФизЛица текущей базы
Функция ВернутьФизЛицБазХолдингаДляФизЛицаТекущейБазы(_ФЛ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ФизическиеЛицаБазХолдинга.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	               |ГДЕ
	               |	гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &ФизЛицоТекущейБазы";
	
	Запрос.УстановитьПараметр("ФизЛицоТекущейБазы", _ФЛ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает почтовый ящик. 
// Передавать можно элементы спр. "Пользователи", "гхб_ФизическиеЛица", "гхб_СотрудникиБазХолдинга", "гхб_ФизическиеЛицаБазХолдинга"
Функция ВернутьПочтовыйЯщикСотрудника(_Сотрудник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		_Почта = "";
		_ФЛ = ВернутьФизЛицоТекущейБазыДляСотрудника(_Сотрудник);
		
		Если ЗначениеЗаполнено(_ФЛ) Тогда 
		
			_Почта = ВернутьПервоеЗначениеКонтактнойИнформации(_ФЛ, Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя, 
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
	КонецПопытки;
	
	Возврат _Почта;
	
КонецФункции

// Возвращает телефон
// Передавать можно элементы спр. "Пользователи", "гхб_ФизическиеЛица", "гхб_СотрудникиБазХолдинга", "гхб_ФизическиеЛицаБазХолдинга"
Функция ВернутьТелефонДляСМССотрудника(_Сотрудник) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		_Телефон = "";
		_МассивФЛ = ВернутьФизЛицБазХолдингаДляСотрудника(_Сотрудник);
		
		Если НЕ (_МассивФЛ.Количество() = 0) Тогда 
		
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.ФизЛицоБазыХолдинга КАК ФизЛицо
			               |ИЗ
			               |	РегистрСведений.гхб_СоответствиеНомеровТелефоновФизЛицам.СрезПоследних КАК гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних
			               |ГДЕ
			               |	гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.ФизЛицоБазыХолдинга В(&ФизЛицоБазыХолдинга)
			               |	И гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.ТипУстройства = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыУстройствМобильнойСвязи.Телефон)
			               |	И гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.Использование = ЗНАЧЕНИЕ(Перечисление.гхб_ИспользованиеНомеровТелефонов.ЗаФизЛицом)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))
			               |ИЗ
			               |	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
			               |		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
			               |			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
			               |			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ВнутреннийТелефон))
			               |ГДЕ
			               |	гхб_ФизическиеЛицаБазХолдинга.Ссылка В(&ФизЛицоБазыХолдинга)
			               |	И НЕ гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО """"
			               |	И НЕ гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО ""044%""
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(50))
			               |ИЗ
			               |	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
			               |		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
			               |			И (гхб_КонтактнаяИнформацияБазХолдинга.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
			               |			И (гхб_КонтактнаяИнформацияБазХолдинга.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя))
			               |ГДЕ
			               |	гхб_ФизическиеЛицаБазХолдинга.Ссылка В(&ФизЛицоБазыХолдинга)
			               |	И НЕ гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО """"
			               |	И НЕ гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО ""044%""";
			
			Запрос.УстановитьПараметр("ФизЛицоБазыХолдинга", _МассивФЛ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			_Телефон = ?(Выборка.Следующий(), Выборка.НомерТелефона, "");
			
			Если ЗначениеЗаполнено(_Телефон) Тогда
				_Телефон = гхб_ОбщегоНазначенияКлиентСервер.НормализоватьТелефонДляСМС(_Телефон, "80");					
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
	КонецПопытки;
	
	Возврат _Телефон;	
	
КонецФункции

// Возвращает физ лицо базы холдинга по номеру телефона
Функция ВернутьФизЛицоПоНомеруТелефона(Знач _НомерТелефона) Экспорт 
	
	_Результат = Справочники.гхб_ФизическиеЛицаБазХолдинга.ПустаяСсылка();
	_Телефон = гхб_ОбщегоНазначенияКлиентСервер.НормализоватьТелефонДляСМС(_НомерТелефона);
	
	Если ЗначениеЗаполнено(_Телефон) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.ФизЛицоБазыХолдинга КАК ФизЛицо
		               |ИЗ
		               |	РегистрСведений.гхб_СоответствиеНомеровТелефоновФизЛицам.СрезПоследних КАК гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних
		               |ГДЕ
		               |	гхб_СоответствиеНомеровТелефоновФизЛицамСрезПоследних.НомерТелефона.Наименование ПОДОБНО &Телефон
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	гхб_КонтактнаяИнформацияБазХолдинга.Объект
		               |ИЗ
		               |	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
		               |ГДЕ
		               |	гхб_КонтактнаяИнформацияБазХолдинга.Представление ПОДОБНО &Телефон";
		
		Запрос.УстановитьПараметр("Телефон", "%" + _Телефон);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		_МассивФЛ = ВернутьФизЛицБазХолдингаДляСотрудника(?(Выборка.Следующий(), Выборка.ФизЛицо, Справочники.гхб_ФизическиеЛицаБазХолдинга.ПустаяСсылка()));
		
		Если НЕ (_МассивФЛ.Количество() = 0) Тогда
			_Результат = _МассивФЛ.Получить(0);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Результат;
	
КонецФункции

// Возвращает значение из контактных данных по указанному физлицу (гхб_ФизическиеЛица), виду и типу информации
Функция ВернутьПервоеЗначениеКонтактнойИнформации(_ФЛ, _Вид, _Тип) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(500)) КАК Представление
	               |ИЗ
	               |	РегистрСведений.гхб_КонтактнаяИнформацияБазХолдинга КАК гхб_КонтактнаяИнформацияБазХолдинга
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	               |		ПО гхб_КонтактнаяИнформацияБазХолдинга.Объект = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	               |			И (гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = &ФизЛицоТекущейБазы)
	               |ГДЕ
	               |	гхб_КонтактнаяИнформацияБазХолдинга.Объект ССЫЛКА Справочник.гхб_ФизическиеЛицаБазХолдинга
	               |	И гхб_КонтактнаяИнформацияБазХолдинга.Тип = &Тип
	               |	И гхб_КонтактнаяИнформацияБазХолдинга.Вид = &Вид
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫРАЗИТЬ(гхб_КонтактнаяИнформацияБазХолдинга.Представление КАК СТРОКА(500))";
	
	Запрос.УстановитьПараметр("ФизЛицоТекущейБазы", _ФЛ);
	Запрос.УстановитьПараметр("Вид", _Вид);
	Запрос.УстановитьПараметр("Тип", _Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Представление, "");
	
КонецФункции

// Создает электронное письмо для отправки
//
// Параметры:
//  СписокПолучателей - СписокЗначений, Массив, Строка - Список получателей, в значениях должен стоять адрес, строка адресов, разделенных ";"
//  Тема - Строка.
//  Текст - Строка.
// 	СтруктураДопПараметров - Структура:
//  	СоответсвиеВложений - Соотвествие - Ключ (Представление файла во вложении), Значение (Путь к файлу строкой или адрес во временном хранилище для вызова с клиента)
//  	ФорматПисьма - Перечисление.СпособыРедактированияЭлектронныхПисем - Формат письма (ОбычныйТекст, HTML)
//  	ВнешнийИсточник - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Почтовый профиль, от корого будет произведена рассылка 
//  	ОтправлятьСразу - Булево.
//  	УдалятьПослеОтправки - Булево.
//
Процедура СоздатьЭлектронноеПисьмо(СписокПолучателей, Тема, Текст, СтруктураДопПараметров = Неопределено) Экспорт

	//++ a.romanchuk 03.11.2020 #
	Если (СтруктураДопПараметров = Неопределено) Тогда
		СтруктураДопПараметров = СформироватьСтруктуруДопПараметров();
	КонецЕсли;
	//-- a.romanchuk 03.11.2020 #
	
	СообщениеДляОтправки = Новый Структура;
	
	Если ТипЗнч(СписокПолучателей) = Тип("СписокЗначений") Тогда	
		СписокПолучателейДляОтправки = СписокПолучателей;
	ИначеЕсли ТипЗнч(СписокПолучателей) = Тип("Массив") Тогда
		СписокПолучателейДляОтправки = Новый СписокЗначений;
		СписокПолучателейДляОтправки.ЗагрузитьЗначения(СписокПолучателей);
	Иначе	
	    СписокПолучателейДляОтправки = Новый СписокЗначений;
		
		СтрокаПолучателей = СтрЗаменить(СписокПолучателей, ";", Символы.ПС);
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаПолучателей) Цикл
			СписокПолучателейДляОтправки.Добавить(СтрПолучитьСтроку(СтрокаПолучателей, НомерСтроки));
		КонецЦикла;
	КонецЕсли;
	
	СообщениеДляОтправки.Вставить("Получатель", СписокПолучателейДляОтправки);
	
	СообщениеДляОтправки.Вставить("Тема", Тема);
	СообщениеДляОтправки.Вставить("Текст", Текст);
	
	ВложенияВПисьмо = Новый Массив;
	
	Если СтруктураДопПараметров.СоответсвиеВложений <> Неопределено Тогда
		
		Для каждого Элемент Из СтруктураДопПараметров.СоответсвиеВложений Цикл
			
			СтруктураВложений = Новый Структура();
			СтруктураВложений.Вставить("Идентификатор");
			СтруктураВложений.Вставить("Представление", Элемент.Ключ);
			
			Если ЭтоАдресВременногоХранилища(Элемент.Значение) Тогда
				
				СтруктураВложений.Вставить("АдресВоВременномХранилище", Элемент.Значение); 
				
			Иначе
			
				ДвоичДанные = Новый ДвоичныеДанные(Элемент.Значение);
				СтруктураВложений.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичДанные)); 
				
				//Попытка
				//	УдалитьФайлы(Элемент.Значение);
				//Исключение
				//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление файлов вложения при отправке письма';
				//									|uk = 'Видалення файлів вкладення при відправленні листа'",
				//								ОбщегоНазначения.КодОсновногоЯзыка()),
				//								УровеньЖурналаРегистрации.Ошибка, , ,
				//								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				//КонецПопытки;
			
			КонецЕсли;
		
			ВложенияВПисьмо.Добавить(СтруктураВложений);
					
		КонецЦикла;
	
	КонецЕсли;
	
	СообщениеДляОтправки.Вставить("Вложения", ВложенияВПисьмо);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФорматПисьма", СтруктураДопПараметров.ФорматПисьма);
	ДополнительныеПараметры.Вставить("Наименование", "");
	
	СообщениеДляОтправки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
	СоздатьПисьмо(СообщениеДляОтправки, СтруктураДопПараметров.ВнешнийИсточник, 
					СтруктураДопПараметров.ОтправлятьСразу, СтруктураДопПараметров.УдалятьПослеОтправки);

КонецПроцедуры

// Формирует структуру дополнительных параметров для рассылки почтового сообщения
// 
// Возвращаемое значение:
// 	СтруктураДопПараметров - Структура:
//  	СоответсвиеВложений - Соотвествие - Ключ (Представление файла во вложении), Значение (Путь к файлу строкой или адрес во временном хранилище для вызова с клиента)
//  	ФорматПисьма - Перечисление.СпособыРедактированияЭлектронныхПисем - Формат письма (ОбычныйТекст, HTML)
//  	ВнешнийИсточник - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Почтовый профиль, от корого будет произведена рассылка 
//  	ОтправлятьСразу - Булево.
//  	УдалятьПослеОтправки - Булево.
//
Функция СформироватьСтруктуруДопПараметров() Экспорт

	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("СоответсвиеВложений", Неопределено);
	СтруктураДопПараметров.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
	СтруктураДопПараметров.Вставить("ВнешнийИсточник", Справочники.гхб_СлужебныеЗначения.УчетнаяЗаписьdeveloper1c.Значение);
	СтруктураДопПараметров.Вставить("ОтправлятьСразу", Ложь);
	СтруктураДопПараметров.Вставить("УдалятьПослеОтправки", Истина);
	
	Возврат СтруктураДопПараметров;
	
КонецФункции

// Устанавливает доменное имя для ФЛ в указанной базе
Функция УстановитьДоменноеИмяФизлицаВБазеХолдинга(_БазаХолдинга, _ФЛ, _ДоменноеИмя) Экспорт
	
	_Рез = Новый Структура("Успешно, ТекстСообщения", Ложь, "");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УИДФизическогоЛица", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_ФЛ, "GUIDБазыХолдинга"));
	СтруктураПараметров.Вставить("ДоменноеИмя", _ДоменноеИмя);
	
	ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_БазаХолдинга, "ВнешнийИсточникПоУмолчанию"), 
														"УстановитьЗначениеДоменногоИмени", 
														СтруктураПараметров);
														
	ТекстНеудачногоОбмена = "Не удалось установить доменное имя. ";
	
	Если НЕ ОтветСервиса.ОбменПрошел Тогда
		_Рез.ТекстСообщения = ТекстНеудачногоОбмена + ОтветСервиса.ТекстОшибки + ". База - " + _БазаХолдинга;
	ИначеЕсли НЕ ОтветСервиса.Результат.result.Данные[0].ЗначениеУстановлено Тогда
		_Рез.ТекстСообщения = ТекстНеудачногоОбмена + "База - " + _БазаХолдинга;
	Иначе					
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			ОбъектФизЛицо = _ФЛ.ПолучитьОбъект();
			ОбъектФизЛицо.ДоменноеИмя = _ДоменноеИмя;
			ОбъектФизЛицо.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			_Рез.Успешно = Истина;
			_Рез.ТекстСообщения = "Доменное имя установлено. База - " + _БазаХолдинга;
		
		Исключение
			_Рез.ТекстСообщения = ТекстНеудачногоОбмена + ОписаниеОшибки() + ". База - " + _БазаХолдинга;
		КонецПопытки;
		
	КонецЕсли;

	Возврат _Рез;
	
КонецФункции

Функция УстановитьПользователяДляАутентификацииОСВБазеХолдинга(_БазаХолдинга, _Пользователь, _ДоменноеИмя) Экспорт
	
	_Рез = Новый Структура("Успешно, ТекстСообщения", Ложь, "");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УИДПользователя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_Пользователь, "GUIDБазыХолдинга"));
	СтруктураПараметров.Вставить("ДоменноеИмя", _ДоменноеИмя);
	
	ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(_БазаХолдинга, "ВнешнийИсточникПоУмолчанию"), 
														"УстановитьЗначениеПользователяДляАутентификацииОС", 
														СтруктураПараметров);
														
	ТекстНеудачногоОбмена = "Не удалось установить имя пользователя. ";
	
	Если НЕ ОтветСервиса.ОбменПрошел Тогда
		_Рез.ТекстСообщения = ТекстНеудачногоОбмена + ОтветСервиса.ТекстОшибки + ". База - " + _БазаХолдинга;
	ИначеЕсли НЕ ОтветСервиса.Результат.result.Данные[0].ЗначениеУстановлено Тогда
		_Рез.ТекстСообщения = ТекстНеудачногоОбмена + "База - " + _БазаХолдинга + ". " + ОтветСервиса.Результат.result.Данные[0].ТекстОтвета;
	Иначе					
		
		_Рез.Успешно = Истина;
		_Рез.ТекстСообщения = "Доменное имя установлено. База - " + _БазаХолдинга;
		
	КонецЕсли;

	Возврат _Рез;
	
КонецФункции

#Область ТестовыеФункции

Процедура СозданиеТествогоПисьма(email) Экспорт

	стСообщение = Новый Структура;
	стСообщение.Вставить("Текст", "Тестовый текст");
	стСообщение.Вставить("Тема", гхб_ВзаимодействияСервер.СформироватьСтандартнуюТемуПисьма("Тестовое письмо"));
	
	мВложения = Новый Массив;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	Ф = Новый Файл(ИмяФайла);
	ИмяФайлаПервый = Ф.Путь + "Первый.xlsx";
	Рез = ЭкспортВExcelУказанныйПуть(Новый ТабличныйДокумент, ИмяФайлаПервый);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Если Рез Тогда
		
		ДвоичДанные = Новый ДвоичныеДанные(ИмяФайлаПервый);
		мВложения.Добавить(Новый Структура("АдресВоВременномХранилище,Идентификатор,Представление", ПоместитьВоВременноеХранилище(ДвоичДанные), 
																						,
																						"Первый.xlsx"));
		Попытка
			УдалитьФайлы(ИмяФайлаПервый);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Ф = Новый Файл(ИмяФайла);
	ИмяФайлаВторой = Ф.Путь + "Второй.xlsx";
	Рез = ЭкспортВExcelУказанныйПуть(Новый ТабличныйДокумент, ИмяФайлаВторой);
	Если Рез Тогда
		
		ДвоичДанные = Новый ДвоичныеДанные(ИмяФайлаВторой);
		мВложения.Добавить(Новый Структура("АдресВоВременномХранилище,Идентификатор,Представление", ПоместитьВоВременноеХранилище(ДвоичДанные), 
																						,
																						"Второй.xlsx"));
		Попытка
			УдалитьФайлы(ИмяФайлаВторой);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	стСообщение.Вставить("Вложения", мВложения);
	
	сзПолучатели = Новый СписокЗначений;
	сзПолучатели.Добавить(email, email);
	стСообщение.Вставить("Получатель", сзПолучатели);
	
	стДополнительныеПараметры = Новый Структура;
	стДополнительныеПараметры.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
	стДополнительныеПараметры.Вставить("Наименование");
	
	стСообщение.Вставить("ДополнительныеПараметры", стДополнительныеПараметры);
	
	Взаимодействия.СоздатьПисьмо(стСообщение, Справочники.гхб_СлужебныеЗначения.УчетнаяЗаписьdeveloper1c.Значение);

КонецПроцедуры // ТестоваяРассылкаПисьма()

Функция ЭкспортВExcelУказанныйПуть(_ТабДок, _ПутьКФайлу, _ТипФайлаXLSX = Истина) Экспорт 
		
	Если (_ТипФайлаXLSX) Тогда
		_ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
	Иначе
		_ТипФайла = ТипФайлаТабличногоДокумента.XLS;
	КонецЕсли;
	
	Попытка
		_ТабДок.Записать(_ПутьКФайлу, _ТипФайла);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НормализоватьСтрокуДляЗаписиВБазуSQL(Знач _Строка) 
	
	_Строка = ?(_Строка = NULL, " ", _Строка);
	
	_Строка = СокрЛП(_Строка);
	//_Строка = СтрЗаменить(_Строка, "\", "\\");
	_Строка = СтрЗаменить(_Строка, "'", "''");
	_Строка = СтрЗаменить(_Строка, "`", "''");
	
	Возврат _Строка;
	
КонецФункции

Функция ВернутьЗначениеДляВставкиВБазуSQL(Знач _Значение, _ОбрамлятьВКавычки = Истина) 
	
	Если ТипЗнч(_Значение) = Тип("Дата") Тогда
		_Значение = Формат(_Значение, "ДФ='yyyy-MM-dd HH:mm:ss.000'");
	Иначе
		_Значение = НормализоватьСтрокуДляЗаписиВБазуSQL(_Значение);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(_Значение), ?(_ОбрамлятьВКавычки, "'" + _Значение + "'", _Значение), "''"); //"'delete'"); //"null");
	
КонецФункции

// Формирует структуру для записи в регистр сведений ПредметыПапкиВзаимодействий.
//
// Параметры:
//  Папка       - Справочник.ПапкиЭлектронныхПисем - папка, имеет смысл для документов "Электронное письмо входящее"
//               и "Электронное письмо исходящее".
//  Предмет          - СправочникСсылка, ДокументСсылка, указывает на предмет взаимодействия.
//  Рассмотрено      - Булево - признак рассмотрения взаимодействия.
//  РассмотретьПосле - ДатаВремя - дата, до которой отложено рассмотрение взаимодействия.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний папки и предмета.
//
// Возвращаемое значение:
//   Структура   - сформированная структура.
//
Функция СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Рассмотрено)
	
	СтруктураВозврата = РегистрыСведений.ПредметыПапкиВзаимодействий.РеквизитыВзаимодействия();
	Если Предмет <> Неопределено Тогда
		СтруктураВозврата.Предмет = Предмет;
	КонецЕсли;
	Если Рассмотрено <> Неопределено Тогда
		СтруктураВозврата.Рассмотрено = Рассмотрено;
	КонецЕсли;
	СтруктураВозврата.РассчитыватьРассмотрено = Истина;
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти