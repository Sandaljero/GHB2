
#Область ПериодическиеРегламентныеЗадания

Процедура РегламентНочь() Экспорт

	СделатьЗаменуНаименованияВФизЛицеКонсолидированномПоФизЛицуБазыХолдинга();
	СделатьРассылкуПоНеблокированнымКабинетамУволенныхСотрудников();

КонецПроцедуры

Процедура РегламентКаждые5Минут() Экспорт

	ВыгрузитьФотоВБазыХолдинга();
	
	//++ a.romanchuk 15.09.2020 #
	ВыгрузитьПомещенияВБазыХолдинга();
	//-- a.romanchuk 15.09.2020 #
	
	//++ a.romanchuk 16.09.2020 #
	БлокироватьПользователейВБазахХолдинга();
	//-- a.romanchuk 16.09.2020 #
	
	//++ a.romanchuk 17.07.2020 #
	ЗаполнитьПлощадиПомещений();
	//-- a.romanchuk 17.07.2020 #

	//++ a.romanchuk 01.12.2020 #
	ЗагрузитьПочтуОбменаДаннымиИОбработать();
	//-- a.romanchuk 01.12.2020 #
	
КонецПроцедуры

Процедура РегламентКаждые30Минут() Экспорт

	ЗагрузитьДанныеИзБазыРесурсовСпискиДоступа();
	
КонецПроцедуры
	
Процедура РегламентУтро() Экспорт 
	
	//++ a.romanchuk 28.09.2020 #
	РассылкаОПрекращенииДействияПропускаПарковкиНаЛокации();
	//-- a.romanchuk 28.09.2020 #
	
	//++ a.romanchuk 13.08.2020 #
	РегистрыСведений.гхб_ИсторияВыдачиПостоянныхПропусков.ЗагрузитьДанныеПропусков();
	//-- a.romanchuk 13.08.2020 #
	
	//++ a.romanchuk 06.10.2020 #
	ПродлитьКонсервациюПомещений();
	//-- a.romanchuk 06.10.2020 #
	
	//++ a.romanchuk 03.11.2020 #
	РассылкаПоСтатусамКонсервацииПомещений();
	//-- a.romanchuk 03.11.2020 #
	
	//++ a.romanchuk 20.11.2020 #
	РассылкаОбУволенныхСотрудникахСЗакрепленнымиПарковкамиНаЛокациях();
	//-- a.romanchuk 20.11.2020 #
	
	//++ a.romanchuk 20.11.2020 #
	ЗакрытьДоступыКПомещениямДляУволенныхСотрудников();
	//-- a.romanchuk 20.11.2020 #
	
КонецПроцедуры

Процедура Регламент23() Экспорт 
	
	//++ a.romanchuk 09.09.2020 #
	гхб_ВзаимодействияСервер.ВыгрузитьДанныеРуководителейВОбщуюБазуПользователей();
	//-- a.romanchuk 09.09.2020 #
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыНочногоРегламентного
	
// Процедура Делает замену наименования в справочнике физ лиц консолидированных
// по наименованию физ лиц базы холдинга(основное место работы), если наименования не совпадают
Процедура СделатьЗаменуНаименованияВФизЛицеКонсолидированномПоФизЛицуБазыХолдинга()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	МАКСИМУМ(гхб_ФизическиеЛицаБазХолдинга.Наименование) КАК НаименованиеДляЗамены,
	|	гхб_ФизическиеЛица.Наименование КАК НаименованиеФЛ
	|ИЗ
	|	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_СотрудникиБазХолдинга КАК гхб_СотрудникиБазХолдинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛицаБазХолдинга КАК гхб_ФизическиеЛицаБазХолдинга
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	|				ПО гхб_ФизическиеЛицаБазХолдинга.ФизЛицоТекущейБазы = гхб_ФизическиеЛица.Ссылка
	|			ПО гхб_СотрудникиБазХолдинга.ФизЛицоБазыХолдинга = гхб_ФизическиеЛицаБазХолдинга.Ссылка
	|		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник = гхб_СотрудникиБазХолдинга.Ссылка
	|ГДЕ
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|	И гхб_ФизическиеЛица.Наименование <> гхб_ФизическиеЛицаБазХолдинга.Наименование
	|	И гхб_СотрудникиБазХолдинга.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|
	|СГРУППИРОВАТЬ ПО
	|	гхб_ФизическиеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеДляЗамены";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		спрОбъект = Выборка.ФизЛицо.ПолучитьОбъект();
		спрОбъект.Комментарий = "Наименование изменено Рег Заданием (служ. функ. ночь) " + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy") + " , предыдущее наименование " + Выборка.НаименованиеФЛ;
		спрОбъект.Наименование = Выборка.НаименованиеДляЗамены;
		
		Попытка
			спрОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("СделатьЗаменуНаименованияВФизЛицеКонсолидированномПоФизЛицуБазыХолдинга", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура СделатьРассылкуПоНеблокированнымКабинетамУволенныхСотрудников() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	гхб_ДанныеПерсональныхКабинетовТаксиОткрытие.ПерсональныйКабинетТакси КАК ПерсональныйКабинетТакси,
	|	гхб_ДанныеПерсональныхКабинетовТаксиОткрытие.Период КАК ДатаОткрытия
	|ПОМЕСТИТЬ втДатыОткрытия
	|ИЗ
	|	РегистрСведений.гхб_ДанныеПерсональныхКабинетовТакси.СрезПоследних(, Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыОперацийУПКТ.ОткрытиеКабинета)) КАК гхб_ДанныеПерсональныхКабинетовТаксиОткрытие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДанныеПерсональныхКабинетовТаксиБлокирование.ПерсональныйКабинетТакси КАК ПерсональныйКабинетТакси,
	|	гхб_ДанныеПерсональныхКабинетовТаксиБлокирование.Период КАК ДатаБлокирования
	|ПОМЕСТИТЬ втДатыЗакрытия
	|ИЗ
	|	РегистрСведений.гхб_ДанныеПерсональныхКабинетовТакси.СрезПоследних(, Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гхб_ВидыОперацийУПКТ.БлокированиеКабинета)) КАК гхб_ДанныеПерсональныхКабинетовТаксиБлокирование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ПерсональныйКабинетТакси КАК ПерсональныйКабинетТакси,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.БазаХолдинга КАК БазаХолдинга,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Организация КАК Организация,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Блокирован КАК Блокирован,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Дивизион КАК Дивизион,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Уволен,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ЦФО КАК ЦФО,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Регистратор КАК УПКТ,
	|	гхб_УПКТ.ТелефонСотрудника КАК ТелефонСотрудника,
	|	гхб_УПКТ.еМайлСотрудника КАК еМайлСотрудника,
	|	гхб_УПКТ.ТелефонРуководителя КАК ТелефонРуководителя,
	|	гхб_УПКТ.еМайлРуководителя КАК еМайлРуководителя,
	|	гхб_УПКТ.ТелефонФинансиста КАК ТелефонФинансиста,
	|	гхб_УПКТ.еМайлФинансиста КАК еМайлФинансиста,
	|	гхб_УПКТ.Должность КАК Должность,
	|	гхб_ЦФО.Шифр КАК ШифрЦФО,
	|	гхб_ПерсональныеКабинетыТакси.Логин КАК Логин,
	|	гхб_ПерсональныеКабинетыТакси.СлужбаТакси КАК СлужбаТакси,
	|	гхб_ПерсональныеКабинетыТакси.Лимит КАК Лимит,
	|	гхб_УПКТ.Руководитель КАК Руководитель,
	|	гхб_УПКТ.Финансист КАК Финансист,
	|	гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Плательщик КАК Плательщик,
	|	ВЫБОР
	|		КОГДА гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Блокирован
	|			ТОГДА ""Блокирован""
	|		ИНАЧЕ ""Активен""
	|	КОНЕЦ КАК СтатусКабинета,
	|	гхб_УПКТ.Ответственный КАК Ответственный,
	|	втДатыЗакрытия.ДатаБлокирования КАК ДатаБлокирования,
	|	втДатыОткрытия.ДатаОткрытия КАК ДатаОткрытия,
	|	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ДатаУвольнения КАК ДатаУвольнения,
	|	гхб_УПКТ.Ссылка КАК СсылкаУПКТ
	|ПОМЕСТИТЬ втКрайняя
	|ИЗ
	|	РегистрСведений.гхб_ДанныеПерсональныхКабинетовТакси.СрезПоследних КАК гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гхб_УПКТ КАК гхб_УПКТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	|			ПО гхб_УПКТ.БазаХолдинга = гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.БазаХолдинга
	|				И гхб_УПКТ.Сотрудник = гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник
	|		ПО гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.Регистратор = гхб_УПКТ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гхб_ЦФО КАК гхб_ЦФО
	|		ПО гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ЦФО = гхб_ЦФО.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.гхб_ПерсональныеКабинетыТакси КАК гхб_ПерсональныеКабинетыТакси
	|		ПО гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ПерсональныйКабинетТакси = гхб_ПерсональныеКабинетыТакси.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыОткрытия КАК втДатыОткрытия
	|		ПО гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ПерсональныйКабинетТакси = втДатыОткрытия.ПерсональныйКабинетТакси
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыЗакрытия КАК втДатыЗакрытия
	|		ПО гхб_ДанныеПерсональныхКабинетовТаксиСрезПоследних.ПерсональныйКабинетТакси = втДатыЗакрытия.ПерсональныйКабинетТакси
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКрайняя.ПерсональныйКабинетТакси КАК ПерсональныйКабинетТакси,
	|	втКрайняя.БазаХолдинга КАК БазаХолдинга,
	|	втКрайняя.Организация КАК Организация,
	|	втКрайняя.Блокирован КАК Блокирован,
	|	втКрайняя.Дивизион КАК Дивизион,
	|	втКрайняя.Сотрудник КАК Сотрудник,
	|	втКрайняя.Уволен КАК Уволен,
	|	втКрайняя.ЦФО КАК ЦФО,
	|	втКрайняя.УПКТ КАК УПКТ,
	|	втКрайняя.ТелефонСотрудника КАК ТелефонСотрудника,
	|	втКрайняя.еМайлСотрудника КАК еМайлСотрудника,
	|	втКрайняя.ТелефонРуководителя КАК ТелефонРуководителя,
	|	втКрайняя.еМайлРуководителя КАК еМайлРуководителя,
	|	втКрайняя.ТелефонФинансиста КАК ТелефонФинансиста,
	|	втКрайняя.еМайлФинансиста КАК еМайлФинансиста,
	|	втКрайняя.Должность КАК Должность,
	|	втКрайняя.ШифрЦФО КАК ШифрЦФО,
	|	втКрайняя.Логин КАК Логин,
	|	втКрайняя.СлужбаТакси КАК СлужбаТакси,
	|	втКрайняя.Лимит КАК Лимит,
	|	втКрайняя.Руководитель КАК Руководитель,
	|	втКрайняя.Финансист КАК Финансист,
	|	втКрайняя.Плательщик КАК Плательщик,
	|	втКрайняя.СтатусКабинета КАК СтатусКабинета,
	|	втКрайняя.Ответственный КАК Ответственный,
	|	втКрайняя.ДатаБлокирования КАК ДатаБлокирования,
	|	втКрайняя.ДатаОткрытия КАК ДатаОткрытия,
	|	втКрайняя.ДатаУвольнения КАК ДатаУвольнения,
	|	втКрайняя.СсылкаУПКТ КАК СсылкаУПКТ
	|ИЗ
	|	втКрайняя КАК втКрайняя
	|ГДЕ
	|	втКрайняя.Уволен
	|	И НЕ втКрайняя.Блокирован";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		стСообщение = Новый Структура;
		Тема = "Блокировка персональных кабинетов такси по уволенным сотрудникам";
		стСообщение.Вставить("Тема", гхб_ВзаимодействияСервер.СформироватьСтандартнуюТемуПисьма(Тема));
		
		Текст = "
		|<p>Добрый день! </p>
		|<p>Уведомляем, что сотрудник " + Выборка.Сотрудник + " уволен " + Формат(Выборка.ДатаУвольнения, "ДФ=dd.MM.yyyy") + ", из " + Выборка.Организация + " владелец ПКТ " + Выборка.Логин + " </p>
		|<p>Заблокируйте ПКТ на ресурсе службы такси!</p>
		|<p>Внесите изменение данные в документ Учёт персональных кабинетов такси перейдя по ссылке: " + ПолучитьНавигационнуюСсылку(Выборка.СсылкаУПКТ) + "</p>";
		
		стСообщение.Вставить("Текст", Текст);
		
		мВложения = Новый Массив;
		стСообщение.Вставить("Вложения", мВложения);
		
		сзПолучатели = Новый СписокЗначений;
		сзПолучатели.Добавить("slm.coordination@slm.ua", "slm.coordination@slm.ua");
		стСообщение.Вставить("Получатель", сзПолучатели);
		
		стДополнительныеПараметры = Новый Структура;
		стДополнительныеПараметры.Вставить("ФорматПисьма", Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
		стДополнительныеПараметры.Вставить("Наименование");
		
		стСообщение.Вставить("ДополнительныеПараметры", стДополнительныеПараметры);
		
		Взаимодействия.СоздатьПисьмо(стСообщение, Справочники.гхб_СлужебныеЗначения.УчетнаяЗаписьdeveloper1c.Значение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРегламентУтро

// Процедура делает рассылку на ответственных в разрезе локаций
// по сотрудникам с разрешенными парковочными местами, но которые скоро заканчиваются
Процедура РассылкаОПрекращенииДействияПропускаПарковкиНаЛокации()
	
	_Тема = гхб_ВзаимодействияСервер.СформироватьСтандартнуюТемуПисьма("Уведомление о прекращении срока действия пропуска (парковки)");
						
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Локация КАК Локация,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ФИО КАК ФИО,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Автомобиль КАК Автомобиль,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ВидПропуска КАК ВидПропуска,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Регистратор.гхб_Комментарий КАК Комментарий
	               |ИЗ
	               |	РегистрСведений.гхб_ПраваЗаездаНаТерриториюЛокации.СрезПоследних(, ) КАК гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних
	               |ГДЕ
	               |	НЕ гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |	И гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия <= &ТекущаяДата
	               |	И гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ТипОперации = ЗНАЧЕНИЕ(Перечисление.гхб_ТипОперацииЗакреплениеОткреплениеПарковочногоМеста.Закрепление)
	               |	И гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ВидПропуска = ЗНАЧЕНИЕ(Перечисление.гхб_ВидПропускаПарковочныеМеста.Гостевой)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Локация,
	               |	ФИО
	               |ИТОГИ ПО
	               |	Локация
	               |АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("ТекущаяДата", гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(НачалоДня(ТекущаяДатаСеанса()), 7));
	
	ВыборкаЛокации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЛокации.Следующий() Цикл
		
		_Адресаты = РегистрыСведений.гхб_НастройкиВозможностейЗакрепленияПарковочныхМест.ВернутьСотрудниковДляУведомленияПриПрекращенииДействияПропуска(ВыборкаЛокации.Локация);
		
		Если НЕ (_Адресаты.Количество() = 0) Тогда
			
			_Получатели = Новый СписокЗначений();
			
			Для Каждого _Адресат Из _Адресаты Цикл
				_Почта = гхб_ВзаимодействияСервер.ВернутьПочтовыйЯщикСотрудника(_Адресат);
				
				Если ЗначениеЗаполнено(_Почта) Тогда
					_Получатели.Добавить(_Почта, СокрЛП(_Адресат));
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ (_Получатели.Количество() = 0) Тогда

				ВыборкаДанные = ВыборкаЛокации.Выбрать();
				
				Если НЕ (ВыборкаДанные.Количество() = 0) Тогда
					
					_Текст = "";
						
					Пока ВыборкаДанные.Следующий() Цикл
						
						_Текст = _Текст + "<p>Срок действия пропуска по " + СокрЛП(ВыборкаДанные.ФИО) + " на локацию " + 
							СокрЛП(ВыборкаДанные.Локация) + " истекает " + Формат(ВыборкаДанные.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy") + 
							". В комментариях следующий текст: " + СтрЗаменить(ВыборкаДанные.Комментарий, Символы.ПС, "<br>") + ".</p>";
						
					КонецЦикла;
					
					гхб_ВзаимодействияСервер.СоздатьЭлектронноеПисьмо(_Получатели, _Тема, _Текст);
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Нужно вынести в модуль гхб_ОбщегоНазначенияСервер
// Возвращает ФЛ которые уволены
Функция ВернутьУволенных(_СписокФизЛиц)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ФизическиеЛица.Ссылка КАК ФИО
	               |ПОМЕСТИТЬ _ФЛ
	               |ИЗ
	               |	Справочник.гхб_ФизическиеЛица КАК гхб_ФизическиеЛица
	               |ГДЕ
	               |	гхб_ФизическиеЛица.Ссылка В(&ФЛ)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ФИО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	_ФЛ.ФИО КАК ФИО
	               |ПОМЕСТИТЬ _Рабочие
	               |ИЗ
	               |	Справочник.гхб_ДоговораКонтрагентовБазХолдинга.РаботникиФОП КАК гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _ФЛ КАК _ФЛ
	               |		ПО гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ФизЛицо.ФизЛицоТекущейБазы = _ФЛ.ФИО
	               |ГДЕ
	               |	&ТекущаяДата МЕЖДУ гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ДатаНачала И гхб_ДоговораКонтрагентовБазХолдингаРаботникиФОП.ДатаОкончания
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	_ФЛ.ФИО
	               |ИЗ
	               |	Документ.гхб_ДоговорНаВыполнениеРаботСФизЛицом КАК гхб_ДоговорНаВыполнениеРаботСФизЛицом
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _ФЛ КАК _ФЛ
	               |		ПО гхб_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ФизЛицоБазыХолдинга.ФизЛицоТекущейБазы = _ФЛ.ФИО
	               |ГДЕ
	               |	&ТекущаяДата МЕЖДУ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала И гхб_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	               |	И НЕ гхб_ДоговорНаВыполнениеРаботСФизЛицом.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	_ФЛ.ФИО
	               |ИЗ
	               |	РегистрСведений.гхб_РаботникиОрганизацийБазХолдинга.СрезПоследних КАК гхб_РаботникиОрганизацийБазХолдингаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _ФЛ КАК _ФЛ
	               |		ПО гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.Сотрудник.ФизЛицоБазыХолдинга.ФизЛицоТекущейБазы = _ФЛ.ФИО
	               |ГДЕ
	               |	гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.гхб_ПричиныИзмененияСостояния.Увольнение)
	               |	И (гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ДатаОкончанияСрочногоТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ гхб_РаботникиОрганизацийБазХолдингаСрезПоследних.ДатаОкончанияСрочногоТрудовогоДоговора >= &ТекущаяДата)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ФИО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	_ФЛ.ФИО КАК ФИО
	               |ИЗ
	               |	_ФЛ КАК _ФЛ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ _Рабочие КАК _Рабочие
	               |		ПО _ФЛ.ФИО = _Рабочие.ФИО
	               |ГДЕ
	               |	_Рабочие.ФИО ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ _Рабочие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ _ФЛ";
		
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ФЛ", _СписокФизЛиц);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФИО");
	
КонецФункции

// Процедура делает рассылку на ответственных в разрезе локаций
// по сотрудникам, которые уволены, но имеют разрешение на парковочные места
Процедура РассылкаОбУволенныхСотрудникахСЗакрепленнымиПарковкамиНаЛокациях() Экспорт 

	_Дата = НачалоДня(ТекущаяДатаСеанса());
	
	Если НЕ (ДеньНедели(_Дата) = 1) Тогда
		Возврат;
	КонецЕсли;
	
	_Тема = гхб_ВзаимодействияСервер.СформироватьСтандартнуюТемуПисьма("Существуют закрепления парковочных мест за уволенными сотрудниками");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Локация КАК Локация,
	               |	ВЫРАЗИТЬ(гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ФИО КАК Справочник.гхб_ФизическиеЛица) КАК ФИО,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Автомобиль КАК Автомобиль,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ВидПропуска КАК ВидПропуска,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	               |	гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.Регистратор.гхб_Комментарий КАК Комментарий
	               |ИЗ
	               |	РегистрСведений.гхб_ПраваЗаездаНаТерриториюЛокации.СрезПоследних(, ) КАК гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних
	               |ГДЕ
	               |	(гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ДатаОкончанияДействия > &ТекущаяДата)
	               |	И гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ТипОперации = ЗНАЧЕНИЕ(Перечисление.гхб_ТипОперацииЗакреплениеОткреплениеПарковочногоМеста.Закрепление)
	               |	И гхб_ПраваЗаездаНаТерриториюЛокацииСрезПоследних.ФИО ССЫЛКА Справочник.гхб_ФизическиеЛица
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Локация,
	               |	ФИО
	               |ИТОГИ ПО
	               |	Локация
	               |АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("ТекущаяДата", _Дата);
	
	ВыборкаЛокации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЛокации.Следующий() Цикл
		
		_Адресаты = РегистрыСведений.гхб_НастройкиВозможностейЗакрепленияПарковочныхМест.ВернутьСотрудниковДляУведомленияПриУвольнении(ВыборкаЛокации.Локация);
		
		Если НЕ (_Адресаты.Количество() = 0) Тогда
			
			_Получатели = Новый СписокЗначений();
			
			Для Каждого _Адресат Из _Адресаты Цикл
				_Почта = гхб_ВзаимодействияСервер.ВернутьПочтовыйЯщикСотрудника(_Адресат);
				
				Если ЗначениеЗаполнено(_Почта) Тогда
					_Получатели.Добавить(_Почта, СокрЛП(_Адресат));
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ (_Получатели.Количество() = 0) Тогда

				ВыборкаДанные = ВыборкаЛокации.Выбрать();
				
				Если НЕ (ВыборкаДанные.Количество() = 0) Тогда
					
					_МассивФЛ = Новый Массив();
		
					Пока ВыборкаДанные.Следующий() Цикл
						_МассивФЛ.Добавить(ВыборкаДанные.ФИО);
					КонецЦикла;
					
					_МассивУволенных = ВернутьУволенных(_МассивФЛ);
					
					Если НЕ (_МассивУволенных.Количество() = 0) Тогда
					
						ВыборкаДанные.Сбросить();
						
						_Текст = "";
							
						Пока ВыборкаДанные.Следующий() Цикл
							
							Если НЕ (_МассивУволенных.Найти(ВыборкаДанные.ФИО) = Неопределено) Тогда
							
								_Текст = _Текст + "<p>" + СокрЛП(ВыборкаДанные.ФИО) + " (" + СокрЛП(ВыборкаДанные.Автомобиль) + ") на локацию " + 
									СокрЛП(ВыборкаДанные.Локация) + ": " + Формат(ВыборкаДанные.ДатаНачалаДействия, "ДФ=dd.MM.yyyy; ДП=00.00.0000") + 
									" - " + Формат(ВыборкаДанные.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy; ДП=00.00.0000") + 
									"." + ?(ЗначениеЗаполнено(ВыборкаДанные.Комментарий), 
										" В комментариях следующий текст: " + СтрЗаменить(ВыборкаДанные.Комментарий, Символы.ПС, "<br>") + ".", 
										"") + "</p>";
									
							КонецЕсли;
							
						КонецЦикла;
						
						Если ЗначениеЗаполнено(_Текст) Тогда
							гхб_ВзаимодействияСервер.СоздатьЭлектронноеПисьмо(_Получатели, _Тема, _Текст);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Прорверяет есть ли помещения, у которых сегодня заканчивается срок консервации.
// Если такие есть, то их консервация продлевается на еще один срок
Процедура ПродлитьКонсервациюПомещений()
	
	Попытка
		
		_Дата = ТекущаяДатаСеанса();
		
		Если (ДеньНедели(_Дата) = 1) Тогда
		
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение КАК Помещение,
			               |	МАКСИМУМ(гхб_АктуальныеДокументыКонсервацииПомещений.Дата) КАК Дата
			               |ПОМЕСТИТЬ _Помещения
			               |ИЗ
			               |	РегистрСведений.гхб_АктуальныеДокументыКонсервацииПомещений КАК гхб_АктуальныеДокументыКонсервацииПомещений
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Помещение,
			               |	Дата
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение КАК Помещение,
			               |	гхб_АктуальныеДокументыКонсервацииПомещений.ДокументКонсервации.СтатусКонсервации КАК СтатусКонсервации
			               |ИЗ
			               |	РегистрСведений.гхб_АктуальныеДокументыКонсервацииПомещений КАК гхб_АктуальныеДокументыКонсервацииПомещений
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _Помещения КАК _Помещения
			               |		ПО гхб_АктуальныеДокументыКонсервацииПомещений.Помещение = _Помещения.Помещение
			               |			И гхб_АктуальныеДокументыКонсервацииПомещений.Дата = _Помещения.Дата
			               |ГДЕ
			               |	гхб_АктуальныеДокументыКонсервацииПомещений.ДокументКонсервации.СтатусКонсервации В(&СтатусКонсервации)
			               |	И гхб_АктуальныеДокументыКонсервацииПомещений.Дата = &ТекущаяДата
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ _Помещения";
			
			Запрос.УстановитьПараметр("ТекущаяДата", гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(НачалоДня(_Дата), -7));
			
			_СписокСтатусов = Новый СписокЗначений();
			_СписокСтатусов.Добавить(Перечисления.гхб_СтатусыКонсервацииПомещений.Red);
			_СписокСтатусов.Добавить(Перечисления.гхб_СтатусыКонсервацииПомещений.Yellow);
			
			Запрос.УстановитьПараметр("СтатусКонсервации", _СписокСтатусов);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				_Документ = Документы.гхб_ЗакреплениеСтатусаКонсервацииПомещения.СоздатьДокумент();
				_Документ.Дата = _Дата;
				_Документ.гхб_Ответственный = Пользователи.ТекущийПользователь();
				_Документ.АвтоматическоеСозданиеДокумента = Истина;
				_Документ.Помещение = Выборка.Помещение;
				_Документ.СтатусКонсервации = Выборка.СтатусКонсервации;
				_Документ.ПомощьНеНужна = Истина;
				_Документ.ДатаНачала = НачалоДня(_Дата);
				
				Если Выборка.СтатусКонсервации = Перечисления.гхб_СтатусыКонсервацииПомещений.Yellow Тогда
					_Документ.ДатаОкончания = гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(_Документ.ДатаНачала, 13);
					_Документ.ПериодКонсервации = 14;
					_Документ.ПериодКонсервацииСтрока = "2 недели";
				Иначе
					_Документ.ДатаОкончания = гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(_Документ.ДатаНачала, 27);
					_Документ.ПериодКонсервации = 28;
					_Документ.ПериодКонсервацииСтрока = "4 недели";
				КонецЕсли;
				
				_Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ПродлитьКонсервациюПомещений", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет рассылку ответственным за консервацию информационное письмо со статусами их помещений
Процедура РассылкаПоСтатусамКонсервацииПомещений()

	Попытка
		
		_Дата = ТекущаяДатаСеанса();
		
		Если РегистрыСведений.гхб_СобытияОбъектовБД.СобытиеПоОбъектуБыло(Неопределено, Перечисления.гхб_ТипыСобытийОбъектовБД.РассылкаПоСтатусамКонсервацииПомещений, Формат(_Дата, "ДФ=dd.MM.yyyy")) Тогда
			Возврат;
		КонецЕсли;
		
		Если (ДеньНедели(_Дата) = 2) Тогда
			
			_Дата1 = НачалоНедели(_Дата);
			_Дата2 = гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(КонецНедели(_Дата), 7*11); // Показываем данные на 12 недель
			
			_ТЗ = РегистрыСведений.гхб_ОтветственныеЗаКонсервациюПомещений.ВернутьАктуальныеДанныеПоОтветственнымИЗакрепленнымПомещениям();
			
			_ТЗОтветственные = _ТЗ.Скопировать(, "ОтветственныйЗаКонсервациюПомещения");
			_ТЗОтветственные.Свернуть("ОтветственныйЗаКонсервациюПомещения");
			
			_ТЗПомещения = _ТЗ.Скопировать(, "Помещение");
			_ТЗПомещения.Свернуть("Помещение");
			
			_МассивПомещений = _ТЗПомещения.ВыгрузитьКолонку("Помещение");
			
			_Данные = РегистрыСведений.гхб_АктуальныеДокументыКонсервацииПомещений.ВернутьСтатусыКонсервацииВПериоде(_Дата1, _Дата2, _МассивПомещений);
				
			_Данные.Сортировать("Помещение, Дата");
			
			_ТЗПериоды = _Данные.Скопировать(, "Дата, ДатаСтрокаЗаголовка");
			_ТЗПериоды.Свернуть("Дата, ДатаСтрокаЗаголовка");
			_ТЗПериоды.Сортировать("Дата");
				
			ЗапросПомещенияСкороЗаканчиваются = Новый Запрос();
			ЗапросПомещенияСкороЗаканчиваются.Текст = "ВЫБРАТЬ
			                                          |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение КАК Помещение,
			                                          |	МАКСИМУМ(гхб_АктуальныеДокументыКонсервацииПомещений.Дата) КАК Дата
			                                          |ПОМЕСТИТЬ _Помещения
			                                          |ИЗ
			                                          |	РегистрСведений.гхб_АктуальныеДокументыКонсервацииПомещений КАК гхб_АктуальныеДокументыКонсервацииПомещений
			                                          |ГДЕ
			                                          |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение В(&Помещение)
			                                          |
			                                          |СГРУППИРОВАТЬ ПО
			                                          |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение
			                                          |
			                                          |ИНДЕКСИРОВАТЬ ПО
			                                          |	Помещение,
			                                          |	Дата
			                                          |;
			                                          |
			                                          |////////////////////////////////////////////////////////////////////////////////
			                                          |ВЫБРАТЬ
			                                          |	_Помещения.Помещение КАК Помещение
			                                          |ИЗ
			                                          |	РегистрСведений.гхб_АктуальныеДокументыКонсервацииПомещений КАК гхб_АктуальныеДокументыКонсервацииПомещений
			                                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _Помещения КАК _Помещения
			                                          |		ПО гхб_АктуальныеДокументыКонсервацииПомещений.Помещение = _Помещения.Помещение
			                                          |			И гхб_АктуальныеДокументыКонсервацииПомещений.Дата = _Помещения.Дата
			                                          |ГДЕ
			                                          |	гхб_АктуальныеДокументыКонсервацииПомещений.ДокументКонсервации.СтатусКонсервации <> ЗНАЧЕНИЕ(Перечисление.гхб_СтатусыКонсервацииПомещений.GREEN)
			                                          |	И гхб_АктуальныеДокументыКонсервацииПомещений.Дата > &ДатаНачала
			                                          |	И гхб_АктуальныеДокументыКонсервацииПомещений.Дата <= &ДатаОкончания
			                                          |
			                                          |СГРУППИРОВАТЬ ПО
			                                          |	_Помещения.Помещение
			                                          |;
			                                          |
			                                          |////////////////////////////////////////////////////////////////////////////////
			                                          |УНИЧТОЖИТЬ _Помещения";
			
			ЗапросПомещенияСкороЗаканчиваются.УстановитьПараметр("ДатаНачала", _Дата1);
			ЗапросПомещенияСкороЗаканчиваются.УстановитьПараметр("ДатаОкончания", гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(КонецНедели(_Дата1), 7)); // Следующая неделя последняя
			ЗапросПомещенияСкороЗаканчиваются.УстановитьПараметр("Помещение", _МассивПомещений);
			
			_ПомещенияУКоторыхСкороЗаканчиваетсяСрокКонсервации = ЗапросПомещенияСкороЗаканчиваются.Выполнить().Выгрузить();
			_ПомещенияУКоторыхСкороЗаканчиваетсяСрокКонсервации.Индексы.Добавить("Помещение");
			
			Для Каждого _СтрокаОтветственный Из _ТЗОтветственные Цикл
				
				_Адрес = гхб_ВзаимодействияСервер.ВернутьПочтовыйЯщикСотрудника(_СтрокаОтветственный.ОтветственныйЗаКонсервациюПомещения);
				
				Если ЗначениеЗаполнено(_Адрес) Тогда
					
					_Тема = гхб_ВзаимодействияСервер.СформироватьСтандартнуюТемуПисьма("Статусы консервации кабинетов");
					_Текст = "<p>Добрый день,<br>Текущий статус по вашим кабинетам в таблице ниже:</p><table border=""1"">
						|<tbody>
						|<tr>
						|<td align=""center"" valign=""middle""><b>Помещение</b></td>";
					
					Для Каждого СтрПериод Из _ТЗПериоды Цикл
						_Текст = _Текст + "
							|<td align=""center"" valign=""top""><b>" + СтрЗаменить(СтрПериод.ДатаСтрокаЗаголовка, Символы.ПС, "<br>") + "</b></td>";
					КонецЦикла;
							
					_Текст = _Текст + "						
						|</tr>";
					
					_ПомещенияОтветственного = _ТЗ.НайтиСтроки(Новый Структура("ОтветственныйЗаКонсервациюПомещения", _СтрокаОтветственный.ОтветственныйЗаКонсервациюПомещения));
					_МассивСкороЗаканчиваетсяСрок = Новый Массив();				
					
					Для Каждого _СтрокаПомещенияОтветственного Из _ПомещенияОтветственного Цикл
						
						_НайденныеСтроки = _Данные.НайтиСтроки(Новый Структура("Помещение", _СтрокаПомещенияОтветственного.Помещение));
					
						_Текст = _Текст + "						
							|<tr>
							|<td align=""left"" valign=""middle"">" + _СтрокаПомещенияОтветственного.Помещение + "</td>";
						
						Для Каждого _НайденнаяСтрока Из _НайденныеСтроки Цикл
							
							_Текст = _Текст + "						
								|<td align=""center"" valign=""middle"" bgcolor=""#" + 
									Перечисления.гхб_СтатусыКонсервацииПомещений.ВернутьЦветСтатусаHTML(_НайденнаяСтрока.ДокументКонсервацииСтатусКонсервации) + 
									""">" + Перечисления.гхб_СтатусыКонсервацииПомещений.ВернутьКраткоеИмяСтатуса(_НайденнаяСтрока.ДокументКонсервацииСтатусКонсервации) + 
									"</td>";
									
						КонецЦикла;
						
						_Текст = _Текст + "						
							|</tr>";
						
						Если НЕ (_ПомещенияУКоторыхСкороЗаканчиваетсяСрокКонсервации.Найти(_СтрокаПомещенияОтветственного.Помещение) = Неопределено) Тогда
							_МассивСкороЗаканчиваетсяСрок.Добавить(_СтрокаПомещенияОтветственного.Помещение);
						КонецЕсли;
						
					КонецЦикла;
					
					_Текст = _Текст + "
						|</tbody>
						|</table>";
					
					Если НЕ (_МассивСкороЗаканчиваетсяСрок.Количество() = 0) Тогда
						
						_Текст = _Текст + "
							|<p>Обратите внимание, статус консервации по вашим кабинетам ниже заканчивается через <span style=""color: red""><b>13 дней</b></span>:</p>
							|<table border=""1"">
							|<tbody>
							|<tr>
							|<td align=""center"" valign=""middle""><b>Помещение</b></td>";
					
							Для Каждого СтрПериод Из _ТЗПериоды Цикл
								_Текст = _Текст + "
									|<td align=""center"" valign=""top""><b>" + СтрЗаменить(СтрПериод.ДатаСтрокаЗаголовка, Символы.ПС, "<br>") + "</b></td>";
							КонецЦикла;
							
						_Текст = _Текст + "						
							|</tr>";
					
						Для Каждого _ПомещениеСкороЗаканчиваетсяСрок Из _МассивСкороЗаканчиваетсяСрок Цикл
							
							_НайденныеСтроки = _Данные.НайтиСтроки(Новый Структура("Помещение", _ПомещениеСкороЗаканчиваетсяСрок));
						
							_Текст = _Текст + "						
								|<tr>
								|<td align=""left"" valign=""middle"">" + _ПомещениеСкороЗаканчиваетсяСрок + "</td>";
							
							Для Каждого _НайденнаяСтрока Из _НайденныеСтроки Цикл
								
								_Текст = _Текст + "						
									|<td align=""center"" valign=""middle"" bgcolor=""#" + 
										Перечисления.гхб_СтатусыКонсервацииПомещений.ВернутьЦветСтатусаHTML(_НайденнаяСтрока.ДокументКонсервацииСтатусКонсервации) + 
										""">" + Перечисления.гхб_СтатусыКонсервацииПомещений.ВернутьКраткоеИмяСтатуса(_НайденнаяСтрока.ДокументКонсервацииСтатусКонсервации) + 
										"</td>";
										
							КонецЦикла;
							
							_Текст = _Текст + "						
								|</tr>";
							
						КонецЦикла;
						
						_Текст = _Текст + "
							|</tbody>
							|</table>";
						
					КонецЕсли;
					
					_Текст = _Текст + "<p>Если вы хотите расконсервировать или законсервировать помещение, необходимо изменить статус помещения в базе ГХБ 2.0. 
						|по ссылке: <a href=""http://kpi.stb.ua/GHB_2/ru_RU/"">Ссылка в базу ГХБ 2.0.</a></p>
						|<p></p>
						|<p align=""center""><b>Важно!</b></p>
						|<p><ul>
						|<li>Статус консервации может быть изменен в любой день до текущей пятницы.</li>
						|<li>Ближайшая дата начала действия нового статуса консервации помещения - <b><u>понедельник</u></b> через 1 неделю от недели, когда такие изменения вносятся.<br>
						|<u>Пример</u>: дата, когда были внесены изменения статуса - любой день 45-ой недели, ближайшая доступная дата, возможной <br>
						|консервации/расконсервации понедельник 47-ой недели.</li>
						|<li>В случае, если изменения статуса консервации помещения внесены не были, <b><u>консервация продлевается автоматически</u></b> на минимальный спринт (2 недели для статуса Yellow, 4 недели для статуса Red).</li>
						|</ul></p>
						|<p>Спасибо и хорошего дня!</p>";
					
					гхб_ВзаимодействияСервер.СоздатьЭлектронноеПисьмо(_Адрес, _Тема, _Текст);
					
				КонецЕсли;
				
			КонецЦикла;
			
			РегистрыСведений.гхб_СобытияОбъектовБД.ЗаписатьДанныеСобытияОбъекта(Неопределено, Перечисления.гхб_ТипыСобытийОбъектовБД.РассылкаПоСтатусамКонсервацииПомещений, Формат(_Дата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("РассылкаПоСтатусамКонсервацииПомещений", УровеньЖурналаРегистрации.Ошибка, , , 
					ОписаниеОшибки());
		
	КонецПопытки;	
	
	
КонецПроцедуры

// Открепляет сотрудника от помещения если он уволен
Процедура ЗакрытьДоступыКПомещениямДляУволенныхСотрудников() Экспорт 

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних.Сотрудник КАК Сотрудник,
				   |	гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних.Помещение КАК Помещение,
	               |	гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних.РежимРаботы КАК РежимРаботы,
	               |	гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних.Плавающее КАК Плавающее
	               |ИЗ
	               |	РегистрСведений.гхб_ЗакреплениеСотрудниковЗаПомещениями.СрезПоследних(, ) КАК гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних
	               |ГДЕ
	               |	НЕ гхб_ЗакреплениеСотрудниковЗаПомещениямиСрезПоследних.Закрыть
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних.Сотрудник,
	               |	гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних.ГруппаПомещений,
	               |	гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних.РежимРаботы,
	               |	гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних.Плавающее
	               |ИЗ
	               |	РегистрСведений.гхб_ЗакреплениеСотрудниковЗаГруппойПомещений.СрезПоследних(, ) КАК гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних
	               |ГДЕ
	               |	НЕ гхб_ЗакреплениеСотрудниковЗаГруппойПомещенийСрезПоследних.Закрыть";
	
	_Рез = Запрос.Выполнить().Выгрузить();
	_МассивУволенныхФЛ = ВернутьУволенных(_Рез.ВыгрузитьКолонку("Сотрудник"));
	
	_Рез.Индексы.Добавить("Сотрудник");
	
	Для Каждого _УволенныйФЛ Из _МассивУволенныхФЛ Цикл
		
		НайденныеСтроки = _Рез.НайтиСтроки(Новый Структура("Сотрудник", _УволенныйФЛ));
		
		_Документ = Документы.гхб_ЗакреплениеПомещенийЗаСотрудниками.СоздатьДокумент();
		_Документ.Дата = ТекущаяДатаСеанса();
		_Документ.гхб_Ответственный = Пользователи.ТекущийПользователь();
		_Документ.гхб_Комментарий = "Автоматическое закрытие доступов: уволен";
		_Документ.Сотрудник = _УволенныйФЛ;
		_Документ.ТипЗакрепления = 1;
		
		Для Каждого Стр Из НайденныеСтроки Цикл
			НС = _Документ.Сотрудники.Добавить();
			НС.Закрыть = Истина;
			НС.СуществующийДоступ = Истина;
			НС.Сотрудник = _УволенныйФЛ;
			НС.Плавающее = Стр.Плавающее;
			НС.ПлавающееСтарое = Стр.Плавающее;
			НС.Помещение = Стр.Помещение;
			НС.РежимРаботы = Стр.РежимРаботы;
			НС.РежимРаботыСтарый = Стр.РежимРаботы;
		КонецЦикла;
		
		Если НЕ (_Документ.Сотрудники.Количество() = 0) Тогда
			_Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРегламентКаждые5Минут

// Процедура делает выгрузку помещений, которые изменялись в учетные базы
Процедура ВыгрузитьПомещенияВБазыХолдинга() Экспорт

	_ВнешнийИсточник = Справочники.гхб_СлужебныеЗначения.ВнешнийИсточникСТБ.Значение;
	
	Если НЕ ЗначениеЗаполнено(_ВнешнийИсточник) Тогда
		Возврат;
	КонецЕсли;
	
	_Узлы = гхб_ОбщегоНазначенияСервер.ВернутьМассивУзловДляРегистрацииОбменаДаннымиСБазамиХолдинга();

	ВыгрузитьДанныеПомещений(_ВнешнийИсточник, _Узлы);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеПомещений(_ВнешнийИсточник, _Узлы)

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ПомещенияИзменения.Ссылка КАК Ссылка,
	               |	гхб_ПомещенияИзменения.Ссылка.УИДСинхронизации КАК УИДСинхронизации,
	               |	гхб_СвойстваПомещенийСрезПоследних.НаименованиеПолное КАК НаименованиеПолное,
	               |	гхб_СвойстваПомещенийСрезПоследних.Локация КАК Локация,
	               |	гхб_СвойстваПомещенийСрезПоследних.Корпус КАК Корпус,
	               |	гхб_СвойстваПомещенийСрезПоследних.ЭлементСтроения КАК ЭлементСтроения,
	               |	гхб_СвойстваПомещенийСрезПоследних.НомерПомещения КАК НомерПомещения,
	               |	гхб_СвойстваПомещенийСрезПоследних.ДробнаяЧасть КАК ДробнаяЧасть,
	               |	гхб_СвойстваПомещенийСрезПоследних.УточняющаяИнформация КАК УточняющаяИнформация,
	               |	гхб_СвойстваПомещенийСрезПоследних.НаличиеОхраннойСигнализации КАК НаличиеОхраннойСигнализации,
	               |	гхб_СвойстваПомещенийСрезПоследних.НаличиеКТ КАК НаличиеКТ,
	               |	гхб_СвойстваПомещенийСрезПоследних.ОбщегоПользования КАК ОбщегоПользования,
	               |	гхб_ПомещенияИзменения.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	               |	гхб_ПомещенияИзменения.Ссылка.Родитель КАК Родитель,
	               |	гхб_ПомещенияИзменения.Ссылка.Родитель.УИДСинхронизации КАК РодительУИДСинхронизации,
	               |	гхб_ПомещенияИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	гхб_СвойстваПомещенийСрезПоследних.Закрыть КАК Закрыть
	               |ИЗ
	               |	Справочник.гхб_Помещения.Изменения КАК гхб_ПомещенияИзменения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СвойстваПомещений.СрезПоследних КАК гхб_СвойстваПомещенийСрезПоследних
	               |		ПО гхб_ПомещенияИзменения.Ссылка = гхб_СвойстваПомещенийСрезПоследних.Помещение
	               |ГДЕ
	               |	гхб_ПомещенияИзменения.Узел В(&Узел)";
	
	Запрос.УстановитьПараметр("Узел", _Узлы);
    Выборка = Запрос.Выполнить().Выбрать();
	
	_Массив = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		_Структура = Новый Структура();
		_Структура.Вставить("УИДСинхронизации", ?(ЗначениеЗаполнено(Выборка.УИДСинхронизации), Выборка.УИДСинхронизации, СокрЛП(Выборка.Ссылка.УникальныйИдентификатор())));
		_Структура.Вставить("ЭтоГруппа", Выборка.ЭтоГруппа);
		_Структура.Вставить("Родитель", ?(ЗначениеЗаполнено(Выборка.РодительУИДСинхронизации), Выборка.РодительУИДСинхронизации, СокрЛП(Выборка.Родитель.УникальныйИдентификатор())));
		_Структура.Вставить("Наименование", Выборка.НаименованиеПолное);
		_Структура.Вставить("Корпус", СокрЛП(Выборка.Корпус));
		_Структура.Вставить("ЭлементСтроения", СокрЛП(Выборка.ЭлементСтроения));
		_Структура.Вставить("НомерПомещения", Выборка.НомерПомещения);
		_Структура.Вставить("УточняющаяИнформация", Выборка.УточняющаяИнформация);
		_Структура.Вставить("НаличиеКТ", Выборка.НаличиеКТ);
		_Структура.Вставить("ОбщегоПользования", Выборка.ОбщегоПользования);
		_Структура.Вставить("НаличиеОхраннойСигнализации", Выборка.НаличиеОхраннойСигнализации);
		_Структура.Вставить("ДробнаяЧасть", Выборка.ДробнаяЧасть);
		_Структура.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления ИЛИ Выборка.Закрыть);
		
		_Массив.Добавить(_Структура);
		
	КонецЦикла;
	
	Если НЕ (_Массив.Количество() = 0) Тогда
		
		_РезультатВыполнения = JsonRPC.ВыполнитьПроцедуруJsonRPC(_ВнешнийИсточник, "ЗаписатьДанныеПомещений", _Массив, 0);
	
		Если _РезультатВыполнения.ОбменПрошел Тогда
			
			Если _РезультатВыполнения.Результат.result.УспешноеВыполнение Тогда
			
				Для Каждого _УИД Из _РезультатВыполнения.Результат.result.Данные Цикл
					_Помещение = Справочники.гхб_Помещения.ВернутьПомещениеПоИдентификатору(_УИД);
					
					Если ЗначениеЗаполнено(_Помещение) Тогда
						Для Каждого _Узел Из _Узлы Цикл
							ПланыОбмена.УдалитьРегистрациюИзменений(_Узел, _Помещение);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ЗаписьЖурналаРегистрации("Выгрузить помещения в базы холдинга", УровеньЖурналаРегистрации.Ошибка, , , 
					_РезультатВыполнения.Результат.result.Данные);
			КонецЕсли;
			
		Иначе
			ЗаписьЖурналаРегистрации("Выгрузить помещения в базы холдинга", УровеньЖурналаРегистрации.Ошибка, , , 
				_РезультатВыполнения.ТекстОшибки);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры
	
// Процедура делает выгрузку путей фото в базы холдинга(основное место работы)
Процедура ВыгрузитьФотоВБазыХолдинга()

	_Узлы = гхб_ОбщегоНазначенияСервер.ВернутьМассивУзловДляРегистрацииОбменаДаннымиСБазамиХолдинга();

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_ФизическиеЛицаБазХолдингаИзменения.Ссылка КАК Ссылка,
	               |	гхб_ФизическиеЛицаБазХолдингаИзменения.Ссылка.GUIDБазыХолдинга КАК GUIDБазыХолдинга,
	               |	ЕСТЬNULL(гхб_СписокФайлов.КаталогСохранения, """") КАК КаталогСохранения,
	               |	ЕСТЬNULL(гхб_СписокФайлов.ПолноеИмяФайла, """") КАК ПолноеИмяФайла,
	               |	гхб_ФизическиеЛицаБазХолдингаИзменения.Ссылка.БазаХолдинга.ВнешнийИсточникПоУмолчанию КАК ВнешнийИсточник,
	               |	гхб_ФизическиеЛицаБазХолдингаИзменения.Узел КАК Узел
	               |ИЗ
	               |	Справочник.гхб_ФизическиеЛицаБазХолдинга.Изменения КАК гхб_ФизическиеЛицаБазХолдингаИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СписокФайлов КАК гхб_СписокФайлов
	               |		ПО гхб_ФизическиеЛицаБазХолдингаИзменения.Ссылка.ФизЛицоТекущейБазы = гхб_СписокФайлов.ВладелецФайла
	               |			И (гхб_СписокФайлов.ТипДанных = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыДанныхФайлов.ФотоФизЛица))
	               |ГДЕ
	               |	гхб_ФизическиеЛицаБазХолдингаИзменения.Узел В(&Узел)";
	
	Запрос.УстановитьПараметр("Узел", _Узлы);
    Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КаталогСохранения) Тогда
			
			_Параметры = Новый Структура();
			_Параметры.Вставить("ФизЛицо", Выборка.GUIDБазыХолдинга);
			_Параметры.Вставить("ПутьКФото", гхб_ОбщегоНазначенияКлиентСервер.ДобавитьСлешВПуть(Выборка.КаталогСохранения.Значение) + Выборка.ПолноеИмяФайла);
			
			_РезультатВыполнения = JsonRPC.ВыполнитьПроцедуруJsonRPC(Выборка.ВнешнийИсточник, "ЗаписатьФотоФизЛица", _Параметры);
			
			Если _РезультатВыполнения.ОбменПрошел Тогда
				
				Если _РезультатВыполнения.Результат.result.УспешноеВыполнение Тогда
				
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел, Выборка.Ссылка);
											
				Иначе
					ЗаписьЖурналаРегистрации("Выгрузить фото в базы холдинга", УровеньЖурналаРегистрации.Ошибка, , , 
						_РезультатВыполнения.Результат.result.Данные);
				КонецЕсли;
				
			Иначе
				ЗаписьЖурналаРегистрации("Выгрузить фото в базы холдинга", УровеньЖурналаРегистрации.Ошибка, , , 
					_РезультатВыполнения.ТекстОшибки);
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

// Блокирует пользователей в базах холдинга
Процедура БлокироватьПользователейВБазахХолдинга()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(гхб_СобытияОбъектовБД.Объект КАК Справочник.гхб_ПользователиБазХолдинга) КАК Пользователь,
	               |	гхб_СобытияОбъектовБД.ДатаСобытия КАК ДатаСобытия
	               |ПОМЕСТИТЬ _Пользователи
	               |ИЗ
	               |	РегистрСведений.гхб_СобытияОбъектовБД КАК гхб_СобытияОбъектовБД
	               |ГДЕ
	               |	гхб_СобытияОбъектовБД.Объект ССЫЛКА Справочник.гхб_ПользователиБазХолдинга
	               |	И гхб_СобытияОбъектовБД.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя)
	               |	И гхб_СобытияОбъектовБД.ДатаСобытия <= &ДатаСобытия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	_Пользователи.Пользователь КАК Пользователь,
	               |	_Пользователи.ДатаСобытия КАК ДатаСобытия,
	               |	_Пользователи.Пользователь.БазаХолдинга КАК БазаХолдинга,
	               |	_Пользователи.Пользователь.GUIDБазыХолдинга КАК GUIDБазыХолдинга
	               |ИЗ
	               |	_Пользователи КАК _Пользователи
	               |ИТОГИ ПО
	               |	ДатаСобытия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ _Пользователи";
	
	Запрос.УстановитьПараметр("ДатаСобытия", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаДата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДата.Следующий() Цикл
			
			_МассивПользователей = Новый Массив();
			ВыборкаПользователи = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПользователи.Следующий() Цикл
				_Структура = Новый Структура;
				_Структура.Вставить("БазаХолдинга", ВыборкаПользователи.БазаХолдинга);
				_Структура.Вставить("Ссылка", ВыборкаПользователи.Пользователь);
				_Структура.Вставить("GUIDБазыХолдинга", ВыборкаПользователи.GUIDБазыХолдинга);
				
				_МассивПользователей.Добавить(_Структура);
			КонецЦикла;
			
			_ЗаблокированныеПользователи = гхб_ВзаимодействияСервер.ЗаблокироватьПользователейВБазеХолдинга(ВыборкаДата.ДатаСобытия, _МассивПользователей);
		
			Для Каждого _Пользователь Из _ЗаблокированныеПользователи Цикл
				РегистрыСведений.гхб_СобытияОбъектовБД.УдалитьДанныеСобытияОбъекта(_Пользователь, 
					Перечисления.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(гхб_СобытияОбъектовБД.Объект КАК Справочник.Пользователи) КАК Пользователь,
	               |	гхб_СобытияОбъектовБД.ДатаСобытия КАК ДатаСобытия
	               |ИЗ
	               |	РегистрСведений.гхб_СобытияОбъектовБД КАК гхб_СобытияОбъектовБД
	               |ГДЕ
	               |	гхб_СобытияОбъектовБД.Объект ССЫЛКА Справочник.Пользователи
	               |	И гхб_СобытияОбъектовБД.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя)
	               |	И гхб_СобытияОбъектовБД.ДатаСобытия <= &ДатаСобытия";
	
	Запрос.УстановитьПараметр("ДатаСобытия", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_Об = Выборка.Пользователь.ПолучитьОбъект();
		_Об.Недействителен = Истина;
		_Об.Записать();
		
		РегистрыСведений.гхб_СобытияОбъектовБД.УдалитьДанныеСобытияОбъекта(Выборка.Пользователь, 
			Перечисления.гхб_ТипыСобытийОбъектовБД.ПланируемаяБлокировкаПользователя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПлощадиПомещений()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	гхб_СвойстваПомещений.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.гхб_СвойстваПомещений КАК гхб_СвойстваПомещений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СобытияОбъектовБД КАК гхб_СобытияОбъектовБД
	               |		ПО гхб_СвойстваПомещений.Ссылка = гхб_СобытияОбъектовБД.Объект
	               |			И (гхб_СобытияОбъектовБД.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыСобытийОбъектовБД.ПервоеПроведениеДокумента))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гхб_СобытияОбъектовБД КАК гхб_СобытияОбъектовБДПлощади
	               |		ПО гхб_СвойстваПомещений.Ссылка = гхб_СобытияОбъектовБДПлощади.Объект
	               |			И (гхб_СобытияОбъектовБД.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.гхб_ТипыСобытийОбъектовБД.ПересчетПлощадиПомещений))
	               |ГДЕ
	               |	гхб_СобытияОбъектовБДПлощади.Объект ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		РегистрыСведений.гхб_ПлощадиПомещений.ЗаполнитьПлощадиПомещений();
		
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.гхб_СобытияОбъектовБД.ЗаписатьДанныеСобытияОбъекта(Выборка.Ссылка, Перечисления.гхб_ТипыСобытийОбъектовБД.ПересчетПлощадиПомещений);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПочтуОбменаДаннымиИОбработать()
	
	//МассивСообщений = Новый Массив();
	//
	//_Настройки = Справочники.ур_ВнешниеИсточники.НастройкиПочтаОбменДанными;
	//
	//Профиль = Новый ИнтернетПочтовыйПрофиль;
	//Профиль.АдресСервераPOP3 = ?(ЗначениеЗаполнено(_Настройки.Сервер), _Настройки.Сервер, "gs-hcnlb.gs.slm");
	//Профиль.Пользователь = ?(ЗначениеЗаполнено(_Настройки.Пользователь), _Настройки.Пользователь, "stb\1CTransfer");
	//Профиль.Пароль = ?(ЗначениеЗаполнено(_Настройки.Пароль), _Настройки.Пароль, "Qwerty123");
	//Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
	//
	//Попытка
	//	
	//	Почта = Новый ИнтернетПочта;
	//    Почта.Подключиться(Профиль);
	//    
	//	МассивЗаголовков = Почта.ПолучитьЗаголовки();
	//	
	//	_Массив = Новый Массив();
	//	
	//	_МассивТем = Новый Массив();
	//	_МассивТем.Добавить("Подписание [");
	//	_МассивТем.Добавить("Акцептирование факта [");
	//	_МассивТем.Добавить("Контактные данные ["); // Андрей 10-08-2017 +
	//	_МассивТем.Добавить("Подписание владельцами объектов [");
	//	_МассивТем.Добавить("Фактический адрес проживания [");
	//	_МассивТем.Добавить("Утверждение периода ремонта автомобиля [");
	//	//p.lukashov(04.01.2019) --->
	//	_МассивТем.Добавить("Согласование собеседования по анкете соискателя [");
	//	//p.lukashov(04.01.2019) <---
	//	//a.romanchuk(22.01.2019) --->
	//	_МассивТем.Добавить("Голосование за запуск тендера [");
	//	//a.romanchuk(22.01.2019) <---
	//	//++ a.romanchuk 20.02.2020 #
	//	_МассивТем.Добавить("Отписаться от рассылки [");
	//	//-- a.romanchuk 20.02.2020 #
	//	//++ p.lukashov(11.06.2020) #14257
	//	_МассивТем.Добавить("Утверждение шапки паспорта проекта [");
	//	//-- p.lukashov(11.06.2020)
	//	
	//	// ++ Литвиненко 28.08.2020 #15017  
	//	//Перенесено из СТБ
	//	_МассивТем.Добавить("Продлить договор с физлицом [");
	//	// -- Литвиненко 28.08.2020 #15017
	//	
	//	_МассивУдалять = Новый Массив();
	//	_МассивЗагружать = Новый Массив();
	//	
	//	_ПризнакМоейОрганизации = "[" + ЭлектроннаяПочта.ВернутьОрганизациюДляТемыПисьма() + "]";
	//	
	//	Для Каждого _Заголовок Из МассивЗаголовков Цикл
	//		
	//		_Удалять = Истина;
	//		
	//		Для Каждого _Тема Из _МассивТем Цикл
	//		
	//			Если СтрДлина(_Заголовок.Тема) >= СтрДлина(_Тема) И Лев(_Заголовок.Тема, СтрДлина(_Тема)) = _Тема Тогда
	//				
	//				_Удалять = Ложь;
	//				
	//				Если НЕ (СтрНайти(_Заголовок.Тема, _ПризнакМоейОрганизации) = 0) Тогда
	//					
	//					_МассивЗагружать.Добавить(_Заголовок);
	//					Прервать;
	//
	//				КонецЕсли;
	//		
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		Если _Удалять Тогда
	//			
	//			_МассивУдалять.Добавить(_Заголовок);
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если НЕ (_МассивУдалять.Количество() = 0) Тогда
	//		
	//		Почта.УдалитьСообщения(_МассивУдалять);
	//		_МассивУдалять.Очистить();
	//		
	//	КонецЕсли;
	//	
	//	Если НЕ (_МассивЗагружать.Количество() = 0) Тогда 
	//		
	//		МассивСообщений = Почта.Выбрать(Ложь, _МассивЗагружать);
	//		_СимволОткрытияТега = "<";
	//		_СимволЗакрытияТега = ">";
	//		_СтрокаЗакрытияБлока = "/p>";
	//		_СтрокаХТМЛ = "<html";
	//		_СимволРазделитель = Символ(8227);
	//		//++ a.romanchuk 16.06.2020 #
	//		_СимволРазделительВспомагательный = "&#8227;";
	//		//-- a.romanchuk 16.06.2020 #
	//		_СимволРазделительДанных = ":";
	//		_СтрокаКомментарий = "Комментарий:";
	//		_СтрокаСлужебныеДанные = "Служебные данные:";
	//		_СтрокаКонецБлокаДанных = "КонецБлокаДанных";
	//		_ДлинаСтрокиКонецБлокаДанных = СтрДлина(_СтрокаКонецБлокаДанных);
	//		
	//		Для Каждого _Сообщение Из МассивСообщений Цикл
	//		
	//			Попытка
	//				
	//				Если _Сообщение.Тексты.Количество() = 0 Тогда
	//					_МассивУдалять.Добавить(_Сообщение);
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				_СтруктураДанных = Новый Структура();
	//				_СтруктураДанных.Вставить("Почта", _Сообщение.Отправитель.Адрес);
	//				_СтруктураДанных.Вставить("ДатаСобытия", _Сообщение.ДатаОтправления);
	//				
	//				_Текст = _Сообщение.Тексты.Получить(0).Текст;
	//				
	//				//a.romanchuk(07.11.2016) --->
	//				Попытка
	//					_ПутьЛога = "\\stb\special\1c-dev\1C\Logs\Docs\" + Формат(ур_ОбщегоНазначенияСервер._ВернутьВремяНаСервере(), "ДФ=yyyyMMdd_HHmmss") + " - " + Строка(Новый УникальныйИдентификатор()) + ".txt";
	//					_ТекстЛога = _Текст + Символы.ПС + СтрокаСоединенияИнформационнойБазы();
	//					
	//					_ТекстовыйДокумент = Новый ТекстовыйДокумент();
	//					_ТекстовыйДокумент.УстановитьТекст(_ТекстЛога);
	//					
	//					Попытка
	//						_ТекстовыйДокумент.Записать(_ПутьЛога);
	//					Исключение
	//						ЗаписьЖурналаРегистрации("Запись лога", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка при логгировании: " + ОписаниеОшибки());
	//					КонецПопытки;
	//				Исключение
	//					//
	//				КонецПопытки;
	//				//a.romanchuk(07.11.2016) <---					
	//				
	//				_СтрокаЧистая = "";
	//				_ПозицияМаркера = СтрНайти(_Текст, _СимволРазделитель);
	//				
	//				//++ a.romanchuk 15.06.2020 #
	//				Если (_ПозицияМаркера = 0) Тогда 
	//					_ПозицияМаркераВспомагательная = СтрНайти(_Текст, _СимволРазделительВспомагательный);
	//					
	//					Если НЕ (_ПозицияМаркераВспомагательная = 0) Тогда 
	//						_СимволРазделитель = _СимволРазделительВспомагательный;
	//						_ПозицияМаркера = _ПозицияМаркераВспомагательная;
	//					КонецЕсли;
	//				КонецЕсли;
	//				//-- a.romanchuk 15.06.2020 #
	//				
	//				//++ a.romanchuk 21.08.2020 #
	//				Если (_ПозицияМаркера = 0) Тогда
	//					_МассивУдалять.Добавить(_Сообщение);
	//					Продолжить;
	//				КонецЕсли;
	//				//-- a.romanchuk 21.08.2020 #
	//				
	//				_ПозицияКомментария = СтрНайти(_Текст, _СтрокаКомментарий);
	//				
	//				Если НЕ СтрНайти(_Текст, _СтрокаХТМЛ) = 0 Тогда
	//				
	//					Если НЕ _ПозицияКомментария = 0 И (_ПозицияМаркера > _ПозицияКомментария) Тогда
	//						
	//						_ТекстКомментарийСверху = ВернутьТекстПодписанияИзХТМЛ(Прав(_Текст, СтрДлина(_Текст) - _ПозицияКомментария - СтрДлина(_СтрокаКомментарий) + 1));
	//						_ПозицияСлужебныеДанные = СтрНайти(_ТекстКомментарийСверху, _СтрокаСлужебныеДанные);
	//						_СтрокаЧистая = _СтрокаКомментарий + ?(_ПозицияСлужебныеДанные = 0, _ТекстКомментарийСверху, СокрЛП(Лев(_ТекстКомментарийСверху, _ПозицияСлужебныеДанные - 1))) + _СимволРазделитель;
	//						
	//					КонецЕсли;
	//					
	//					_СтрокаЧистая = _СтрокаЧистая + ВернутьТекстПодписанияИзХТМЛ(Прав(_Текст, СтрДлина(_Текст) - _ПозицияМаркера + 1));
	//					
	//				Иначе
	//					
	//					Если НЕ _ПозицияКомментария = 0 И (_ПозицияМаркера > _ПозицияКомментария) Тогда
	//						
	//						_ТекстКомментарийСверху = Прав(_Текст, СтрДлина(_Текст) - _ПозицияКомментария - СтрДлина(_СтрокаКомментарий) + 1);
	//						_ПозицияСлужебныеДанные = СтрНайти(_ТекстКомментарийСверху, _СтрокаСлужебныеДанные);
	//						_СтрокаЧистая = _СтрокаКомментарий + ?(_ПозицияСлужебныеДанные = 0, _ТекстКомментарийСверху, СокрЛП(Лев(_ТекстКомментарийСверху, _ПозицияСлужебныеДанные - 1))) + _СимволРазделитель;
	//						
	//					КонецЕсли;
	//					
	//					_СтрокаЧистая = _СтрокаЧистая + СокрЛП(Прав(_Текст, СтрДлина(_Текст) - _ПозицияМаркера + 1));
	//					
	//				КонецЕсли;
	//				
	//				_МассивСтрокПисьма = РаботаСоСтроками.ВернутьМассивСтрокИзСтроки(_СтрокаЧистая, _СимволРазделитель);
	//				
	//				Для Каждого _СтрокаМассиваДанныхПисьма Из _МассивСтрокПисьма Цикл
	//					
	//					_ПозицияРазделителяДанных = СтрНайти(_СтрокаМассиваДанныхПисьма, _СимволРазделительДанных);
	//					_Ключ = Лев(_СтрокаМассиваДанныхПисьма, _ПозицияРазделителяДанных - 1);
	//					
	//					Если (_Ключ = _СтрокаКонецБлокаДанных) 
	//						ИЛИ ПустаяСтрока(_Ключ)
	//						ИЛИ (СтрДлина(_СтрокаМассиваДанныхПисьма) >= _ДлинаСтрокиКонецБлокаДанных И Лев(_СтрокаМассиваДанныхПисьма, _ДлинаСтрокиКонецБлокаДанных) = _СтрокаКонецБлокаДанных) Тогда
	//						
	//							Прервать;
	//					КонецЕсли;
	//					
	//					Если НЕ _СтруктураДанных.Свойство(_Ключ) Тогда
	//						_СтруктураДанных.Вставить(_Ключ, СокрЛП(Прав(_СтрокаМассиваДанныхПисьма, СтрДлина(_СтрокаМассиваДанныхПисьма) - _ПозицияРазделителяДанных)));
	//					КонецЕсли;
	//					
	//				КонецЦикла;
	//				
	//				ОбработатьДанныеОбмена(_СтруктураДанных);
	//				
	//				_МассивУдалять.Добавить(_Сообщение);
	//				
	//			Исключение
	//				
	//				ТекстОшибки = ОписаниеОшибки();
	//    			ЗаписьЖурналаРегистрации("Чтение почты подписания", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	//				
	//			КонецПопытки;
	//				
	//		КонецЦикла;
	//	
	//	КонецЕсли;
	//	
	//	Если НЕ (_МассивУдалять.Количество() = 0) Тогда
	//		
	//		Почта.УдалитьСообщения(_МассивУдалять);
	//		
	//	КонецЕсли;
	//	
	//	Почта.Отключиться();
	//	
	//Исключение
	//	ТекстОшибки = ОписаниеОшибки();
	//    ЗаписьЖурналаРегистрации("Чтение почты подписания", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	//    Возврат;
	//КонецПопытки;
	
КонецПроцедуры

Функция ВернутьТекстПодписанияИзХТМЛ(_Текст)
	
	_СимволОткрытияТега = "<";
	_СимволЗакрытияТега = ">";
	_СтрокаЗакрытияБлока = "/p>";
	_СимволРазделитель = Символ(8227);
	
	_СтрокаЧистая = "";
					
	//_ПозицияМаркера = СтрНайти(_Текст, _СимволРазделитель);
	//_Текст = Прав(_Текст, СтрДлина(_Текст) - _ПозицияМаркера + 1);
	
	_ПозицияМаркера = СтрНайти(_Текст, _СимволОткрытияТега);
	_СтрокаЧистая = _СтрокаЧистая + Лев(_Текст, _ПозицияМаркера - 1);
	_Текст = Прав(_Текст, СтрДлина(_Текст) - _ПозицияМаркера);
	
	Пока НЕ СтрНайти(_Текст, _СимволОткрытияТега) = 0 Цикл
		
		_ПозицияОкончанияБлока = СтрНайти(_Текст, _СимволОткрытияТега);
		
		_ДобавочнаяСтрока = ?(_ПозицияОкончанияБлока = 1, "", Сред(_Текст, СтрНайти(_Текст, _СимволЗакрытияТега) + 1, _ПозицияОкончанияБлока - СтрНайти(_Текст, _СимволЗакрытияТега) - 1));
		_ДобавочнаяСтрока = СтрЗаменить(_ДобавочнаяСтрока, Символы.ВК, "");
		_ДобавочнаяСтрока = СтрЗаменить(_ДобавочнаяСтрока, Символы.ПС, "");
		_СтрокаЧистая = _СтрокаЧистая + _ДобавочнаяСтрока;
		
		Если СтрДлина(_Текст) > СтрДлина(_СтрокаЗакрытияБлока) И Лев(_Текст, СтрДлина(_СтрокаЗакрытияБлока)) = _СтрокаЗакрытияБлока Тогда
			
			_СтрокаЧистая = _СтрокаЧистая + Символы.ПС;
			
		КонецЕсли;
		
		_Текст = Прав(_Текст, СтрДлина(_Текст) - _ПозицияОкончанияБлока);
		
	КонецЦикла;
	
	_СтрокаЧистая = СтрЗаменить(_СтрокаЧистая, "&nbsp;", " ");
	_СтрокаЧистая = СокрЛП(_СтрокаЧистая);
	
	Возврат _СтрокаЧистая;
	
КонецФункции

Процедура ОбработатьДанныеИзБуфераОбменаСервер() Экспорт
	
	//Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	но_БуферОбменаДанными.УИД КАК УИД,
	//               |	но_БуферОбменаДанными.ДатаЗаписи КАК ДатаЗаписи,
	//               |	но_БуферОбменаДанными.Данные КАК Данные
	//               |ИЗ
	//               |	РегистрСведений.но_БуферОбменаДанными КАК но_БуферОбменаДанными
	//               |ГДЕ
	//               |	но_БуферОбменаДанными.ТипОбмена = ЗНАЧЕНИЕ(Перечисление.но_ТипыОбменаДаннымиБуфера.Почта)
	//               |	И НЕ но_БуферОбменаДанными.Обработано";
	//			   
	//Выборка = Запрос.Выполнить().Выбрать();                                    
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	_Рез = "";
	//	
	//	Попытка
	//		
	//		_Структура = ЗначениеИзСтрокиВнутр(Выборка.Данные);
	//		
	//		Если _Структура.ТипДокумента = "АкцептированиеФактаМузРедакторов"
	//			ИЛИ _Структура.ТипДокумента = "АкцептированиеФактаЗвукорежиссеровАЗМ" 
	//			//e.gubina (26.10.2018) --->
	//			ИЛИ _Структура.ТипДокумента = "АкцептированиеФактаРежиссеровПостпродакшина" Тогда
	//			//e.gubina (26.10.2018) <---
	//			РегистрыСведений.ур_ФактическаяОтработка.АкцептироватьЗаписиПоУведомлению(_Структура.ID, _Структура.Комментарий);
	//			
	//			//p.lukashov(14.05.2019) --->	
	//		ИначеЕсли _Структура.ТипДокумента = "но_РемонтАвтомобиля" Тогда	
	//			
	//			СсылкаРемонтАвтомобиля = Документы.но_РемонтАвтомобиля.ПолучитьСсылку(Новый УникальныйИдентификатор(_Структура.ID));
	//			Документы.но_РемонтАвтомобиля.УтвердитьДатыВДокументеРемонта(СсылкаРемонтАвтомобиля);
	//		Иначе	
	//			
	//			//p.lukashov(14.05.2019) <---
	//			
	//			//Если _Структура.ТипДокумента = "ЗаявкаНаСервисныеРаботы" Тогда
	//			//	
	//			//	_Документ = Документы.ЗаявкаНаСервисныеРаботы.ПолучитьСсылку(Новый УникальныйИдентификатор(_Структура.ID));
	//			//	
	//			//	Если ЗначениеЗаполнено(_Документ) Тогда
	//			//		
	//			//		Если _Структура.ТипОперации = "НеДоволен" Тогда
	//			//			_ТипОперации = Перечисления.ЗначенияКачественныхПоказателейХорошоПлохо.НеДовольны;
	//			//		ИначеЕсли _Структура.ТипОперации = "Доволен" Тогда
	//			//			_ТипОперации = Перечисления.ЗначенияКачественныхПоказателейХорошоПлохо.Довольны;
	//			//		Иначе
	//			//			_ТипОперации = Перечисления.ЗначенияКачественныхПоказателейХорошоПлохо.ПустаяСсылка();
	//			//		КонецЕсли;
	//			//		
	//			//		Если ЗначениеЗаполнено(_ТипОперации) Тогда
	//			//			
	//			//			_Почта = _Структура.Почта;
	//			//			_ФЛ = ПолучитьПользователяПоЭлАдресу(_Почта);
	//			
	//			//			Если ЗначениеЗаполнено(_ФЛ) Тогда
	//			//			
	//			//				_Об = _Документ.ПолучитьОбъект();
	//			//				_Об.ОценкаИсполнителя = _ТипОперации;
	//			//				_Об.КомментарийКОценке = _Структура.Комментарий;
	//			//				_Об.СтадияВыполнения = Перечисления.СтадииВыполненияЗаявок.Завершена;
	//			//				_Об.ДатаЗакрытияЗаявки = _ВернутьВремяНаСервере();
	//			//				
	//			//				НС = _Об.ИсторияРаботыСЗаявкой.Добавить();
	//			//				НС.Дата = _ВернутьВремяНаСервере();
	//			//				НС.КомментарийИсполнителя = СокрЛП("Закрытие заявки через почту");
	//			//				НС.Ответственный = _Пользователь(_ФЛ);
	//			//				
	//			//				_Об.ДействияПриЗакрытииЗаявки();
	//			//				
	//			//			КонецЕсли;
	//			//			
	//			//		КонецЕсли;
	//			//		
	//			//	КонецЕсли;
	//			//	
	//			//КонецЕсли;
	//			
	//			//	Задача = Задачи.СогласованиеДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(_Структура.IDПодписание));
	//			//	
	//			//	_Почта = _Структура.Почта;
	//			//	Пользователь = ПолучитьПользователяПоЭлАдресу(_Почта);
	//			//			
	//			//	Если ЗначениеЗаполнено(Задача) Тогда 
	//			//		Если НЕ Задача.Выполнена Тогда
	//			//			
	//			//			Если ЗначениеЗаполнено(Задача.РольДокументооборота) Тогда
	//			//				 МассивПользователей = СогласованиеДокументов.ПолучитьМассивПользов(Задача.РольДокументооборота);
	//			//			Иначе
	//			//				 МассивПользователей = Новый Массив();
	//			//			КонецЕсли;	
	//			//			
	//			//			Если Задача.Пользователь = Пользователь ИЛИ МассивПользователей.Найти(Пользователь) <> Неопределено 
	//			//				Или (ЗначениеЗаполнено(Пользователь) И Задача.Сотрудник = Пользователь.ФизЛицо) Тогда // Андрей 21-12-2016 +
	//			//				
	//			//				Если _Структура.ТипОперации = "Подписание" Тогда
	//			//					_СостояниеПодписи = Перечисления.СостояниеПодписи.Подписан;
	//			//				ИначеЕсли _Структура.ТипОперации = "Отмена" Тогда
	//			//					_СостояниеПодписи = Перечисления.СостояниеПодписи.Отклонен;
	//			//				ИначеЕсли _Структура.ТипОперации = "Ознакомление" Тогда
	//			//					_СостояниеПодписи = Перечисления.СостояниеПодписи.Ознакомлен;
	//			//				Иначе
	//			//					_СостояниеПодписи = Перечисления.СостояниеПодписи.ПустаяСсылка();
	//			//				КонецЕсли;
	//			//				
	//			//				Если ЗначениеЗаполнено(_СостояниеПодписи) Тогда
	//			//				
	//			//					ЗадачаОбъект = Задача.ПолучитьОбъект();
	//			//					
	//			//					ЗадачаОбъект.Состояние = _СостояниеПодписи;
	//			//					ЗадачаОбъект.Ответственный = Пользователь;
	//			//					ЗадачаОбъект.Примечание = _Структура.Комментарий;
	//			//					
	//			//					ЗадачаОбъект.ПроводитьОбработкуВыполнения = НЕ (_СостояниеПодписи = Перечисления.СостояниеПодписи.Ознакомлен);
	//			//					
	//			//					ЗадачаОбъект.ВыполнитьЗадачу();
	//			//					
	//			//				Иначе
	//			//					_Рез = "Не определен тип операции для подписания: " + _Структура.ТипОперации;
	//			//				КонецЕсли;
	//			//			Иначе
	//			//				_Рез = "Вы не можете подписать данный документ!";
	//			//			КонецЕсли;	
	//			//		Иначе
	//			//			_Рез = "Документ уже был подписан! Подписант: " + Задача.Ответственный + ".";	
	//			//		КонецЕсли;	
	//			//	Иначе
	//			//		_Рез = "Не найдена задача бизнес-процесса пописания!";
	//			//	КонецЕсли;
	//			//	
	//			
	//			_Почта = _Структура.Почта;
	//			СтруктураПользователь = ПолучитьПользователяПоЭлАдресу(_Почта);
	//			ФизЛицоБезПользователя = СтруктураПользователь.ФизЛицо;
	//			
	//			Задача = Задачи.СогласованиеДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(_Структура.IDПодписание));
	//			
	//			//Если ЗначениеЗаполнено(Задача) Тогда
	//			//Если по ГУИДу ничего не удалось найти, Задача все равно будет заполнена
	//			Если Задачи.СогласованиеДокумента.НайденныйОбъектСуществует(Задача) Тогда 
	//				Если НЕ Задача.Выполнена Тогда
	//					
	//					Если ЗначениеЗаполнено(Задача.РольДокументооборота) Тогда
	//						//МассивПользователей = СобытияПодписок.ПолучитьМассивПользов(Задача.РольДокументооборота, Задача.Документ); // Андрей 13-02-2017 + Задача.Документ
	//						МассивПользователей = СогласованиеДокументов.ПолучитьМассивПользов(Задача.РольДокументооборота); // Андрей 13-02-2017 + Задача.Документ
	//					Иначе
	//						МассивПользователей = Новый Массив();
	//					КонецЕсли;
	//					
	//					// ++ Литвиненко 14.09.2020 #15017  
	//					Если Задача.РольДокументооборота = Справочники.но_РолиДокументооборота.ОтветственныйЗаЦФОЗаявкаНаАВМ Тогда
	//						Если МассивПользователей.Найти(СтруктураПользователь.Пользователь) = Неопределено Тогда
	//							МассивПользователей.Добавить(СтруктураПользователь.Пользователь);
	//						КонецЕсли;
	//					КонецЕсли;
	//					// -- Литвиненко 14.09.2020 #15017
	//					
	//					Если Задача.Пользователь = СтруктураПользователь.Пользователь 
	//						ИЛИ МассивПользователей.Найти(СтруктураПользователь.Пользователь) <> Неопределено 
	//						ИЛИ Задача.Сотрудник = ФизЛицоБезПользователя
	//						ИЛИ ( ЗначениеЗаполнено(Задача.Документ.Автор) 
	//						И Задача.Документ.Автор = СтруктураПользователь.Пользователь ) Тогда 
	//						
	//						Если _Структура.ТипОперации = "Подписание" Тогда
	//							_СостояниеПодписи = Перечисления.но_СостояниеПодписи.Подписан;
	//						ИначеЕсли _Структура.ТипОперации = "Отмена" Тогда
	//							_СостояниеПодписи = Перечисления.но_СостояниеПодписи.Отклонен;
	//						ИначеЕсли _Структура.ТипОперации = "Ознакомление" Тогда
	//							_СостояниеПодписи = Перечисления.но_СостояниеПодписи.Ознакомлен;
	//						Иначе
	//							_СостояниеПодписи = Перечисления.но_СостояниеПодписи.ПустаяСсылка();
	//						КонецЕсли;
	//						
	//						Если ЗначениеЗаполнено(_СостояниеПодписи) Тогда
	//							
	//							ЗадачаОбъект = Задача.ПолучитьОбъект();
	//							
	//							// ++ Литвиненко 15.09.2020 #15017
	//							ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеПодменятьОтветственного", Истина);
	//							// -- Литвиненко 15.09.2020 #15017
	//							
	//							ЗадачаОбъект.Состояние = _СостояниеПодписи;
	//							ЗадачаОбъект.Ответственный = СтруктураПользователь.Пользователь;
	//							ЗадачаОбъект.Примечание = _Структура.Комментарий;
	//							
	//							ЗадачаОбъект.ПроводитьОбработкуВыполнения = НЕ (_СостояниеПодписи = Перечисления.но_СостояниеПодписи.Ознакомлен);
	//							
	//							//СотрудникДляОбходногоЛиста(ЗадачаОбъект, _Почта); // Андрей 24-04-2017 +
	//							
	//							ЗадачаОбъект.ВыполнитьЗадачу();
	//						Иначе
	//							_Рез = "Не определен тип операции для подписания: " + _Структура.ТипОперации;
	//						КонецЕсли;
	//					Иначе
	//						_Рез = "Вы не можете подписать данный документ!";
	//					КонецЕсли;  
	//				Иначе
	//					_Рез = "Документ уже был подписан! Подписант: " + Задача.Ответственный + ".";  
	//				КонецЕсли;  
	//			Иначе
	//				_Рез = "Не найдена задача бизнес-процесса пописания!";
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	Исключение
	//		_Рез = "Ошибка при подписании документа: " + ОписаниеОшибки();
	//	КонецПопытки;
	//	
	//	МЗ = РегистрыСведений.но_БуферОбменаДанными.СоздатьМенеджерЗаписи();
	//	МЗ.УИД = Выборка.УИД;
	//	
	//	Если ЗначениеЗаполнено(_Рез) Тогда
	//		
	//		МЗ.Прочитать();
	//		
	//		Если МЗ.Выбран() Тогда
	//			МЗ.РезультатОбработки = Строка(_ВернутьВремяНаСервере()) + ": " + _Рез;
	//			МЗ.Обработано = Истина;
	//			МЗ.Записать();
	//		КонецЕсли;
	//		
	//	Иначе
	//		
	//		//a.romanchuk(31.10.2016) <---
	//		// Пока что так
	//		МЗ.Прочитать();
	//		
	//		Если МЗ.Выбран() Тогда
	//			МЗ.Обработано = Истина;
	//			МЗ.Записать();
	//		КонецЕсли;
	//		
	//		//МЗ.Удалить();
	//		//a.romanchuk(31.10.2016) <---
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

// ++ Литвиненко 09.09.2020 #15017  
// как оказалось возможна такая ситуация, 
// когда у нескольких сотрудников один и тот же адрес почты, в силу схожих фамилий и первых букв имени, например karpenko.a@stb.ua
//
Функция ПолучитьПользователяПоЭлАдресу(АдресПочты) Экспорт
	
	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	//СтруктураОтвета.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	//СтруктураОтвета.Вставить("Заблокирован", Ложь);
	//
	//Запрос = Новый Запрос;
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ФизическиеЛицаДополнительныеРеквизиты.Ссылка КАК ФизЛицо,
	//               |	ФизическиеЛицаДополнительныеРеквизиты.Свойство КАК Свойство,
	//               |	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК Значение,
	//               |	Пользователи.Ссылка КАК Пользователь,
	//               |	Пользователи.Недействителен КАК Заблокирован
	//               |ИЗ
	//               |	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	//               |		ПО ФизическиеЛицаДополнительныеРеквизиты.Ссылка = Пользователи.ур_ФизЛицо
	//               |ГДЕ
	//               |	ФизическиеЛицаДополнительныеРеквизиты.Значение = &АдресПочты
	//               |	И ФизическиеЛицаДополнительныеРеквизиты.Свойство = &Свойство";
	//
	//Запрос.УстановитьПараметр("АдресПочты", АдресПочты);
	//Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АдресЭлектроннойПочты);
	//  	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ЗаполнитьЗначенияСвойств(СтруктураОтвета, Выборка);
	//КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции// -- Литвиненко 09.09.2020 #15017

#КонецОбласти

#Область ПроцедурыРегламентКаждые30Минут

Процедура ЗагрузитьДанныеИзБазыРесурсовСпискиДоступа()
	
	_ВнешнийИсточник = Справочники.гхб_СлужебныеЗначения.ВнешнийИсточникManageResources.Значение;
	
	Если НЕ ЗначениеЗаполнено(_ВнешнийИсточник) 
	 ИЛИ НЕ ТипЗнч(_ВнешнийИсточник) = Тип("СправочникСсылка.гхб_ВнешниеИсточники")
	 ИЛИ НЕ ЗначениеЗаполнено(_ВнешнийИсточник.Сервер) Тогда
	 
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
	СтруктураПараметров.Вставить("ДатаОкончания", гхб_ОбщегоНазначенияКлиентСервер.ДобавитьДеньКДате(КонецНедели(ТекущаяДатаСеанса()), 7));
	
	ОтветСервиса = JsonRPC.ВыполнитьПроцедуруJsonRPC(_ВнешнийИсточник, 
														"ПолучитьДанныеДляСписковДоступаНаЛокацию", 
														СтруктураПараметров);
														
	Если НЕ ОтветСервиса.ОбменПрошел Тогда
		ЗаписьЖурналаРегистрации("ЗагрузитьДанныеИзБазыРесурсовСпискиДоступа", 
			УровеньЖурналаРегистрации.Ошибка, , , ОтветСервиса.ТекстОшибки);
	ИначеЕсли НЕ ОтветСервиса.Результат.result.УспешноеВыполнение Тогда
		ЗаписьЖурналаРегистрации("ЗагрузитьДанныеИзБазыРесурсовСпискиДоступа", 
			УровеньЖурналаРегистрации.Ошибка, , , ОтветСервиса.Результат.result.Данные);
	Иначе	
		
		_МассивУспешногоВыполнения = Новый Массив();
		_Локация = Справочники.гхб_СлужебныеЗначения.ЛокацияМакуха.Значение;
		
		Для Каждого _СтрокаДокумента Из ОтветСервиса.Результат.result.Данные Цикл
			
			_ИдентификаторДокумента = _СтрокаДокумента.ИдентификаторДокумента;
			_ТипДокумента = _СтрокаДокумента.ТипДокумента;
			
			_ДокументСпискиДоступа = Документы.гхб_СпискиДоступаНаЛокацию.НайтиПоРеквизиту("ИдентификаторДокументаБазыРесурсов", _ИдентификаторДокумента);
			_ДобавлениеДокумента = Ложь;
			
			Если ЗначениеЗаполнено(_ДокументСпискиДоступа) Тогда
				_Об = _ДокументСпискиДоступа.ПолучитьОбъект();
				_Об.ДанныеПеренесенныеИзБазыРесурсов.Очистить();
			Иначе
				_ДобавлениеДокумента = Истина;
				
				_Об = Документы.гхб_СпискиДоступаНаЛокацию.СоздатьДокумент();
				_Об.Дата = ТекущаяДатаСеанса();
				_Об.гхб_Ответственный = Пользователи.ТекущийПользователь();
				_Об.гхб_Комментарий = _ТипДокумента + ": " + _ИдентификаторДокумента;
				_Об.ПеренесеноИзБазыРесурсов = Истина;
				_Об.ИдентификаторДокументаБазыРесурсов = _ИдентификаторДокумента;
			КонецЕсли;			
			
			Для Каждого _СтрокаТЧДокумента Из _СтрокаДокумента.СтрокиДокумента Цикл
				
				_ИНН = _СтрокаТЧДокумента.ИНН;
				
				Если ЗначениеЗаполнено(_ИНН) Тогда
				
					НС = _Об.ДанныеПеренесенныеИзБазыРесурсов.Добавить();
					НС.Сотрудник = Справочники.гхб_ФизическиеЛица.НайтиПоРеквизиту("ИНН", _ИНН);
					НС.СотрудникСтрока = _СтрокаТЧДокумента.Ресурс;
					НС.ДатаНачала = гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(_СтрокаТЧДокумента.Дата1, Истина);
					НС.ДатаОкончания = гхб_ОбщегоНазначенияКлиентСервер.ВернутьДатуИзСтроки(_СтрокаТЧДокумента.Дата2, Истина);
					НС.Локация = _Локация;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ _ДобавлениеДокумента 
			 ИЛИ (_ДобавлениеДокумента И _Об.ДанныеПеренесенныеИзБазыРесурсов.Количество() > 0) Тогда
			 
			 	_Об.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
			КонецЕсли;
			
			_МассивУспешногоВыполнения.Добавить(Новый Структура("ТипДокумента, УИД", _ТипДокумента, _ИдентификаторДокумента));
			
		КонецЦикла;
		
		Если НЕ (_МассивУспешногоВыполнения.Количество() = 0) Тогда
			
			ОтветСервисаСнятиеРегистрации = JsonRPC.ВыполнитьПроцедуруJsonRPC(Справочники.гхб_СлужебныеЗначения.ВнешнийИсточникManageResources.Значение, 
														"УдалитьРегистрациюДокументов", 
														_МассивУспешногоВыполнения);		
														
		КонецЕсли;												
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбменДаннымиПомещений

// Процедура выгружает в базу ПостОхраны (Guard) 
// и кадровую базу СТБ (от нее по РИБу будет обмен с другими кадровыми базами)
// измененных данных по помещениям и статусам консервации
Процедура ОбменДаннымиБазаОхраны() Экспорт 
	
	_ВнешнийИсточник = Справочники.гхб_ВнешниеИсточники.httpJsonRPC_БазаОхраны;
	
	Если НЕ ЗначениеЗаполнено(_ВнешнийИсточник.АдресРесурса) Тогда
		Возврат;
	КонецЕсли;
	
	_Узлы = гхб_ОбщегоНазначенияСервер.ВернутьМассивУзловДляРегистрацииОбменаДаннымиБазаОхраны();

	ВыгрузитьДанныеПомещений(_ВнешнийИсточник, _Узлы);
	ВыгрузитьДанныеКонсервацииПомещений(_ВнешнийИсточник, _Узлы);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеКонсервацииПомещений(_ВнешнийИсточник, _Узлы)

	ЗапросРегистраторы = Новый Запрос();
	ЗапросРегистраторы.Текст = "ВЫБРАТЬ
	               |	гхб_ЗакреплениеСтатусаКонсервацииПомещенияИзменения.Ссылка.Помещение КАК Помещение,
	               |	гхб_ЗакреплениеСтатусаКонсервацииПомещенияИзменения.Ссылка.Номер КАК Номер
	               |ИЗ
	               |	Документ.гхб_ЗакреплениеСтатусаКонсервацииПомещения.Изменения КАК гхб_ЗакреплениеСтатусаКонсервацииПомещенияИзменения
	               |ГДЕ
	               |	гхб_ЗакреплениеСтатусаКонсервацииПомещенияИзменения.Узел В(&Узел)";
	
	ЗапросРегистраторы.УстановитьПараметр("Узел", _Узлы);
	Рез = ЗапросРегистраторы.Выполнить().Выгрузить();
	
	_Регистраторы = Рез.ВыгрузитьКолонку("Номер");
	
	ЗапросДанные = Новый Запрос();
	ЗапросДанные.Текст = "ВЫБРАТЬ
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.Дата КАК Дата,
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение КАК Помещение,
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение.УИДСинхронизации КАК УИДСинхронизации,
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.ДокументКонсервации.Номер КАК Номер,
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.ДокументКонсервации.СтатусКонсервации КАК СтатусКонсервации
	                     |ИЗ
	                     |	РегистрСведений.гхб_АктуальныеДокументыКонсервацииПомещений КАК гхб_АктуальныеДокументыКонсервацииПомещений
	                     |ГДЕ
	                     |	гхб_АктуальныеДокументыКонсервацииПомещений.Помещение В(&Помещения)
	                     |	И гхб_АктуальныеДокументыКонсервацииПомещений.Дата >= &ДатаНачала";
	
	ЗапросДанные.УстановитьПараметр("Помещения", Рез.ВыгрузитьКолонку("Помещение"));
	ЗапросДанные.УстановитьПараметр("ДатаНачала", НачалоНедели(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)));
	
	Выборка = ЗапросДанные.Выполнить().Выбрать();
	
	_Данные = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		_Структура = Новый Структура();
		_Структура.Вставить("УИДСинхронизации", ?(ЗначениеЗаполнено(Выборка.УИДСинхронизации), Выборка.УИДСинхронизации, СокрЛП(Выборка.Помещение.УникальныйИдентификатор())));
		_Структура.Вставить("СтатусКонсервации", Перечисления.гхб_СтатусыКонсервацииПомещений.Индекс(Выборка.СтатусКонсервации));
		_Структура.Вставить("Дата", Выборка.Дата);
		_Структура.Вставить("Регистратор", Выборка.Номер);
		
		_Данные.Добавить(_Структура);
		
	КонецЦикла;
	
	Если НЕ (_Регистраторы.Количество() = 0) Тогда
		
		_Структура = Новый Структура();
		_Структура.Вставить("Регистраторы", _Регистраторы);
		_Структура.Вставить("Данные", _Данные);
		
		_РезультатВыполнения = JsonRPC.ВыполнитьПроцедуруJsonRPC(_ВнешнийИсточник, "ЗаписатьДанныеКонсервацииПомещений", _Структура);
	
		Если _РезультатВыполнения.ОбменПрошел Тогда
			
			Если _РезультатВыполнения.Результат.result.УспешноеВыполнение Тогда
			
				Для Каждого _Номер Из _РезультатВыполнения.Результат.result.Данные Цикл
					_Документ = Документы.гхб_ЗакреплениеСтатусаКонсервацииПомещения.НайтиПоНомеру(_Номер);
					
					Если ЗначениеЗаполнено(_Документ) Тогда
						Для Каждого _Узел Из _Узлы Цикл
							ПланыОбмена.УдалитьРегистрациюИзменений(_Узел, _Документ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ЗаписьЖурналаРегистрации("Выгрузить данные консервации помещений", УровеньЖурналаРегистрации.Ошибка, , , 
					_РезультатВыполнения.Результат.result.Данные);
			КонецЕсли;
			
		Иначе
			ЗаписьЖурналаРегистрации("Выгрузить данные консервации помещений", УровеньЖурналаРегистрации.Ошибка, , , 
				_РезультатВыполнения.ТекстОшибки);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти